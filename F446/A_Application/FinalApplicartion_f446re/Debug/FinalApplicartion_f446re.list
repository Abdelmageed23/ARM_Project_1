
FinalApplicartion_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038fc  080038fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000060  08003964  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003964  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070e3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001378  00000000  00000000  00027173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000468  00000000  00000000  00028a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c05  00000000  00000000  00028ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000060d0  00000000  00000000  0002baad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bf42  00000000  00000000  00031b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003dabf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001270  00000000  00000000  0003db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000060 	.word	0x20000060
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003674 	.word	0x08003674

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000064 	.word	0x20000064
 8000200:	08003674 	.word	0x08003674

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <APP3_voidinit>:
 *   initialization SPI  and GPIO-EXTI
 *   Configure from --> APP3_config.h
 ******************************************************************************
 */
void APP3_voidinit (void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b08f      	sub	sp, #60	; 0x3c
 800050c:	af00      	add	r7, sp, #0
	/********************************************************************************************************************************************/
	/**************************************************** SPI Configuration *********************************************************************/
	/********************************************************************************************************************************************/
	GPIO_PinConfig_T MOSI  ={ APP3_SPI_MOSI_PIN , ALTER_FUNC , SPEED_LOW , PUSH_PULL , NO_PULL , AF5 };
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <APP3_voidinit+0xe4>)
 8000510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000518:	6018      	str	r0, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	8019      	strh	r1, [r3, #0]
 800051e:	3302      	adds	r3, #2
 8000520:	0c0a      	lsrs	r2, r1, #16
 8000522:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&MOSI);
 8000524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000528:	4618      	mov	r0, r3
 800052a:	f000 ffe7 	bl	80014fc <GPIO_u8PinInit>
	GPIO_PinConfig_T MISO  ={ APP3_SPI_MISO_PIN , ALTER_FUNC , SPEED_LOW , PUSH_PULL , NO_PULL , AF5 };
 800052e:	4a30      	ldr	r2, [pc, #192]	; (80005f0 <APP3_voidinit+0xe8>)
 8000530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000538:	6018      	str	r0, [r3, #0]
 800053a:	3304      	adds	r3, #4
 800053c:	8019      	strh	r1, [r3, #0]
 800053e:	3302      	adds	r3, #2
 8000540:	0c0a      	lsrs	r2, r1, #16
 8000542:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&MISO);
 8000544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000548:	4618      	mov	r0, r3
 800054a:	f000 ffd7 	bl	80014fc <GPIO_u8PinInit>
	GPIO_PinConfig_T SCK   ={ APP3_SPI_SCK_PIN  , ALTER_FUNC , SPEED_LOW , PUSH_PULL , NO_PULL , AF5 };
 800054e:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <APP3_voidinit+0xec>)
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000558:	6018      	str	r0, [r3, #0]
 800055a:	3304      	adds	r3, #4
 800055c:	8019      	strh	r1, [r3, #0]
 800055e:	3302      	adds	r3, #2
 8000560:	0c0a      	lsrs	r2, r1, #16
 8000562:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&SCK);
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4618      	mov	r0, r3
 800056a:	f000 ffc7 	bl	80014fc <GPIO_u8PinInit>
	SPIconfig_t SPI_config ={APP3_SPI_INDEX,LEADING_CAPTURE,LEADING_RISING,MASTER,F_CLK_DIV_8,MSB,SELECT_ONE,MANAGMENT_ENABLE,FULL_DUPLEX,FORMAT_8_BIT
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <APP3_voidinit+0xf0>)
 8000570:	f107 0410 	add.w	r4, r7, #16
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	c407      	stmia	r4!, {r0, r1, r2}
 8000578:	8023      	strh	r3, [r4, #0]
 800057a:	3402      	adds	r4, #2
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	7023      	strb	r3, [r4, #0]
				                  ,RX_DMA_DISABLE ,TX_DMA_DISABLE,SS_OUTPUT_DISABLE ,RX_INTERRUPT_MASKED,TX_INTERRUPT_MASKED };
	MSPI_u8SetConfiguration(&SPI_config);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fd91 	bl	80020ac <MSPI_u8SetConfiguration>
	GPIO_PinConfig_T NSS  ={APP3_GPIO_NSS_PIN , OUTPUT , SPEED_LOW , PUSH_PULL , NO_PULL , AF0};
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <APP3_voidinit+0xf4>)
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	6018      	str	r0, [r3, #0]
 8000596:	3304      	adds	r3, #4
 8000598:	8019      	strh	r1, [r3, #0]
 800059a:	3302      	adds	r3, #2
 800059c:	0c0a      	lsrs	r2, r1, #16
 800059e:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&NSS);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 ffa9 	bl	80014fc <GPIO_u8PinInit>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2101      	movs	r1, #1
 80005ae:	2000      	movs	r0, #0
 80005b0:	f001 f8ec 	bl	800178c <GPIO_u8SetPinValue>
	/********************************************************************************************************************************************/
	/**************************************************** GPIO-EXTI Configuration ***************************************************************/
	/********************************************************************************************************************************************/
	GPIO_PinConfig_T AlarmNotification ={ APP3_GPIO_TO_EXTI_PIN , OUTPUT , SPEED_LOW , PUSH_PULL , NO_PULL , AF0 };
 80005b4:	2300      	movs	r3, #0
 80005b6:	703b      	strb	r3, [r7, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	707b      	strb	r3, [r7, #1]
 80005bc:	2301      	movs	r3, #1
 80005be:	70bb      	strb	r3, [r7, #2]
 80005c0:	2300      	movs	r3, #0
 80005c2:	70fb      	strb	r3, [r7, #3]
 80005c4:	2300      	movs	r3, #0
 80005c6:	713b      	strb	r3, [r7, #4]
 80005c8:	2300      	movs	r3, #0
 80005ca:	717b      	strb	r3, [r7, #5]
 80005cc:	2300      	movs	r3, #0
 80005ce:	71bb      	strb	r3, [r7, #6]
	GPIO_u8PinInit(&AlarmNotification);
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 ff92 	bl	80014fc <GPIO_u8PinInit>
	GPIO_u8SetPinValue(APP3_GPIO_TO_EXTI_PIN, PIN_LOW);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f001 f8d5 	bl	800178c <GPIO_u8SetPinValue>
	/********************************************************************************************************************************************/
	/********************************************************************************************************************************************/
	/********************************************************************************************************************************************/
}
 80005e2:	bf00      	nop
 80005e4:	373c      	adds	r7, #60	; 0x3c
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	0800368c 	.word	0x0800368c
 80005f0:	08003694 	.word	0x08003694
 80005f4:	0800369c 	.word	0x0800369c
 80005f8:	080036a4 	.word	0x080036a4
 80005fc:	080036b4 	.word	0x080036b4

08000600 <APP3_voidTurnOnGreenLed>:
 *   Turn Led By Sending '!' With SPI
 *
 ******************************************************************************
 */
void APP3_voidTurnOnGreenLed(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	2000      	movs	r0, #0
 800060a:	f001 f8bf 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch(APP3_SPI_INDEX,APP3_SPI_TRIGGER_GRN_LED,&Global_u8ReceiveTemp);
 800060e:	4a06      	ldr	r2, [pc, #24]	; (8000628 <APP3_voidTurnOnGreenLed+0x28>)
 8000610:	2121      	movs	r1, #33	; 0x21
 8000612:	2000      	movs	r0, #0
 8000614:	f001 ff5c 	bl	80024d0 <MSPI_u8SendReceiveSynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	2000      	movs	r0, #0
 800061e:	f001 f8b5 	bl	800178c <GPIO_u8SetPinValue>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000007d 	.word	0x2000007d

0800062c <APP3_voidTurnOnRedLed>:
 *   Turn Led By Sending '~' With SPI
 *
 ******************************************************************************
 */
void APP3_voidTurnOnRedLed(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	2000      	movs	r0, #0
 8000636:	f001 f8a9 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch(APP3_SPI_INDEX,APP3_SPI_TRIGGER_RED_LED,&Global_u8ReceiveTemp);
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <APP3_voidTurnOnRedLed+0x28>)
 800063c:	217e      	movs	r1, #126	; 0x7e
 800063e:	2000      	movs	r0, #0
 8000640:	f001 ff46 	bl	80024d0 <MSPI_u8SendReceiveSynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	2000      	movs	r0, #0
 800064a:	f001 f89f 	bl	800178c <GPIO_u8SetPinValue>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000007d 	.word	0x2000007d

08000658 <APP3_voidAlarmCompareMatch>:
 *   Send Pulse to Generate EXTI to Turn on Buzzer and Blue Led
 *
 ******************************************************************************
 */
void APP3_voidAlarmCompareMatch(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(APP3_GPIO_TO_EXTI_PIN, PIN_HIGH);
 800065e:	2201      	movs	r2, #1
 8000660:	2100      	movs	r1, #0
 8000662:	2000      	movs	r0, #0
 8000664:	f001 f892 	bl	800178c <GPIO_u8SetPinValue>
	for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=100;Local_u8Counter++)
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	e006      	b.n	800067c <APP3_voidAlarmCompareMatch+0x24>
	{
		Global_u8Pulstemp=Local_u8Counter;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <APP3_voidAlarmCompareMatch+0x3c>)
 8000674:	701a      	strb	r2, [r3, #0]
	for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=100;Local_u8Counter++)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b64      	cmp	r3, #100	; 0x64
 8000680:	d9f5      	bls.n	800066e <APP3_voidAlarmCompareMatch+0x16>
	}
	GPIO_u8SetPinValue(APP3_GPIO_TO_EXTI_PIN, PIN_LOW);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f880 	bl	800178c <GPIO_u8SetPinValue>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000007c 	.word	0x2000007c

08000698 <APP3_voidDisplayTime>:
 *   Display Time on LCD By sending '@'
 *
 ******************************************************************************
 */
void APP3_voidDisplayTime(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	RTC_time_t   GetTime;
	APP2_voidWantCurrentTime(&GetTime);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f92f 	bl	8000904 <APP2_voidWantCurrentTime>

	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	2000      	movs	r0, #0
 80006ac:	f001 f86e 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch(APP3_SPI_INDEX,APP3_SPI_TRIGGER_TIME,&Global_u8ReceiveTemp);
 80006b0:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <APP3_voidDisplayTime+0x5c>)
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	2000      	movs	r0, #0
 80006b6:	f001 ff0b 	bl	80024d0 <MSPI_u8SendReceiveSynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	2000      	movs	r0, #0
 80006c0:	f001 f864 	bl	800178c <GPIO_u8SetPinValue>

	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	2000      	movs	r0, #0
 80006ca:	f001 f85f 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8TransmitArraySynch(APP3_SPI_INDEX,TimeToString(&GetTime));
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8cf 	bl	8000874 <TimeToString>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4619      	mov	r1, r3
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 ff40 	bl	8002560 <MSPI_u8TransmitArraySynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 f851 	bl	800178c <GPIO_u8SetPinValue>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000007d 	.word	0x2000007d

080006f8 <APP3_voidDisplayDate>:
 *   Display Date on LCD By sending '#'
 *
 ******************************************************************************
 */
void APP3_voidDisplayDate(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	RTC_date_t   GetDate;
	APP2_voidWantCurrentDate(&GetDate);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8df 	bl	80008c4 <APP2_voidWantCurrentDate>

	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 8000706:	2200      	movs	r2, #0
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f001 f83e 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch(APP3_SPI_INDEX,APP3_SPI_TRIGGER_DATE,&Global_u8ReceiveTemp);
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <APP3_voidDisplayDate+0x5c>)
 8000712:	2123      	movs	r1, #35	; 0x23
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fedb 	bl	80024d0 <MSPI_u8SendReceiveSynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 800071a:	2201      	movs	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	2000      	movs	r0, #0
 8000720:	f001 f834 	bl	800178c <GPIO_u8SetPinValue>

	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f001 f82f 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8TransmitArraySynch(APP3_SPI_INDEX,DataToString(&GetDate));
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f875 	bl	8000820 <DataToString>
 8000736:	4603      	mov	r3, r0
 8000738:	4619      	mov	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f001 ff10 	bl	8002560 <MSPI_u8TransmitArraySynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	2000      	movs	r0, #0
 8000746:	f001 f821 	bl	800178c <GPIO_u8SetPinValue>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000007d 	.word	0x2000007d

08000758 <APP3_voidSendAlarmName>:
 *   Display Alarm Name on LCD By sending '$'
 *
 ******************************************************************************
 */
void APP3_voidSendAlarmName(uint8_t *AlarmName)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	2000      	movs	r0, #0
 8000766:	f001 f811 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch(APP3_SPI_INDEX,APP3_SPI_TRIGGER_ALARM,&Global_u8ReceiveTemp);
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <APP3_voidSendAlarmName+0x4c>)
 800076c:	2124      	movs	r1, #36	; 0x24
 800076e:	2000      	movs	r0, #0
 8000770:	f001 feae 	bl	80024d0 <MSPI_u8SendReceiveSynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f001 f807 	bl	800178c <GPIO_u8SetPinValue>

	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_LOW);
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	2000      	movs	r0, #0
 8000784:	f001 f802 	bl	800178c <GPIO_u8SetPinValue>
	MSPI_u8TransmitArraySynch(APP3_SPI_INDEX,AlarmName);
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	2000      	movs	r0, #0
 800078c:	f001 fee8 	bl	8002560 <MSPI_u8TransmitArraySynch>
	GPIO_u8SetPinValue(APP3_GPIO_NSS_PIN, PIN_HIGH);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fff9 	bl	800178c <GPIO_u8SetPinValue>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000007d 	.word	0x2000007d

080007a8 <NumberToString>:
/********************************************************************************************************************************************/
/**************************************************** Static Function ***********************************************************************/
/********************************************************************************************************************************************/
static void NumberToString (uint8_t Copy_u8Number , uint8_t* Copy_pu8String )
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Number <10)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d809      	bhi.n	80007ce <NumberToString+0x26>
	{
		Copy_pu8String[0]='0';
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2230      	movs	r2, #48	; 0x30
 80007be:	701a      	strb	r2, [r3, #0]
		Copy_pu8String[1]=Copy_u8Number + 48;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	3230      	adds	r2, #48	; 0x30
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	701a      	strb	r2, [r3, #0]
	else if (Copy_u8Number >10 && Copy_u8Number <99 )
	{
		Copy_pu8String[0]= (Copy_u8Number / 10 )+ 48;
		Copy_pu8String[1]= (Copy_u8Number % 10 )+ 48;
	}
}
 80007cc:	e01f      	b.n	800080e <NumberToString+0x66>
	else if (Copy_u8Number >10 && Copy_u8Number <99 )
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b0a      	cmp	r3, #10
 80007d2:	d91c      	bls.n	800080e <NumberToString+0x66>
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b62      	cmp	r3, #98	; 0x62
 80007d8:	d819      	bhi.n	800080e <NumberToString+0x66>
		Copy_pu8String[0]= (Copy_u8Number / 10 )+ 48;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <NumberToString+0x74>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3330      	adds	r3, #48	; 0x30
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	701a      	strb	r2, [r3, #0]
		Copy_pu8String[1]= (Copy_u8Number % 10 )+ 48;
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <NumberToString+0x74>)
 80007f2:	fba3 1302 	umull	r1, r3, r3, r2
 80007f6:	08d9      	lsrs	r1, r3, #3
 80007f8:	460b      	mov	r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b2da      	uxtb	r2, r3
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	3230      	adds	r2, #48	; 0x30
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	701a      	strb	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	cccccccd 	.word	0xcccccccd

08000820 <DataToString>:
static uint8_t *DataToString(RTC_date_t *Copy_Data)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	static uint8_t Local_Au8String[9];
	NumberToString(Copy_Data->date, &Local_Au8String[0]);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	490e      	ldr	r1, [pc, #56]	; (8000868 <DataToString+0x48>)
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffba 	bl	80007a8 <NumberToString>
	Local_Au8String[2]='/';
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <DataToString+0x48>)
 8000836:	222f      	movs	r2, #47	; 0x2f
 8000838:	709a      	strb	r2, [r3, #2]
	NumberToString(Copy_Data->month,&Local_Au8String[3]);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	490b      	ldr	r1, [pc, #44]	; (800086c <DataToString+0x4c>)
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb1 	bl	80007a8 <NumberToString>
	Local_Au8String[5]='/';
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <DataToString+0x48>)
 8000848:	222f      	movs	r2, #47	; 0x2f
 800084a:	715a      	strb	r2, [r3, #5]
	NumberToString(Copy_Data->year ,&Local_Au8String[6]);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <DataToString+0x50>)
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffa8 	bl	80007a8 <NumberToString>
	Local_Au8String[8]='\0';
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <DataToString+0x48>)
 800085a:	2200      	movs	r2, #0
 800085c:	721a      	strb	r2, [r3, #8]
	return Local_Au8String;
 800085e:	4b02      	ldr	r3, [pc, #8]	; (8000868 <DataToString+0x48>)
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000080 	.word	0x20000080
 800086c:	20000083 	.word	0x20000083
 8000870:	20000086 	.word	0x20000086

08000874 <TimeToString>:
static uint8_t *TimeToString(RTC_time_t *Copy_Time)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	static uint8_t Local_Au8String[9];
	NumberToString(Copy_Time->hours  ,&Local_Au8String[0]);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	490e      	ldr	r1, [pc, #56]	; (80008bc <TimeToString+0x48>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff90 	bl	80007a8 <NumberToString>
	Local_Au8String[2]=':';
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <TimeToString+0x48>)
 800088a:	223a      	movs	r2, #58	; 0x3a
 800088c:	709a      	strb	r2, [r3, #2]
	NumberToString(Copy_Time->minutes,&Local_Au8String[3]);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	785b      	ldrb	r3, [r3, #1]
 8000892:	490b      	ldr	r1, [pc, #44]	; (80008c0 <TimeToString+0x4c>)
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff87 	bl	80007a8 <NumberToString>
	Local_Au8String[5]=':';
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <TimeToString+0x48>)
 800089c:	223a      	movs	r2, #58	; 0x3a
 800089e:	715a      	strb	r2, [r3, #5]
	//NumberToString(Copy_Time->seconds,&Local_Au8String[6]);
	Local_Au8String[6]='0';
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <TimeToString+0x48>)
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	719a      	strb	r2, [r3, #6]
	Local_Au8String[7]='0';
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <TimeToString+0x48>)
 80008a8:	2230      	movs	r2, #48	; 0x30
 80008aa:	71da      	strb	r2, [r3, #7]
	Local_Au8String[8]='\0';
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <TimeToString+0x48>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	721a      	strb	r2, [r3, #8]
	return Local_Au8String;
 80008b2:	4b02      	ldr	r3, [pc, #8]	; (80008bc <TimeToString+0x48>)
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000008c 	.word	0x2000008c
 80008c0:	2000008f 	.word	0x2000008f

080008c4 <APP2_voidWantCurrentDate>:
    MSTK_u8ClockConfig(STK_AHB_DIV_8);
    MSTK_u8SetInterval(SYSTICK_RELOAD_VALUE,PERIODIC,APP2_SysTick_ISR);
}

void APP2_voidWantCurrentDate(RTC_date_t*GetDate)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    RTC_DateTime_t temparry;
    if (NULL!=APP2_pvCurrentDateTimearry)
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <APP2_voidWantCurrentDate+0x3c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d011      	beq.n	80008f8 <APP2_voidWantCurrentDate+0x34>
    {
    	BinaryToBCD(&APP2_pvCurrentDateTimearry->minutes,&temparry.minutes,6);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <APP2_voidWantCurrentDate+0x3c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2206      	movs	r2, #6
 80008e0:	4619      	mov	r1, r3
 80008e2:	f001 fb97 	bl	8002014 <BinaryToBCD>
        GetDate->date= (temparry.date);
 80008e6:	7afa      	ldrb	r2, [r7, #11]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	701a      	strb	r2, [r3, #0]
        GetDate->month= (temparry.month);
 80008ec:	7b3a      	ldrb	r2, [r7, #12]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	705a      	strb	r2, [r3, #1]
        GetDate->year=  (temparry.year);
 80008f2:	7b7a      	ldrb	r2, [r7, #13]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	709a      	strb	r2, [r3, #2]
    }
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000098 	.word	0x20000098

08000904 <APP2_voidWantCurrentTime>:
void APP2_voidWantCurrentTime(RTC_time_t*GetTime)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    RTC_DateTime_t temparry;
    if (NULL!=APP2_pvCurrentDateTimearry)
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <APP2_voidWantCurrentTime+0x38>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00e      	beq.n	8000932 <APP2_voidWantCurrentTime+0x2e>
    {
    	BinaryToBCD(&APP2_pvCurrentDateTimearry->minutes,&temparry.minutes,2);
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <APP2_voidWantCurrentTime+0x38>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2202      	movs	r2, #2
 8000920:	4619      	mov	r1, r3
 8000922:	f001 fb77 	bl	8002014 <BinaryToBCD>
        GetTime->hours= (temparry.hours);
 8000926:	7a7a      	ldrb	r2, [r7, #9]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	701a      	strb	r2, [r3, #0]
        GetTime->minutes= (temparry.minutes);
 800092c:	7a3a      	ldrb	r2, [r7, #8]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	705a      	strb	r2, [r3, #1]
    }
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000098 	.word	0x20000098

08000940 <DMA_u8Init>:
static DMA_RegDef_T *DMA_Arr[2] = {DMA1 , DMA2};
static DMA_Status DMA_StatusArr[2] ;
static void (*GeneralCallBackFun[DMA_TYPE_NUM*DMA_STREAM_NUM])(void) = {NULL};

uint8_t DMA_u8Init(DMA_Cnfg_T* DMA_Cnfg)
{
 8000940:	b490      	push	{r4, r7}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]


	if(DMA_Cnfg != NULL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 82d9 	beq.w	8000f06 <DMA_u8Init+0x5c6>
	{
		/* Set Channel Number */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_CHSEL_MASK << DMA_CHSEL_SHIFT);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4bbb      	ldr	r3, [pc, #748]	; (8000c48 <DMA_u8Init+0x308>)
 800095c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	79db      	ldrb	r3, [r3, #7]
 8000964:	4619      	mov	r1, r3
 8000966:	460b      	mov	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	440b      	add	r3, r1
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	3310      	adds	r3, #16
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	4611      	mov	r1, r2
 800097a:	4ab3      	ldr	r2, [pc, #716]	; (8000c48 <DMA_u8Init+0x308>)
 800097c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	79d2      	ldrb	r2, [r2, #7]
 8000984:	4610      	mov	r0, r2
 8000986:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4403      	add	r3, r0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3310      	adds	r3, #16
 8000996:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->ChannelNum << DMA_CHSEL_SHIFT);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4baa      	ldr	r3, [pc, #680]	; (8000c48 <DMA_u8Init+0x308>)
 80009a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	79db      	ldrb	r3, [r3, #7]
 80009a8:	4619      	mov	r1, r3
 80009aa:	460b      	mov	r3, r1
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	440b      	add	r3, r1
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	4413      	add	r3, r2
 80009b4:	3310      	adds	r3, #16
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	7a12      	ldrb	r2, [r2, #8]
 80009bc:	0652      	lsls	r2, r2, #25
 80009be:	4614      	mov	r4, r2
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4aa0      	ldr	r2, [pc, #640]	; (8000c48 <DMA_u8Init+0x308>)
 80009c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	79d2      	ldrb	r2, [r2, #7]
 80009d0:	4610      	mov	r0, r2
 80009d2:	ea43 0204 	orr.w	r2, r3, r4
 80009d6:	4603      	mov	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4403      	add	r3, r0
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3310      	adds	r3, #16
 80009e2:	601a      	str	r2, [r3, #0]

		/* Set data transfer direction*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_DIR_MASK << DMA_DIR_SHIFT);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b97      	ldr	r3, [pc, #604]	; (8000c48 <DMA_u8Init+0x308>)
 80009ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	4619      	mov	r1, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	440b      	add	r3, r1
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4413      	add	r3, r2
 8000a00:	3310      	adds	r3, #16
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a8f      	ldr	r2, [pc, #572]	; (8000c48 <DMA_u8Init+0x308>)
 8000a0c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	79d2      	ldrb	r2, [r2, #7]
 8000a14:	4610      	mov	r0, r2
 8000a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4403      	add	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	440b      	add	r3, r1
 8000a24:	3310      	adds	r3, #16
 8000a26:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->SrcDestMode << DMA_DIR_SHIFT);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <DMA_u8Init+0x308>)
 8000a30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	79db      	ldrb	r3, [r3, #7]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	440b      	add	r3, r1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4413      	add	r3, r2
 8000a44:	3310      	adds	r3, #16
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7952      	ldrb	r2, [r2, #5]
 8000a4c:	0192      	lsls	r2, r2, #6
 8000a4e:	4614      	mov	r4, r2
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a7c      	ldr	r2, [pc, #496]	; (8000c48 <DMA_u8Init+0x308>)
 8000a58:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	79d2      	ldrb	r2, [r2, #7]
 8000a60:	4610      	mov	r0, r2
 8000a62:	ea43 0204 	orr.w	r2, r3, r4
 8000a66:	4603      	mov	r3, r0
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4403      	add	r3, r0
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	3310      	adds	r3, #16
 8000a72:	601a      	str	r2, [r3, #0]

		/* Set priority level */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PL_MASK << DMA_PL_SHIFT);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <DMA_u8Init+0x308>)
 8000a7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	79db      	ldrb	r3, [r3, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	460b      	mov	r3, r1
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	440b      	add	r3, r1
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	4413      	add	r3, r2
 8000a90:	3310      	adds	r3, #16
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	7812      	ldrb	r2, [r2, #0]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a6b      	ldr	r2, [pc, #428]	; (8000c48 <DMA_u8Init+0x308>)
 8000a9c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	79d2      	ldrb	r2, [r2, #7]
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000aaa:	4603      	mov	r3, r0
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4403      	add	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3310      	adds	r3, #16
 8000ab6:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->PriorityLevel << DMA_PL_SHIFT);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <DMA_u8Init+0x308>)
 8000ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	460b      	mov	r3, r1
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	440b      	add	r3, r1
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	7a52      	ldrb	r2, [r2, #9]
 8000adc:	0412      	lsls	r2, r2, #16
 8000ade:	4614      	mov	r4, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a58      	ldr	r2, [pc, #352]	; (8000c48 <DMA_u8Init+0x308>)
 8000ae8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	79d2      	ldrb	r2, [r2, #7]
 8000af0:	4610      	mov	r0, r2
 8000af2:	ea43 0204 	orr.w	r2, r3, r4
 8000af6:	4603      	mov	r3, r0
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4403      	add	r3, r0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	3310      	adds	r3, #16
 8000b02:	601a      	str	r2, [r3, #0]

		/* Set Peripheral Increment Mode */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_MSIZE_MASK << DMA_PINC_SHIFT);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <DMA_u8Init+0x308>)
 8000b0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	79db      	ldrb	r3, [r3, #7]
 8000b14:	4619      	mov	r1, r3
 8000b16:	460b      	mov	r3, r1
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	440b      	add	r3, r1
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	4413      	add	r3, r2
 8000b20:	3310      	adds	r3, #16
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <DMA_u8Init+0x308>)
 8000b2c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	79d2      	ldrb	r2, [r2, #7]
 8000b34:	4610      	mov	r0, r2
 8000b36:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4403      	add	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3310      	adds	r3, #16
 8000b46:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= DMA_Cnfg->PerIncMode << DMA_PINC_SHIFT;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <DMA_u8Init+0x308>)
 8000b50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	79db      	ldrb	r3, [r3, #7]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	440b      	add	r3, r1
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	3310      	adds	r3, #16
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	7892      	ldrb	r2, [r2, #2]
 8000b6c:	0252      	lsls	r2, r2, #9
 8000b6e:	4614      	mov	r4, r2
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <DMA_u8Init+0x308>)
 8000b78:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	79d2      	ldrb	r2, [r2, #7]
 8000b80:	4610      	mov	r0, r2
 8000b82:	ea43 0204 	orr.w	r2, r3, r4
 8000b86:	4603      	mov	r3, r0
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4403      	add	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	3310      	adds	r3, #16
 8000b92:	601a      	str	r2, [r3, #0]

		/* Set Memory Increment Mode*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PSIZE_MASK << DMA_MINC_SHIFT);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <DMA_u8Init+0x308>)
 8000b9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	79db      	ldrb	r3, [r3, #7]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	440b      	add	r3, r1
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	3310      	adds	r3, #16
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <DMA_u8Init+0x308>)
 8000bbc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	79d2      	ldrb	r2, [r2, #7]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000bca:	4603      	mov	r3, r0
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4403      	add	r3, r0
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3310      	adds	r3, #16
 8000bd6:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= DMA_Cnfg->MemIncMode << DMA_MINC_SHIFT;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <DMA_u8Init+0x308>)
 8000be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	79db      	ldrb	r3, [r3, #7]
 8000be8:	4619      	mov	r1, r3
 8000bea:	460b      	mov	r3, r1
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	440b      	add	r3, r1
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	7852      	ldrb	r2, [r2, #1]
 8000bfc:	0292      	lsls	r2, r2, #10
 8000bfe:	4614      	mov	r4, r2
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <DMA_u8Init+0x308>)
 8000c08:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	79d2      	ldrb	r2, [r2, #7]
 8000c10:	4610      	mov	r0, r2
 8000c12:	ea43 0204 	orr.w	r2, r3, r4
 8000c16:	4603      	mov	r3, r0
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4403      	add	r3, r0
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3310      	adds	r3, #16
 8000c22:	601a      	str	r2, [r3, #0]


		/* Set peripheral data size */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PSIZE_MASK <<DMA_PSIZE_SHIFT);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <DMA_u8Init+0x308>)
 8000c2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	79db      	ldrb	r3, [r3, #7]
 8000c34:	4619      	mov	r1, r3
 8000c36:	460b      	mov	r3, r1
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	440b      	add	r3, r1
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4413      	add	r3, r2
 8000c40:	3310      	adds	r3, #16
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	e002      	b.n	8000c4c <DMA_u8Init+0x30c>
 8000c46:	bf00      	nop
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4ab1      	ldr	r2, [pc, #708]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000c54:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	79d2      	ldrb	r2, [r2, #7]
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000c62:	4603      	mov	r3, r0
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4403      	add	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3310      	adds	r3, #16
 8000c6e:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->PerIncSize <<DMA_PSIZE_SHIFT);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4ba8      	ldr	r3, [pc, #672]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000c78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	79db      	ldrb	r3, [r3, #7]
 8000c80:	4619      	mov	r1, r3
 8000c82:	460b      	mov	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3310      	adds	r3, #16
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	7912      	ldrb	r2, [r2, #4]
 8000c94:	02d2      	lsls	r2, r2, #11
 8000c96:	4614      	mov	r4, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4a9e      	ldr	r2, [pc, #632]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000ca0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	79d2      	ldrb	r2, [r2, #7]
 8000ca8:	4610      	mov	r0, r2
 8000caa:	ea43 0204 	orr.w	r2, r3, r4
 8000cae:	4603      	mov	r3, r0
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4403      	add	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3310      	adds	r3, #16
 8000cba:	601a      	str	r2, [r3, #0]


		if(DMA_Cnfg->TransferMode == FIFO_MODE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f040 80b1 	bne.w	8000e28 <DMA_u8Init+0x4e8>
		{
			/* Disable direct mode*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SFCR] |= (1 << DMA_DMDIS_SHIFT);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b92      	ldr	r3, [pc, #584]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	79db      	ldrb	r3, [r3, #7]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	440b      	add	r3, r1
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3324      	adds	r3, #36	; 0x24
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4a8a      	ldr	r2, [pc, #552]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000cee:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	79d2      	ldrb	r2, [r2, #7]
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f043 0204 	orr.w	r2, r3, #4
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4403      	add	r3, r0
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	3324      	adds	r3, #36	; 0x24
 8000d08:	601a      	str	r2, [r3, #0]

			/* Set memory data size */
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_MSIZE_MASK <<DMA_MSIZE_SHIFT);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b81      	ldr	r3, [pc, #516]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	79db      	ldrb	r3, [r3, #7]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	440b      	add	r3, r1
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4413      	add	r3, r2
 8000d26:	3310      	adds	r3, #16
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4a79      	ldr	r2, [pc, #484]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000d32:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	79d2      	ldrb	r2, [r2, #7]
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000d40:	4603      	mov	r3, r0
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4403      	add	r3, r0
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	601a      	str	r2, [r3, #0]
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->MemIncSize <<DMA_MSIZE_SHIFT);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b70      	ldr	r3, [pc, #448]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	79db      	ldrb	r3, [r3, #7]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	440b      	add	r3, r1
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	78d2      	ldrb	r2, [r2, #3]
 8000d72:	0352      	lsls	r2, r2, #13
 8000d74:	4614      	mov	r4, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a66      	ldr	r2, [pc, #408]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000d7e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	79d2      	ldrb	r2, [r2, #7]
 8000d86:	4610      	mov	r0, r2
 8000d88:	ea43 0204 	orr.w	r2, r3, r4
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4403      	add	r3, r0
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3310      	adds	r3, #16
 8000d98:	601a      	str	r2, [r3, #0]

			/* Set FIFO threshold*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_FTH_MASK);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000da2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	79db      	ldrb	r3, [r3, #7]
 8000daa:	4619      	mov	r1, r3
 8000dac:	460b      	mov	r3, r1
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	440b      	add	r3, r1
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	3310      	adds	r3, #16
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4a55      	ldr	r2, [pc, #340]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000dc2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	79d2      	ldrb	r2, [r2, #7]
 8000dca:	4610      	mov	r0, r2
 8000dcc:	f023 0203 	bic.w	r2, r3, #3
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4403      	add	r3, r0
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3310      	adds	r3, #16
 8000ddc:	601a      	str	r2, [r3, #0]
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->FIFOThresh);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	79db      	ldrb	r3, [r3, #7]
 8000dee:	4619      	mov	r1, r3
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	3310      	adds	r3, #16
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	7a92      	ldrb	r2, [r2, #10]
 8000e02:	4614      	mov	r4, r2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a43      	ldr	r2, [pc, #268]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000e0c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	79d2      	ldrb	r2, [r2, #7]
 8000e14:	4610      	mov	r0, r2
 8000e16:	ea43 0204 	orr.w	r2, r3, r4
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4403      	add	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	3310      	adds	r3, #16
 8000e26:	601a      	str	r2, [r3, #0]


		}

		/*Set Callback function */
		if(DMA_Cnfg->DMA_Type == DMA_1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d108      	bne.n	8000e42 <DMA_u8Init+0x502>
		{
			GeneralCallBackFun[DMA_Cnfg->StreamNum] = DMA_Cnfg->CallBackFunc;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	79db      	ldrb	r3, [r3, #7]
 8000e34:	4619      	mov	r1, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <DMA_u8Init+0x5dc>)
 8000e3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000e40:	e00b      	b.n	8000e5a <DMA_u8Init+0x51a>

		}
		else if(DMA_Cnfg->DMA_Type == DMA_2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d107      	bne.n	8000e5a <DMA_u8Init+0x51a>
		{
			GeneralCallBackFun[(DMA_Cnfg->StreamNum)+DMA_STREAM_NUM] = DMA_Cnfg->CallBackFunc;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	79db      	ldrb	r3, [r3, #7]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68d2      	ldr	r2, [r2, #12]
 8000e54:	4931      	ldr	r1, [pc, #196]	; (8000f1c <DMA_u8Init+0x5dc>)
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}

		/*Enable Corresponding interrupt*/
		if(DMA_Cnfg->InterruptType == FIFO_ERR)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7adb      	ldrb	r3, [r3, #11]
 8000e5e:	2b07      	cmp	r3, #7
 8000e60:	d122      	bne.n	8000ea8 <DMA_u8Init+0x568>
		{
			/* Enable FIFO interrupt*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SFCR] |= (1 << DMA_FEIE_SHIFT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	79db      	ldrb	r3, [r3, #7]
 8000e72:	4619      	mov	r1, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	440b      	add	r3, r1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3324      	adds	r3, #36	; 0x24
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000e8a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	79d2      	ldrb	r2, [r2, #7]
 8000e92:	4610      	mov	r0, r2
 8000e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4403      	add	r3, r0
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3324      	adds	r3, #36	; 0x24
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e027      	b.n	8000ef8 <DMA_u8Init+0x5b8>
		}
		else
		{
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (1 << DMA_Cnfg->InterruptType);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000eb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	79db      	ldrb	r3, [r3, #7]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	440b      	add	r3, r1
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3310      	adds	r3, #16
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	7ad2      	ldrb	r2, [r2, #11]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	408a      	lsls	r2, r1
 8000ed2:	4614      	mov	r4, r2
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <DMA_u8Init+0x5d8>)
 8000edc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	79d2      	ldrb	r2, [r2, #7]
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	ea43 0204 	orr.w	r2, r3, r4
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4403      	add	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	601a      	str	r2, [r3, #0]
		}


		/* DMA is IDLE*/
		DMA_StatusArr[DMA_Cnfg->DMA_Type] = DMA_IS_IDLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <DMA_u8Init+0x5e0>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	5499      	strb	r1, [r3, r2]
 8000f04:	e001      	b.n	8000f0a <DMA_u8Init+0x5ca>
	}


	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000f06:	2302      	movs	r3, #2
 8000f08:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc90      	pop	{r4, r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	200000a0 	.word	0x200000a0

08000f24 <DMA_u8StartTransfer>:

uint8_t DMA_u8StartTransfer(DMA_Cnfg_T *DMA_Cnfg,uint32_t *Copy_pu32SrcAddress , uint32_t *Copy_pu32DestAddress , uint16_t Copy_u32DataSize)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	807b      	strh	r3, [r7, #2]
	uint8_t Local_u8ErrorState = OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]

	if((DMA_Cnfg != NULL) && (Copy_pu32DestAddress != NULL) && (Copy_pu32SrcAddress != NULL) && (DMA_StatusArr[DMA_Cnfg->DMA_Type] != DMA_IS_BUSY))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a1 	beq.w	8001080 <DMA_u8StartTransfer+0x15c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 809d 	beq.w	8001080 <DMA_u8StartTransfer+0x15c>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8099 	beq.w	8001080 <DMA_u8StartTransfer+0x15c>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <DMA_u8StartTransfer+0x170>)
 8000f56:	5c9b      	ldrb	r3, [r3, r2]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f000 8091 	beq.w	8001080 <DMA_u8StartTransfer+0x15c>
	{
		/* DMA is in busy state*/
		DMA_StatusArr[DMA_Cnfg->DMA_Type] = DMA_IS_BUSY;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <DMA_u8StartTransfer+0x170>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	5499      	strb	r1, [r3, r2]

		if (DMA_Cnfg->SrcDestMode == MEM_TO_PERIPH)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	795b      	ldrb	r3, [r3, #5]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d121      	bne.n	8000fb6 <DMA_u8StartTransfer+0x92>
		{
			/* Set memory as source address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SM0AR] = (uint32_t)Copy_pu32SrcAddress;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b47      	ldr	r3, [pc, #284]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8000f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	79db      	ldrb	r3, [r3, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	4603      	mov	r3, r0
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4403      	add	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	331c      	adds	r3, #28
 8000f92:	601a      	str	r2, [r3, #0]

			/* Set peripheral as destination address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SPAR]  = (uint32_t)Copy_pu32DestAddress;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8000f9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	79db      	ldrb	r3, [r3, #7]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4403      	add	r3, r0
 8000fb2:	6019      	str	r1, [r3, #0]
 8000fb4:	e020      	b.n	8000ff8 <DMA_u8StartTransfer+0xd4>
		}

		else
		{
			/* Set peripheral as source address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SPAR]  = (uint32_t)Copy_pu32SrcAddress;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8000fbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4403      	add	r3, r0
 8000fd4:	6019      	str	r1, [r3, #0]

			/* Set memory as destination address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SM0AR] = (uint32_t)Copy_pu32DestAddress;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8000fde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79db      	ldrb	r3, [r3, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4603      	mov	r3, r0
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4403      	add	r3, r0
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	331c      	adds	r3, #28
 8000ff6:	601a      	str	r2, [r3, #0]

		}

		/* Set data size*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SNDTR] = 	Copy_u32DataSize;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8001000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	79db      	ldrb	r3, [r3, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	4603      	mov	r3, r0
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4403      	add	r3, r0
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3314      	adds	r3, #20
 8001018:	601a      	str	r2, [r3, #0]

		/*Clear interrupt status registers*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->ISR[0] = 0x00000000;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->ISR[1] = 0x00000000;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]

		/*Enable Stream*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= 1;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8001042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	79db      	ldrb	r3, [r3, #7]
 800104a:	4619      	mov	r1, r3
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	3310      	adds	r3, #16
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <DMA_u8StartTransfer+0x174>)
 8001062:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	79d2      	ldrb	r2, [r2, #7]
 800106a:	4610      	mov	r0, r2
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	4603      	mov	r3, r0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4403      	add	r3, r0
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3310      	adds	r3, #16
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e001      	b.n	8001084 <DMA_u8StartTransfer+0x160>

	}

	else
	{
		Local_u8ErrorState = NOK;
 8001080:	2301      	movs	r3, #1
 8001082:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8ErrorState;
 8001084:	7dfb      	ldrb	r3, [r7, #23]

}
 8001086:	4618      	mov	r0, r3
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000a0 	.word	0x200000a0
 8001098:	20000000 	.word	0x20000000

0800109c <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <DMA1_Stream0_IRQHandler+0x1c>)
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	609a      	str	r2, [r3, #8]

	GeneralCallBackFun[STREAM0]();
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <DMA1_Stream0_IRQHandler+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <DMA1_Stream0_IRQHandler+0x24>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40026000 	.word	0x40026000
 80010bc:	200000a4 	.word	0x200000a4
 80010c0:	200000a0 	.word	0x200000a0

080010c4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <DMA1_Stream1_IRQHandler+0x1c>)
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM1]();
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <DMA1_Stream1_IRQHandler+0x20>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <DMA1_Stream1_IRQHandler+0x24>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40026000 	.word	0x40026000
 80010e4:	200000a4 	.word	0x200000a4
 80010e8:	200000a0 	.word	0x200000a0

080010ec <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <DMA1_Stream2_IRQHandler+0x1c>)
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM2]();
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <DMA1_Stream2_IRQHandler+0x20>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <DMA1_Stream2_IRQHandler+0x24>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40026000 	.word	0x40026000
 800110c:	200000a4 	.word	0x200000a4
 8001110:	200000a0 	.word	0x200000a0

08001114 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <DMA1_Stream3_IRQHandler+0x1c>)
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM3]();
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <DMA1_Stream3_IRQHandler+0x20>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <DMA1_Stream3_IRQHandler+0x24>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40026000 	.word	0x40026000
 8001134:	200000a4 	.word	0x200000a4
 8001138:	200000a0 	.word	0x200000a0

0800113c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <DMA1_Stream4_IRQHandler+0x1c>)
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM4]();
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <DMA1_Stream4_IRQHandler+0x20>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <DMA1_Stream4_IRQHandler+0x24>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40026000 	.word	0x40026000
 800115c:	200000a4 	.word	0x200000a4
 8001160:	200000a0 	.word	0x200000a0

08001164 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <DMA1_Stream5_IRQHandler+0x1c>)
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM5]();
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <DMA1_Stream5_IRQHandler+0x20>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <DMA1_Stream5_IRQHandler+0x24>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40026000 	.word	0x40026000
 8001184:	200000a4 	.word	0x200000a4
 8001188:	200000a0 	.word	0x200000a0

0800118c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <DMA1_Stream6_IRQHandler+0x1c>)
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM6]();
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <DMA1_Stream6_IRQHandler+0x20>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <DMA1_Stream6_IRQHandler+0x24>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40026000 	.word	0x40026000
 80011ac:	200000a4 	.word	0x200000a4
 80011b0:	200000a0 	.word	0x200000a0

080011b4 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <DMA1_Stream7_IRQHandler+0x1c>)
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	60da      	str	r2, [r3, #12]


	/* Call Callback Function*/
	GeneralCallBackFun[STREAM7]();
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <DMA1_Stream7_IRQHandler+0x20>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_1] = DMA_IS_IDLE;
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <DMA1_Stream7_IRQHandler+0x24>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40026000 	.word	0x40026000
 80011d4:	200000a4 	.word	0x200000a4
 80011d8:	200000a0 	.word	0x200000a0

080011dc <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <DMA2_Stream0_IRQHandler+0x1c>)
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[(STREAM0 + DMA_STREAM_NUM)]();
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <DMA2_Stream0_IRQHandler+0x20>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <DMA2_Stream0_IRQHandler+0x24>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	705a      	strb	r2, [r3, #1]
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40026400 	.word	0x40026400
 80011fc:	200000a4 	.word	0x200000a4
 8001200:	200000a0 	.word	0x200000a0

08001204 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <DMA2_Stream1_IRQHandler+0x1c>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM1 + DMA_STREAM_NUM]();
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <DMA2_Stream1_IRQHandler+0x20>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <DMA2_Stream1_IRQHandler+0x24>)
 8001218:	2200      	movs	r2, #0
 800121a:	705a      	strb	r2, [r3, #1]
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40026400 	.word	0x40026400
 8001224:	200000a4 	.word	0x200000a4
 8001228:	200000a0 	.word	0x200000a0

0800122c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <DMA2_Stream2_IRQHandler+0x1c>)
 8001232:	f04f 32ff 	mov.w	r2, #4294967295
 8001236:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM2 + DMA_STREAM_NUM]();
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <DMA2_Stream2_IRQHandler+0x20>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	4798      	blx	r3

	/* DMA is in IDLE state*/
	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <DMA2_Stream2_IRQHandler+0x24>)
 8001240:	2200      	movs	r2, #0
 8001242:	705a      	strb	r2, [r3, #1]
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40026400 	.word	0x40026400
 800124c:	200000a4 	.word	0x200000a4
 8001250:	200000a0 	.word	0x200000a0

08001254 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <DMA2_Stream3_IRQHandler+0x1c>)
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM3 + DMA_STREAM_NUM]();
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <DMA2_Stream3_IRQHandler+0x20>)
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	4798      	blx	r3

	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <DMA2_Stream3_IRQHandler+0x24>)
 8001268:	2200      	movs	r2, #0
 800126a:	705a      	strb	r2, [r3, #1]
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40026400 	.word	0x40026400
 8001274:	200000a4 	.word	0x200000a4
 8001278:	200000a0 	.word	0x200000a0

0800127c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <DMA2_Stream4_IRQHandler+0x1c>)
 8001282:	f04f 32ff 	mov.w	r2, #4294967295
 8001286:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM4 + DMA_STREAM_NUM]();
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <DMA2_Stream4_IRQHandler+0x20>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4798      	blx	r3

	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <DMA2_Stream4_IRQHandler+0x24>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40026400 	.word	0x40026400
 800129c:	200000a4 	.word	0x200000a4
 80012a0:	200000a0 	.word	0x200000a0

080012a4 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <DMA2_Stream5_IRQHandler+0x1c>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM5 + DMA_STREAM_NUM]();
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <DMA2_Stream5_IRQHandler+0x20>)
 80012b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b4:	4798      	blx	r3

	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <DMA2_Stream5_IRQHandler+0x24>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	705a      	strb	r2, [r3, #1]
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40026400 	.word	0x40026400
 80012c4:	200000a4 	.word	0x200000a4
 80012c8:	200000a0 	.word	0x200000a0

080012cc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <DMA2_Stream6_IRQHandler+0x1c>)
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295
 80012d6:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM6 + DMA_STREAM_NUM]();
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <DMA2_Stream6_IRQHandler+0x20>)
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	4798      	blx	r3

	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <DMA2_Stream6_IRQHandler+0x24>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	705a      	strb	r2, [r3, #1]
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40026400 	.word	0x40026400
 80012ec:	200000a4 	.word	0x200000a4
 80012f0:	200000a0 	.word	0x200000a0

080012f4 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <DMA2_Stream7_IRQHandler+0x1c>)
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM7 + DMA_STREAM_NUM]();
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <DMA2_Stream7_IRQHandler+0x20>)
 8001302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001304:	4798      	blx	r3

	DMA_StatusArr[DMA_2] = DMA_IS_IDLE;
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <DMA2_Stream7_IRQHandler+0x24>)
 8001308:	2200      	movs	r2, #0
 800130a:	705a      	strb	r2, [r3, #1]
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40026400 	.word	0x40026400
 8001314:	200000a4 	.word	0x200000a4
 8001318:	200000a0 	.word	0x200000a0

0800131c <EXTI0_IRQHandler>:
{
	*RegisterValue = (EXTI->EXTI_PR);
}
/*ISR Functions*/
void EXTI0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[0])
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <EXTI0_IRQHandler+0x18>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <EXTI0_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[0]();
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <EXTI0_IRQHandler+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4798      	blx	r3
	}
	
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000e4 	.word	0x200000e4

08001338 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[1])
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <EXTI1_IRQHandler+0x18>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <EXTI1_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[1]();
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <EXTI1_IRQHandler+0x18>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4798      	blx	r3
	}
	
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000e4 	.word	0x200000e4

08001354 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[2])
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <EXTI2_IRQHandler+0x18>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <EXTI2_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[2]();
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <EXTI2_IRQHandler+0x18>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4798      	blx	r3
	}
	
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000e4 	.word	0x200000e4

08001370 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[3])
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <EXTI3_IRQHandler+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <EXTI3_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[3]();
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <EXTI3_IRQHandler+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4798      	blx	r3
	}
	
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000e4 	.word	0x200000e4

0800138c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[4])
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <EXTI4_IRQHandler+0x18>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <EXTI4_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[4]();
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <EXTI4_IRQHandler+0x18>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4798      	blx	r3
	}
	
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000e4 	.word	0x200000e4

080013a8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	if(((EXTI->EXTI_PR)>>5)& 1)
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <EXTI9_5_IRQHandler+0x94>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <EXTI9_5_IRQHandler+0x20>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[5])
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <EXTI9_5_IRQHandler+0x20>
		{
			EXTI_pvGlobCallBackLine[5]();
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>6)& 1)
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <EXTI9_5_IRQHandler+0x94>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <EXTI9_5_IRQHandler+0x3c>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[6])
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <EXTI9_5_IRQHandler+0x3c>
		{
			EXTI_pvGlobCallBackLine[6]();
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>7)& 1)
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <EXTI9_5_IRQHandler+0x94>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	09db      	lsrs	r3, r3, #7
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <EXTI9_5_IRQHandler+0x58>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[7])
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <EXTI9_5_IRQHandler+0x58>
		{
			EXTI_pvGlobCallBackLine[7]();
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>8)& 1)
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <EXTI9_5_IRQHandler+0x94>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <EXTI9_5_IRQHandler+0x74>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[8])
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <EXTI9_5_IRQHandler+0x74>
		{
			EXTI_pvGlobCallBackLine[8]();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>9)& 1)
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <EXTI9_5_IRQHandler+0x94>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	0a5b      	lsrs	r3, r3, #9
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <EXTI9_5_IRQHandler+0x90>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[9])
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <EXTI9_5_IRQHandler+0x90>
		{
			EXTI_pvGlobCallBackLine[9]();
 8001432:	4b03      	ldr	r3, [pc, #12]	; (8001440 <EXTI9_5_IRQHandler+0x98>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	4798      	blx	r3
		}
	}
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40013c00 	.word	0x40013c00
 8001440:	200000e4 	.word	0x200000e4

08001444 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if(((EXTI->EXTI_PR)>>10)& 1)
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	0a9b      	lsrs	r3, r3, #10
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <EXTI15_10_IRQHandler+0x20>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[10])
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <EXTI15_10_IRQHandler+0x20>
		{
			EXTI_pvGlobCallBackLine[10]();
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>11)& 1)
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	0adb      	lsrs	r3, r3, #11
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <EXTI15_10_IRQHandler+0x3c>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[11])
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <EXTI15_10_IRQHandler+0x3c>
		{
			EXTI_pvGlobCallBackLine[11]();
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>12)& 1)
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	0b1b      	lsrs	r3, r3, #12
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <EXTI15_10_IRQHandler+0x58>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[12])
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <EXTI15_10_IRQHandler+0x58>
		{
			EXTI_pvGlobCallBackLine[12]();
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>13)& 1)
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <EXTI15_10_IRQHandler+0x74>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[13])
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <EXTI15_10_IRQHandler+0x74>
		{
			EXTI_pvGlobCallBackLine[13]();
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>14)& 1)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	0b9b      	lsrs	r3, r3, #14
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <EXTI15_10_IRQHandler+0x90>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[14])
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <EXTI15_10_IRQHandler+0x90>
		{
			EXTI_pvGlobCallBackLine[14]();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	4798      	blx	r3
		}
	}if(((EXTI->EXTI_PR)>>15)& 1)
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <EXTI15_10_IRQHandler+0xb0>)
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	0bdb      	lsrs	r3, r3, #15
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <EXTI15_10_IRQHandler+0xac>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[15])
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <EXTI15_10_IRQHandler+0xac>
		{
			EXTI_pvGlobCallBackLine[15]();
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <EXTI15_10_IRQHandler+0xb4>)
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	4798      	blx	r3
		}
	}
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40013c00 	.word	0x40013c00
 80014f8:	200000e4 	.word	0x200000e4

080014fc <GPIO_u8PinInit>:
 * @brief 		the function initializes the GPIO pin according to the input parameters
 * @param[in]	PinConfig : the initialization values of the pin
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_T *PinConfig)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK,
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
			Local_u8RegNum,
			Local_u8BitNum;

	/*Check Null Pointer*/
	if(PinConfig != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8130 	beq.w	8001770 <GPIO_u8PinInit+0x274>
	{
		/*Check Valid Inputs Configuration*/
		if((PinConfig->Port <= PORTH) && ((PinConfig->PinNum) <= PIN15)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b07      	cmp	r3, #7
 8001516:	f200 8128 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f200 8123 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
				&& (PinConfig->Mode <= ANALOG) && (PinConfig->AltFunc <= AF15)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	789b      	ldrb	r3, [r3, #2]
 8001528:	2b03      	cmp	r3, #3
 800152a:	f200 811e 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	799b      	ldrb	r3, [r3, #6]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f200 8119 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
				&& (PinConfig->OutType <= OPEN_DRAIN) && (PinConfig->PullType <= PULL_DN)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	2b01      	cmp	r3, #1
 800153e:	f200 8114 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	2b02      	cmp	r3, #2
 8001548:	f200 810f 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
				&&(PinConfig->Speed) <= SPEED_HIGH)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b03      	cmp	r3, #3
 8001552:	f200 810a 	bhi.w	800176a <GPIO_u8PinInit+0x26e>
		{
			/*1. Set Pin Mode : Input ,Output ,Analog ,Alternative Function */
			(GPIOPort[PinConfig->Port]->MODER) &= ~(MODER_MASK << ((PinConfig->PinNum)*MODER_PIN_ACCESS)) ;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b8a      	ldr	r3, [pc, #552]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2103      	movs	r1, #3
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	4b83      	ldr	r3, [pc, #524]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800157c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001580:	400a      	ands	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
			(GPIOPort[PinConfig->Port]->MODER) |= ((PinConfig->Mode) << (PinConfig->PinNum)*MODER_PIN_ACCESS);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	4619      	mov	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	4b77      	ldr	r3, [pc, #476]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80015ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

			/*2. Set Pull State : PullUp ,PullDn ,NoPull*/
			(GPIOPort[PinConfig->Port]->PUPDR) &= ~(PUPDR_MASK << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80015da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015de:	400a      	ands	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]
			(GPIOPort[PinConfig->Port]->PUPDR) |= (PinConfig->PullType << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80015ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	4619      	mov	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	4619      	mov	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800160a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]

			/*Output Pin Setting*/
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d004      	beq.n	8001624 <GPIO_u8PinInit+0x128>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b02      	cmp	r3, #2
 8001620:	f040 80a9 	bne.w	8001776 <GPIO_u8PinInit+0x27a>
			{
				/*3. Set Output Type Of Pin : PushPull ,OpenDrain*/
				(GPIOPort[PinConfig->Port]->OTYPER) &= ~(OTYPER_MASK << PinConfig->PinNum);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	4619      	mov	r1, r3
 8001638:	2301      	movs	r3, #1
 800163a:	408b      	lsls	r3, r1
 800163c:	43db      	mvns	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	4b50      	ldr	r3, [pc, #320]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001648:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800164c:	400a      	ands	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
				(GPIOPort[PinConfig->Port]->OTYPER) |= (PinConfig->OutType << PinConfig->PinNum);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	4619      	mov	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4619      	mov	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001676:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]

				/*4. Set Speed Of Pin : Low ,Medium ,Fast ,High*/
				(GPIOPort[PinConfig->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b40      	ldr	r3, [pc, #256]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2103      	movs	r1, #3
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80016a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80016a8:	400a      	ands	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
				(GPIOPort[PinConfig->Port]->OSPEEDER) |= (PinConfig->Speed << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	4619      	mov	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <GPIO_u8PinInit+0x28c>)
 80016d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]

				/*5. Set Alternative Function*/
				if(PinConfig->Mode == ALTER_FUNC)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	789b      	ldrb	r3, [r3, #2]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d148      	bne.n	8001776 <GPIO_u8PinInit+0x27a>
				{
					Local_u8RegNum = (PinConfig->PinNum)/AFR_DIV_REM;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	73bb      	strb	r3, [r7, #14]
					Local_u8BitNum = ((PinConfig->PinNum)%AFR_DIV_REM)*AFR_PIN_ACCESS;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	737b      	strb	r3, [r7, #13]

					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << Local_u8BitNum);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	7bba      	ldrb	r2, [r7, #14]
 8001708:	3208      	adds	r2, #8
 800170a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	7bba      	ldrb	r2, [r7, #14]
 8001728:	4001      	ands	r1, r0
 800172a:	3208      	adds	r2, #8
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) |= (PinConfig->AltFunc << Local_u8BitNum);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <GPIO_u8PinInit+0x28c>)
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	7bba      	ldrb	r2, [r7, #14]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	799b      	ldrb	r3, [r3, #6]
 8001748:	461a      	mov	r2, r3
 800174a:	7b7b      	ldrb	r3, [r7, #13]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	4618      	mov	r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <GPIO_u8PinInit+0x28c>)
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	7bba      	ldrb	r2, [r7, #14]
 8001760:	4301      	orrs	r1, r0
 8001762:	3208      	adds	r2, #8
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8001768:	e005      	b.n	8001776 <GPIO_u8PinInit+0x27a>
				}
			}
		}
		else
		{
			Local_u8ErrorState = ERROR_STATE_NOK;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e003      	b.n	8001778 <GPIO_u8PinInit+0x27c>
		}
	}

	else
	{
		Local_u8ErrorState = ERROR_STATE_NULL_PTR;
 8001770:	2302      	movs	r3, #2
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e000      	b.n	8001778 <GPIO_u8PinInit+0x27c>
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8001776:	bf00      	nop
	}

	return Local_u8ErrorState;
 8001778:	7bfb      	ldrb	r3, [r7, #15]

}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008

0800178c <GPIO_u8SetPinValue>:
 * @param[in]	PinNum : the pin number ,get options @Pin_T enum
 * @param[in]	PinValue : the output value ,get options @PinVal_T
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8SetPinValue(Port_T Port , Pin_T PinNum , PinVal_T PinValue)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	460b      	mov	r3, r1
 8001798:	71bb      	strb	r3, [r7, #6]
 800179a:	4613      	mov	r3, r2
 800179c:	717b      	strb	r3, [r7, #5]
	uint8_t  Local_u8ErrorState = ERROR_STATE_OK;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]

	/*Check Valid Inputs Configuration*/
	if((Port <= PORTH) && (PinNum <= PIN15)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d827      	bhi.n	80017f8 <GPIO_u8SetPinValue+0x6c>
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	d824      	bhi.n	80017f8 <GPIO_u8SetPinValue+0x6c>
		&& (PinValue <= PIN_HIGH))
 80017ae:	797b      	ldrb	r3, [r7, #5]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d821      	bhi.n	80017f8 <GPIO_u8SetPinValue+0x6c>
	{
		(GPIOPort[Port])->ODR &= ~(ODR_MASK << PinNum);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <GPIO_u8SetPinValue+0x80>)
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	490f      	ldr	r1, [pc, #60]	; (800180c <GPIO_u8SetPinValue+0x80>)
 80017ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017d2:	4002      	ands	r2, r0
 80017d4:	615a      	str	r2, [r3, #20]
		(GPIOPort[Port])->ODR |= (PinValue << PinNum);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <GPIO_u8SetPinValue+0x80>)
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	7979      	ldrb	r1, [r7, #5]
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <GPIO_u8SetPinValue+0x80>)
 80017ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f2:	4302      	orrs	r2, r0
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	e001      	b.n	80017fc <GPIO_u8SetPinValue+0x70>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <MI2C_u8SetConfiguration>:
 ******************************************************************************
 */
static   I2C_REG* I2C_Index[I2C_NUMBERS]={I2C1,I2C2,I2C3};

uint8_t MI2C_u8SetConfiguration ( const I2Cconfig_t* I2Cconfig )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
	if (  I2Cconfig !=NULL )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80b5 	beq.w	800198e <MI2C_u8SetConfiguration+0x17e>
	{

		MI2C_voidResetI2C(I2Cconfig->I2Cindex);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fa97 	bl	8001d5c <MI2C_voidResetI2C>
		I2C_Index[I2Cconfig->I2Cindex]->CR1 |=  (I2C_F_S_MASK<<I2C_CCR_F_S);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184c:	601a      	str	r2, [r3, #0]
		I2C_Index[I2Cconfig->I2Cindex]->CR1 &= ~(I2C_F_S_MASK<<I2C_CCR_F_S);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4b4e      	ldr	r3, [pc, #312]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800186c:	601a      	str	r2, [r3, #0]
		uint32_t Local_u16Temp=0 , Local_u16Freq=0 , Local_u16Result=0 ;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
		Local_u16Temp=I2C_Index[I2Cconfig->I2Cindex]->CR2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_FREQ_MASK  << I2C_CR2_FREQ );
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001890:	613b      	str	r3, [r7, #16]
		Local_u16Freq=(P_CLOCK1/1000000);
 8001892:	2310      	movs	r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
		Local_u16Temp  |=  ( Local_u16Freq        );
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CR2=Local_u16Temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
		/*****************************************************************************/
		Local_u16Temp=0 ;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
		Local_u16Result =(P_CLOCK1/(2*(I2Cconfig->ClockSpeed)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <MI2C_u8SetConfiguration+0x190>)
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	60bb      	str	r3, [r7, #8]
		Local_u16Temp |=Local_u16Result;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_F_S_MASK          << I2C_CCR_F_S );
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018ce:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->MasterMode << I2C_CCR_F_S );
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	03db      	lsls	r3, r3, #15
 80018d6:	461a      	mov	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CCR = Local_u16Temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 80018e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	61da      	str	r2, [r3, #28]
		/*****************************************************************************/
		I2C_Index[I2Cconfig->I2Cindex]->TRISE = Local_u16Freq+I2C_TRISE_MASK ;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 80018f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	3201      	adds	r2, #1
 80018fe:	621a      	str	r2, [r3, #32]
		/*****************************************************************************/
		Local_u16Temp=0;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_NOSTRETCH_MASK          << I2C_CR1_NOSTRETCH );
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800190a:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->Clock_Stretching << I2C_CR1_NOSTRETCH );
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	01db      	lsls	r3, r3, #7
 8001912:	461a      	mov	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_SMBUS_MASK     << I2C_CR1_SMBUS );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f023 0302 	bic.w	r3, r3, #2
 8001920:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->I2Cmode << I2C_CR1_SMBUS );
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7a5b      	ldrb	r3, [r3, #9]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_ACK_MASK          << I2C_CR1_ACK );
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001936:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->Acknowledge << I2C_CR1_ACK );
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7a9b      	ldrb	r3, [r3, #10]
 800193c:	029b      	lsls	r3, r3, #10
 800193e:	461a      	mov	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_ENGC_MASK          << I2C_CR1_ENGC );
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800194c:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->GeneralCall << I2C_CR1_ENGC );
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7adb      	ldrb	r3, [r3, #11]
 8001952:	019b      	lsls	r3, r3, #6
 8001954:	461a      	mov	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CR1 = Local_u16Temp ;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	601a      	str	r2, [r3, #0]


		/*******************************************************************************/
		SET_BIT(I2C_Index[I2Cconfig->I2Cindex]->CR1,I2C_CR1_PE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MI2C_u8SetConfiguration+0x18c>)
 8001982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e001      	b.n	8001992 <MI2C_u8SetConfiguration+0x182>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 8001992:	7dfb      	ldrb	r3, [r7, #23]

}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000028 	.word	0x20000028
 80019a0:	00f42400 	.word	0x00f42400

080019a4 <MI2C_u8Transmit_DMA>:
	}
	return Local_u8ErrorState ;
}

uint8_t MI2C_u8Transmit_DMA( I2Cconfig_t* I2Cconfig , uint16_t Copy_u16SlaveAdd ,uint8_t *Copy_pu8Data , uint32_t Copy_u32Size)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	460b      	mov	r3, r1
 80019b2:	817b      	strh	r3, [r7, #10]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80019b4:	2301      	movs	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
	volatile uint32_t Local_u32tmp ;
	if ( I2Cconfig != NULL &&  Copy_pu8Data != NULL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d06a      	beq.n	8001a94 <MI2C_u8Transmit_DMA+0xf0>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d067      	beq.n	8001a94 <MI2C_u8Transmit_DMA+0xf0>
	{
		/*********************************************************************************************/
		for (uint32_t i =0 ; i<=100;i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	e004      	b.n	80019d4 <MI2C_u8Transmit_DMA+0x30>
		{
			Local_u32tmp=i;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	617b      	str	r3, [r7, #20]
		for (uint32_t i =0 ; i<=100;i++)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d9f7      	bls.n	80019ca <MI2C_u8Transmit_DMA+0x26>
		}

		/* Enable event interrupt*/
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |= 1 << I2C_ITEVTEN_SHIFT;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <MI2C_u8Transmit_DMA+0x100>)
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <MI2C_u8Transmit_DMA+0x100>)
 80019f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f8:	605a      	str	r2, [r3, #4]

		/* Enable DMA request */
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |=  (1 << I2C_CR2_DMAEN);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <MI2C_u8Transmit_DMA+0x100>)
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MI2C_u8Transmit_DMA+0x100>)
 8001a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a18:	605a      	str	r2, [r3, #4]

		/* Generate Start*/
		MI2C_u8GenerateStart( I2Cconfig->I2Cindex ,FUNC_STATE_ENABLE ,  REPEAT_DISABBLE);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f924 	bl	8001c70 <MI2C_u8GenerateStart>
		while( (MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , FLAG_EV5)==FLAG_SET));
 8001a28:	bf00      	nop
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f839 	bl	8001aa8 <MI2C_u8GetFlagStatus>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d0f6      	beq.n	8001a2a <MI2C_u8Transmit_DMA+0x86>


		/* Send slave Address*/
		MI2C_u8SendAddress( I2Cconfig->I2Cindex ,Copy_u16SlaveAdd , TRANSMITTER);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	8979      	ldrh	r1, [r7, #10]
 8001a42:	2200      	movs	r2, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f955 	bl	8001cf4 <MI2C_u8SendAddress>
		while( MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , FLAG_EV6)==FLAG_SET);
 8001a4a:	bf00      	nop
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2102      	movs	r1, #2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f828 	bl	8001aa8 <MI2C_u8GetFlagStatus>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d0f6      	beq.n	8001a4c <MI2C_u8Transmit_DMA+0xa8>
		/*********************************************************************************************/
		while( MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , MASTER_BYTE_TRANSMITTER)==FLAG_RESET);
 8001a5e:	bf00      	nop
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2103      	movs	r1, #3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f81e 	bl	8001aa8 <MI2C_u8GetFlagStatus>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f6      	beq.n	8001a60 <MI2C_u8Transmit_DMA+0xbc>

		/* Start transmission*/
		DMA_u8StartTransfer(&(I2Cconfig->DMA_Tx),(uint32_t *)Copy_pu8Data, (uint32_t *)(&(I2C_Index[I2Cconfig->I2Cindex]->DR)),Copy_u32Size);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f103 001c 	add.w	r0, r3, #28
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MI2C_u8Transmit_DMA+0x100>)
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	f103 0210 	add.w	r2, r3, #16
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f7ff fa49 	bl	8000f24 <DMA_u8StartTransfer>
 8001a92:	e001      	b.n	8001a98 <MI2C_u8Transmit_DMA+0xf4>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8ErrorState ;
 8001a98:	7ffb      	ldrb	r3, [r7, #31]

}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000028 	.word	0x20000028

08001aa8 <MI2C_u8GetFlagStatus>:
 *
 *
 ******************************************************************************
 */
static FlagStatus_t MI2C_u8GetFlagStatus( I2Cindex_t Copy_I2Cindex , Flag_t Copy_Flag)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71bb      	strb	r3, [r7, #6]
	volatile uint32_t Local_u32DummyRead;
	static uint32_t Local_u32Counter = 0;

	FlagStatus_t Local_BitStatus = FLAG_RESET ;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
	uint32_t Local_u32Flag1 , Local_u32Flag2 , Local_u32LastEvent ;
	switch (Copy_Flag)
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	f200 8087 	bhi.w	8001bd2 <MI2C_u8GetFlagStatus+0x12a>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <MI2C_u8GetFlagStatus+0x24>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001ae9 	.word	0x08001ae9
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b31 	.word	0x08001b31
 8001ad8:	08001b57 	.word	0x08001b57
 8001adc:	08001b91 	.word	0x08001b91
 8001ae0:	08001b91 	.word	0x08001b91
 8001ae4:	08001bab 	.word	0x08001bab
	{
	case FLAG_BUSY :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR2 ,I2C_SR2_BUSY))
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d163      	bne.n	8001bc4 <MI2C_u8GetFlagStatus+0x11c>
		{
			Local_BitStatus = FLAG_SET ;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
			Local_u32Counter++;
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <MI2C_u8GetFlagStatus+0x154>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <MI2C_u8GetFlagStatus+0x154>)
 8001b08:	6013      	str	r3, [r2, #0]
		}
		break;
 8001b0a:	e05b      	b.n	8001bc4 <MI2C_u8GetFlagStatus+0x11c>
	}
	case FLAG_EV5 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_SB))
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d154      	bne.n	8001bc8 <MI2C_u8GetFlagStatus+0x120>
		{

			/* Clear This flag by reading SR1*/
			uint32_t Local_u32Reading = I2C_Index[Copy_I2Cindex]->SR1;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	60fb      	str	r3, [r7, #12]
			Local_BitStatus =FLAG_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001b2e:	e04b      	b.n	8001bc8 <MI2C_u8GetFlagStatus+0x120>
	}
	case FLAG_EV6 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_ADDR))
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <MI2C_u8GetFlagStatus+0xa0>
		{
			Local_BitStatus = FLAG_SET ;
 8001b44:	2301      	movs	r3, #1
 8001b46:	77fb      	strb	r3, [r7, #31]
		}
		Local_u32DummyRead = I2C_Index[Copy_I2Cindex]->SR2 ;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	60bb      	str	r3, [r7, #8]
		break;
 8001b54:	e03d      	b.n	8001bd2 <MI2C_u8GetFlagStatus+0x12a>
	}
	case MASTER_BYTE_TRANSMITTER :
	{
		Local_u32Flag1 = I2C_Index[Copy_I2Cindex]->SR1 ;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	61bb      	str	r3, [r7, #24]
		Local_u32Flag2 = I2C_Index[Copy_I2Cindex]->SR2 ;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	617b      	str	r3, [r7, #20]
		Local_u32Flag2 = Local_u32Flag2 << I2C_BYTE_TRANSMITTER_MASK ;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	617b      	str	r3, [r7, #20]
		Local_u32LastEvent = (Local_u32Flag1 | Local_u32Flag2) & ((uint32_t)I2C_MASTER_BYTE_TRANSMITTER_MASK);
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b7e:	613b      	str	r3, [r7, #16]
		if ( (Local_u32LastEvent & I2C_EVENT_MASTER_BYTE_TRANSMITTER) == I2C_EVENT_MASTER_BYTE_TRANSMITTER)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MI2C_u8GetFlagStatus+0x158>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <MI2C_u8GetFlagStatus+0x158>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <MI2C_u8GetFlagStatus+0xe8>
		{
			Local_BitStatus = FLAG_SET ;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	77fb      	strb	r3, [r7, #31]
		}
	}
	case FLAG_EV8_1 :
	case FLAG_EV8 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_TxE))
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	09db      	lsrs	r3, r3, #7
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d113      	bne.n	8001bcc <MI2C_u8GetFlagStatus+0x124>
		{
			Local_BitStatus = FLAG_SET ;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001ba8:	e010      	b.n	8001bcc <MI2C_u8GetFlagStatus+0x124>
	}
	case FLAG_EV7 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_RxNE))
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MI2C_u8GetFlagStatus+0x150>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <MI2C_u8GetFlagStatus+0x128>
		{
			Local_BitStatus = FLAG_SET ;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001bc2:	e005      	b.n	8001bd0 <MI2C_u8GetFlagStatus+0x128>
		break;
 8001bc4:	bf00      	nop
 8001bc6:	e004      	b.n	8001bd2 <MI2C_u8GetFlagStatus+0x12a>
		break;
 8001bc8:	bf00      	nop
 8001bca:	e002      	b.n	8001bd2 <MI2C_u8GetFlagStatus+0x12a>
		break;
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <MI2C_u8GetFlagStatus+0x12a>
		break;
 8001bd0:	bf00      	nop
	}
	}

	if(Local_u32Counter == I2C_BUSY_TIME_OUT)
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MI2C_u8GetFlagStatus+0x154>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d106      	bne.n	8001bec <MI2C_u8GetFlagStatus+0x144>
	{
		Local_u32Counter = 0;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MI2C_u8GetFlagStatus+0x154>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
		MI2C_voidResetI2C(Copy_I2Cindex);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f8b8 	bl	8001d5c <MI2C_voidResetI2C>

	}
	return  Local_BitStatus ;
 8001bec:	7ffb      	ldrb	r3, [r7, #31]

}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000028 	.word	0x20000028
 8001bfc:	20000140 	.word	0x20000140
 8001c00:	00070080 	.word	0x00070080

08001c04 <MI2C_u8GenerateStop>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8GenerateStop( I2Cindex_t Copy_I2Cindex , StopCondition_t Copy_StopCondition )
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_StopCondition <= STOP_ENABLE )
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d81d      	bhi.n	8001c5a <MI2C_u8GenerateStop+0x56>
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d81a      	bhi.n	8001c5a <MI2C_u8GenerateStop+0x56>
	{
		I2C_Index[Copy_I2Cindex]->CR1  &=~ ( I2C_STOP_MASK      << I2C_CR1_STOP );
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <MI2C_u8GenerateStop+0x68>)
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <MI2C_u8GenerateStop+0x68>)
 8001c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
		I2C_Index[Copy_I2Cindex]->CR1  |=  ( Copy_StopCondition << I2C_CR1_STOP );
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <MI2C_u8GenerateStop+0x68>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4907      	ldr	r1, [pc, #28]	; (8001c6c <MI2C_u8GenerateStop+0x68>)
 8001c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c54:	4302      	orrs	r2, r0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e001      	b.n	8001c5e <MI2C_u8GenerateStop+0x5a>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000028 	.word	0x20000028

08001c70 <MI2C_u8GenerateStart>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8GenerateStart( I2Cindex_t Copy_I2Cindex , FunctionalState_t Copy_FunctionalState , StartRepeat_t Copy_StartRepeat)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	71bb      	strb	r3, [r7, #6]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_FunctionalState <= FUNC_STATE_ENABLE &&  Copy_StartRepeat <= REPEAT_ENABLE )
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d829      	bhi.n	8001ce0 <MI2C_u8GenerateStart+0x70>
 8001c8c:	79bb      	ldrb	r3, [r7, #6]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d826      	bhi.n	8001ce0 <MI2C_u8GenerateStart+0x70>
 8001c92:	797b      	ldrb	r3, [r7, #5]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d823      	bhi.n	8001ce0 <MI2C_u8GenerateStart+0x70>
	{
		while(FLAG_SET== MI2C_u8GetFlagStatus( Copy_I2Cindex , FLAG_BUSY));
 8001c98:	bf00      	nop
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff02 	bl	8001aa8 <MI2C_u8GetFlagStatus>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d0f7      	beq.n	8001c9a <MI2C_u8GenerateStart+0x2a>

		I2C_Index[Copy_I2Cindex]->CR1  &=~ ( I2C_START_MASK       << I2C_CR1_START );
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <MI2C_u8GenerateStart+0x80>)
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <MI2C_u8GenerateStart+0x80>)
 8001cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc0:	601a      	str	r2, [r3, #0]
		I2C_Index[Copy_I2Cindex]->CR1  |=  ( Copy_FunctionalState << I2C_CR1_START );
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <MI2C_u8GenerateStart+0x80>)
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <MI2C_u8GenerateStart+0x80>)
 8001cd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e001      	b.n	8001ce4 <MI2C_u8GenerateStart+0x74>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000028 	.word	0x20000028

08001cf4 <MI2C_u8SendAddress>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8SendAddress( I2Cindex_t Copy_I2Cindex , uint16_t Copy_u16SlaveAddress , Direction_t Copy_Direction )
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_u16SlaveAddress = Copy_u16SlaveAddress;
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	81bb      	strh	r3, [r7, #12]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_Direction <= RECEIVER  )
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d818      	bhi.n	8001d46 <MI2C_u8SendAddress+0x52>
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d815      	bhi.n	8001d46 <MI2C_u8SendAddress+0x52>
	{
		Local_u16SlaveAddress= (Local_u16SlaveAddress <<I2C_SLAVE_ADDRESS_MASK);
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	81bb      	strh	r3, [r7, #12]
		if ( Copy_Direction ==  RECEIVER )
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d104      	bne.n	8001d30 <MI2C_u8SendAddress+0x3c>
		{

			Local_u16SlaveAddress |= (I2C_SLAVE_ADDRESS_MASK  <<I2C_SLAVE_ADDRESS_RX_TX_BIT);
 8001d26:	89bb      	ldrh	r3, [r7, #12]
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	81bb      	strh	r3, [r7, #12]
 8001d2e:	e003      	b.n	8001d38 <MI2C_u8SendAddress+0x44>
		}
		else
		{
			Local_u16SlaveAddress &=~ (I2C_SLAVE_ADDRESS_MASK <<I2C_SLAVE_ADDRESS_RX_TX_BIT);
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	81bb      	strh	r3, [r7, #12]
		}
		I2C_Index[Copy_I2Cindex]->DR = Local_u16SlaveAddress;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <MI2C_u8SendAddress+0x64>)
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	89ba      	ldrh	r2, [r7, #12]
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	e001      	b.n	8001d4a <MI2C_u8SendAddress+0x56>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	20000028 	.word	0x20000028

08001d5c <MI2C_voidResetI2C>:
 *
 ******************************************************************************
 */

void MI2C_voidResetI2C(I2Cindex_t Copy_I2Cindex)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	/* Reset I2C */
	I2C_Index[Copy_I2Cindex]->CR1 = 1<<15;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <MI2C_voidResetI2C+0x24>)
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	20000028 	.word	0x20000028

08001d84 <MI2C_u8AcknowledgeConfig>:
static uint8_t MI2C_u8AcknowledgeConfig( I2Cindex_t Copy_I2Cindex , Acknowledge_t Copy_Acknowledge )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_Acknowledge <= ACK_ENABLE )
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d81d      	bhi.n	8001dda <MI2C_u8AcknowledgeConfig+0x56>
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d81a      	bhi.n	8001dda <MI2C_u8AcknowledgeConfig+0x56>
	{
		I2C_Index[Copy_I2Cindex]->CR1  &=~ ( I2C_ACK_MASK     << I2C_CR1_ACK );
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <MI2C_u8AcknowledgeConfig+0x68>)
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <MI2C_u8AcknowledgeConfig+0x68>)
 8001db2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dba:	601a      	str	r2, [r3, #0]
		I2C_Index[Copy_I2Cindex]->CR1  |=  ( Copy_Acknowledge << I2C_CR1_ACK );
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <MI2C_u8AcknowledgeConfig+0x68>)
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4618      	mov	r0, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4907      	ldr	r1, [pc, #28]	; (8001dec <MI2C_u8AcknowledgeConfig+0x68>)
 8001dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e001      	b.n	8001dde <MI2C_u8AcknowledgeConfig+0x5a>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000028 	.word	0x20000028

08001df0 <MI2C_u8ACallbackTx>:

void MI2C_u8ACallbackTx(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	I2C_Index[I2C_1]->CR1  &=~ ( I2C_STOP_MASK      << I2C_CR1_STOP );
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MI2C_u8ACallbackTx+0x30>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MI2C_u8ACallbackTx+0x30>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]
	I2C_Index[I2C_1]->CR1  |=  ( 1 << I2C_CR1_STOP );
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MI2C_u8ACallbackTx+0x30>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <MI2C_u8ACallbackTx+0x30>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e12:	601a      	str	r2, [r3, #0]


}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000028 	.word	0x20000028

08001e24 <MI2C_u8ACallbackRx>:

void MI2C_u8ACallbackRx(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	uint32_t Local_u8tmp;
	 MI2C_u8AcknowledgeConfig(I2C_1 , ACK_DISABBLE);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ffaa 	bl	8001d84 <MI2C_u8AcknowledgeConfig>
	 MI2C_u8GenerateStop(I2C_1 , STOP_ENABLE );
 8001e30:	2101      	movs	r1, #1
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fee6 	bl	8001c04 <MI2C_u8GenerateStop>

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <MNVIC_u8EnableInterrupt>:
 *
 ******************************************************************************
 */

uint8_t   MNVIC_u8EnableInterrupt    ( IntNumber_t Copy_IntNumber )
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
	if ( Copy_IntNumber <= NVIC_FMPI2C1_error )
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b60      	cmp	r3, #96	; 0x60
 8001e4e:	d80f      	bhi.n	8001e70 <MNVIC_u8EnableInterrupt+0x34>
	{
		uint8_t Local_u8Reg = Copy_IntNumber/NVIC_BIT_REG_ACCESS;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Bit = Copy_IntNumber%NVIC_BIT_REG_ACCESS;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	737b      	strb	r3, [r7, #13]
		NVIC -> ISER[Local_u8Reg] = ( NVIC_BIT_MASK << Local_u8Bit );
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	2201      	movs	r2, #1
 8001e62:	fa02 f103 	lsl.w	r1, r2, r3
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <MNVIC_u8EnableInterrupt+0x48>)
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e6e:	e001      	b.n	8001e74 <MNVIC_u8EnableInterrupt+0x38>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <RCC_u8SetClksts>:
 * @param[in]  ClkType  : the clock what it is want to change his state
 * @param[in]  State : the state which the user wants the clock to be OFForON
 * @retval ErrorStatus
 */
uint8_t RCC_u8SetClksts(CLKsSYS_type_ty ClkType,STATE_ty State)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ERROR_STATE_OK;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
	uint32_t Polling=0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
	while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
	{
    	Polling++;
    }
	*/
	switch (State)
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01e      	beq.n	8001ee4 <RCC_u8SetClksts+0x5c>
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d128      	bne.n	8001efc <RCC_u8SetClksts+0x74>
	{
	case STATE_ON:
		RCC->RCC_CR |=(1 << ClkType);
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <RCC_u8SetClksts+0x98>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	79fa      	ldrb	r2, [r7, #7]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <RCC_u8SetClksts+0x98>)
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6013      	str	r3, [r2, #0]
		while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
 8001ebe:	e002      	b.n	8001ec6 <RCC_u8SetClksts+0x3e>
		{
        	Polling++;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
		while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <RCC_u8SetClksts+0x98>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f003 0201 	and.w	r2, r3, #1
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d014      	beq.n	8001f02 <RCC_u8SetClksts+0x7a>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d1ee      	bne.n	8001ec0 <RCC_u8SetClksts+0x38>
    	}
		break;
 8001ee2:	e00e      	b.n	8001f02 <RCC_u8SetClksts+0x7a>
	case STATE_OFF:
		RCC->RCC_CR &=~(1 << ClkType);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <RCC_u8SetClksts+0x98>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	43d2      	mvns	r2, r2
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <RCC_u8SetClksts+0x98>)
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	6013      	str	r3, [r2, #0]
		/*NO need for polling*/
		break;
 8001efa:	e003      	b.n	8001f04 <RCC_u8SetClksts+0x7c>
	default:
		Local_ErrorState= ERROR_STATE_NOK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
		break;
 8001f00:	e000      	b.n	8001f04 <RCC_u8SetClksts+0x7c>
		break;
 8001f02:	bf00      	nop
	}
	if(Polling==CLKYYPE_TIMEOUT)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <RCC_u8SetClksts+0x8a>
	{
		Local_ErrorState = ERROR_STATE_TIME_OUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023800 	.word	0x40023800

08001f24 <RCC_SetSysClk>:
 * @brief the funtion change the system clock source, according to input parameter
 * @param[in] ClkType : the clock which uaer want to be a system clook
 * @retval Error status
*/
uint8_t RCC_SetSysClk(CLK_type_ty ClkType)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_ErrorState = ERROR_STATE_OK;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	if (ClkType <= PLL_R)
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d80c      	bhi.n	8001f52 <RCC_SetSysClk+0x2e>
	{
		RCC->RCC_CFGR &=~(TWO_BITS_MASKING << RCC_CFGR_SW_0);
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <RCC_SetSysClk+0x40>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <RCC_SetSysClk+0x40>)
 8001f3e:	f023 030b 	bic.w	r3, r3, #11
 8001f42:	6093      	str	r3, [r2, #8]
		RCC->RCC_CFGR |=(ClkType << RCC_CFGR_SW_0);
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <RCC_SetSysClk+0x40>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4906      	ldr	r1, [pc, #24]	; (8001f64 <RCC_SetSysClk+0x40>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e001      	b.n	8001f56 <RCC_SetSysClk+0x32>
	}
	else
	{
		Local_ErrorState=ERROR_STATE_NOK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40023800 	.word	0x40023800

08001f68 <RCC_voidAHB1EnablePerapheralClock>:


void RCC_voidAHB1EnablePerapheralClock(AHB1peripheral_ty Copy_Perapheral)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_AHB1ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <RCC_voidAHB1EnablePerapheralClock+0x28>)
 8001f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	4904      	ldr	r1, [pc, #16]	; (8001f90 <RCC_voidAHB1EnablePerapheralClock+0x28>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40023800 	.word	0x40023800

08001f94 <RCC_voidAPB2EnablePerapheralClock>:
{
	RCC->RCC_AHB1ENR &=~(ONE_BIT_MASKING<<Copy_Perapheral);
}

void RCC_voidAPB2EnablePerapheralClock(APB2peripheral_ty Copy_Perapheral)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB2ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <RCC_voidAPB2EnablePerapheralClock+0x28>)
 8001fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	4904      	ldr	r1, [pc, #16]	; (8001fbc <RCC_voidAPB2EnablePerapheralClock+0x28>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <RCC_voidAPB1EnablePerapheralClock>:
{
	RCC->RCC_APB2ENR &=~(ONE_BIT_MASKING<<Copy_Perapheral);
}

void RCC_voidAPB1EnablePerapheralClock(APB1peripheral_ty Copy_Perapheral)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB1ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <RCC_voidAPB1EnablePerapheralClock+0x28>)
 8001fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <RCC_voidAPB1EnablePerapheralClock+0x28>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40023800 	.word	0x40023800

08001fec <HRTC_u8Init>:
 *
 *
 ******************************************************************************
 */
void HRTC_u8Init( I2Cconfig_t *Copy_I2CCnfg )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	uint8_t Local_Au8TransmitArray[2] ;
	Local_Au8TransmitArray[0] = ADDRESS_SEC ;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	733b      	strb	r3, [r7, #12]
	Local_Au8TransmitArray[1] = RTC_SEC_MASK ;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	737b      	strb	r3, [r7, #13]
	/*********************************************************************************************/
	MI2C_u8Transmit_DMA(Copy_I2CCnfg, RTC_I2C_SLAVE_ADDRESS, Local_Au8TransmitArray,2);
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	2302      	movs	r3, #2
 8002002:	2168      	movs	r1, #104	; 0x68
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fccd 	bl	80019a4 <MI2C_u8Transmit_DMA>

	/*********************************************************************************************/
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <BinaryToBCD>:
 *
 *
 ******************************************************************************
 */
void BinaryToBCD  (uint8_t *Copy_pu8BinArr ,uint8_t *Copy_pu8BcdArr ,uint8_t Copy_u8ArrSize)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Tens , Local_u8Ones ,Local_u8Counter;


	for(Local_u8Counter = 0 ;Local_u8Counter < Copy_u8ArrSize ;Local_u8Counter++)
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
 8002026:	e034      	b.n	8002092 <BinaryToBCD+0x7e>
	{
		if ( Copy_pu8BinArr[Local_u8Counter] >= 10 )
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d923      	bls.n	800207c <BinaryToBCD+0x68>
		{
			Local_u8Tens =  Copy_pu8BinArr[Local_u8Counter]/10;
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <BinaryToBCD+0x94>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	08db      	lsrs	r3, r3, #3
 8002044:	75bb      	strb	r3, [r7, #22]
			Local_u8Ones =  Copy_pu8BinArr[Local_u8Counter]%10;
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <BinaryToBCD+0x94>)
 8002050:	fba3 1302 	umull	r1, r3, r3, r2
 8002054:	08d9      	lsrs	r1, r3, #3
 8002056:	460b      	mov	r3, r1
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	757b      	strb	r3, [r7, #21]
			Copy_pu8BcdArr[Local_u8Counter] = (uint8_t)((Local_u8Tens<<4) | Local_u8Ones) ;
 8002062:	7dbb      	ldrb	r3, [r7, #22]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	b25a      	sxtb	r2, r3
 8002068:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800206c:	4313      	orrs	r3, r2
 800206e:	b259      	sxtb	r1, r3
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e007      	b.n	800208c <BinaryToBCD+0x78>
		}
		else
		{
			Copy_pu8BcdArr[Local_u8Counter] = Copy_pu8BinArr[Local_u8Counter];
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	441a      	add	r2, r3
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	440b      	add	r3, r1
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	701a      	strb	r2, [r3, #0]
	for(Local_u8Counter = 0 ;Local_u8Counter < Copy_u8ArrSize ;Local_u8Counter++)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	3301      	adds	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
 8002092:	7dfa      	ldrb	r2, [r7, #23]
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3c6      	bcc.n	8002028 <BinaryToBCD+0x14>
		}
	}



}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	cccccccd 	.word	0xcccccccd

080020ac <MSPI_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SetConfiguration ( const SPIconfig_t* SPIconfig )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
	if (  SPIconfig !=NULL )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 81fd 	beq.w	80024ba <MSPI_u8SetConfiguration+0x40e>
	{
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ ( SPI_CPHA_MASK         << SPI_CR1_CPHA );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4ba4      	ldr	r3, [pc, #656]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80020d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  ( SPIconfig->ClockPhase << SPI_CR1_CPHA );
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4ba0      	ldr	r3, [pc, #640]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	4619      	mov	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	4b9b      	ldr	r3, [pc, #620]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80020fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ ( SPI_CPOL_MASK            << SPI_CR1_CPOL );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b97      	ldr	r3, [pc, #604]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4b93      	ldr	r3, [pc, #588]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800211a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800211e:	f022 0202 	bic.w	r2, r2, #2
 8002122:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  ( SPIconfig->ClockPolarity << SPI_CR1_CPOL );
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4619      	mov	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	4b89      	ldr	r3, [pc, #548]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002142:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ ( SPI_MSTR_MASK           << SPI_CR1_MSTR );
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002164:	f022 0204 	bic.w	r2, r2, #4
 8002168:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  ( SPIconfig->SPI_MCUstate << SPI_CR1_MSTR );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	4b7d      	ldr	r3, [pc, #500]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4619      	mov	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	4b78      	ldr	r3, [pc, #480]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002188:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ ( SPI_BR_MASK         << SPI_CR1_BR );
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021aa:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80021ae:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  ( SPIconfig->BaudRate << SPI_CR1_BR );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	791b      	ldrb	r3, [r3, #4]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4619      	mov	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ (SPI_LSBFIRST_MASK      << (SPI_CR1_LSBFIRST));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b62      	ldr	r3, [pc, #392]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  (SPIconfig->FrameFormat << (SPI_CR1_LSBFIRST));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	795b      	ldrb	r3, [r3, #5]
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	4619      	mov	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002214:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ (SPI_SSI_MASK                   << (SPI_CR1_SSI));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  (SPIconfig->InternalSlaveSelect << (SPI_CR1_SSI));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	799b      	ldrb	r3, [r3, #6]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	4619      	mov	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800225a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ (SPI_SSM_MASK                      << (SPI_CR1_SSM));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800227c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002280:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  (SPIconfig->SoftwareSlaveManagment << (SPI_CR1_SSM));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	79db      	ldrb	r3, [r3, #7]
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	4619      	mov	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ (SPI_RXONLY_MASK        << (SPI_CR1_RXONLY));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  (SPIconfig->ReceiveOnly << (SPI_CR1_RXONLY));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7a1b      	ldrb	r3, [r3, #8]
 80022da:	029b      	lsls	r3, r3, #10
 80022dc:	4619      	mov	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 &=~ (SPI_DFF_MASK         << (SPI_CR1_DFF));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230c:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 |=  (SPIconfig->DataFrame << (SPI_CR1_DFF));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7a5b      	ldrb	r3, [r3, #9]
 8002320:	02db      	lsls	r3, r3, #11
 8002322:	4619      	mov	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800232c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
/****************************************************************************************************/

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 &=~ (SPI_RXDMAEN_MASK << (SPI_CR2_RXDMAEN));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800234a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 |=  (SPIconfig->RXDMA << (SPI_CR2_RXDMAEN));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b03      	ldr	r3, [pc, #12]	; (8002368 <MSPI_u8SetConfiguration+0x2bc>)
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e002      	b.n	800236c <MSPI_u8SetConfiguration+0x2c0>
 8002366:	bf00      	nop
 8002368:	20000034 	.word	0x20000034
 800236c:	7a9b      	ldrb	r3, [r3, #10]
 800236e:	4619      	mov	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	4b55      	ldr	r3, [pc, #340]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002378:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
	
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 &=~ (SPI_TXDMAEN_MASK << (SPI_CR2_TXDMAEN));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b51      	ldr	r3, [pc, #324]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800239a:	f022 0202 	bic.w	r2, r2, #2
 800239e:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 |=  (SPIconfig->TXDMA << (SPI_CR2_TXDMAEN));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7adb      	ldrb	r3, [r3, #11]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4619      	mov	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80023be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
	
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 &=~ (SPI_SSOE_MASK       << (SPI_CR2_SSOE));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80023ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80023dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 |=  (SPIconfig->SSoutput << (SPI_CR2_SSOE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4619      	mov	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 &=~ (SPI_RXNEIE_MASK        << (SPI_CR2_RXNEIE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242a:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 |=  (SPIconfig->RXinterrupt << (SPI_CR2_RXNEIE));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7b5b      	ldrb	r3, [r3, #13]
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	4619      	mov	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 800244a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 &=~ (SPI_TXEIE_MASK         << (SPI_CR2_TXEIE));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800246c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002470:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> SPI_CR2 |=  (SPIconfig->TXinterrupt << (SPI_CR2_TXEIE));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7b9b      	ldrb	r3, [r3, #14]
 8002484:	01db      	lsls	r3, r3, #7
 8002486:	4619      	mov	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 8002490:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]

		SET_BIT( SPI_Index[SPIconfig->SPIindex] -> SPI_CR1 , SPI_CR1_SPE );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <MSPI_u8SetConfiguration+0x420>)
 80024ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e001      	b.n	80024be <MSPI_u8SetConfiguration+0x412>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80024be:	7bfb      	ldrb	r3, [r7, #15]

}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20000034 	.word	0x20000034

080024d0 <MSPI_u8SendReceiveSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SendReceiveSynch ( SPIindex_t Copy_SPIindex , uint8_t Copy_u8DataToTransmit , uint8_t *Copy_u8DataToReceive )
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	603a      	str	r2, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	460b      	mov	r3, r1
 80024de:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
	if (   Copy_u8DataToReceive != NULL )
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d02e      	beq.n	8002548 <MSPI_u8SendReceiveSynch+0x78>
	{
		while ( 0==GET_BIT(SPI_Index[Copy_SPIindex]  ->  SPI_SR , 1 ) );
 80024ea:	bf00      	nop
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	4a1b      	ldr	r2, [pc, #108]	; (800255c <MSPI_u8SendReceiveSynch+0x8c>)
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f5      	beq.n	80024ec <MSPI_u8SendReceiveSynch+0x1c>
		SPI_Index[Copy_SPIindex]  -> SPI_DR = Copy_u8DataToTransmit ;
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <MSPI_u8SendReceiveSynch+0x8c>)
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	79ba      	ldrb	r2, [r7, #6]
 800250a:	60da      	str	r2, [r3, #12]
		while ( 1 == GET_BIT( SPI_Index[Copy_SPIindex] -> SPI_SR , 7 ) );
 800250c:	bf00      	nop
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <MSPI_u8SendReceiveSynch+0x8c>)
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	09db      	lsrs	r3, r3, #7
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d0f5      	beq.n	800250e <MSPI_u8SendReceiveSynch+0x3e>
		while ( 0==GET_BIT(SPI_Index[Copy_SPIindex]  ->  SPI_SR , 0 ) );
 8002522:	bf00      	nop
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <MSPI_u8SendReceiveSynch+0x8c>)
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f6      	beq.n	8002524 <MSPI_u8SendReceiveSynch+0x54>
		*Copy_u8DataToReceive = SPI_Index[Copy_SPIindex]  -> SPI_DR  ;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <MSPI_u8SendReceiveSynch+0x8c>)
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e001      	b.n	800254c <MSPI_u8SendReceiveSynch+0x7c>
	}
	else 
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000034 	.word	0x20000034

08002560 <MSPI_u8TransmitArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t   MSPI_u8TransmitArraySynch  ( SPIindex_t Copy_SPIindex , uint8_t * Copy_pu8DataArray )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK , Local_u8RxTemp  ;
 800256c:	2301      	movs	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
	volatile uint8_t Local_u8tmp ;
	if ( Copy_pu8DataArray != NULL )
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02a      	beq.n	80025cc <MSPI_u8TransmitArraySynch+0x6c>
	{
       for (uint8_t Local_u8Counter = 0 ; Copy_pu8DataArray[Local_u8Counter] != '\0' ; Local_u8Counter++ )
 8002576:	2300      	movs	r3, #0
 8002578:	75bb      	strb	r3, [r7, #22]
 800257a:	e019      	b.n	80025b0 <MSPI_u8TransmitArraySynch+0x50>
	   {
    	   MSPI_u8SendReceiveSynch( Copy_SPIindex , Copy_pu8DataArray[Local_u8Counter] , &Local_u8RxTemp );
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	7819      	ldrb	r1, [r3, #0]
 8002584:	f107 020f 	add.w	r2, r7, #15
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffa0 	bl	80024d0 <MSPI_u8SendReceiveSynch>
		   for (uint32_t i =0 ; i<=1000;i++)
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e005      	b.n	80025a2 <MSPI_u8TransmitArraySynch+0x42>
		   {
				 Local_u8tmp=i;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	73bb      	strb	r3, [r7, #14]
		   for (uint32_t i =0 ; i<=1000;i++)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a8:	d9f5      	bls.n	8002596 <MSPI_u8TransmitArraySynch+0x36>
       for (uint8_t Local_u8Counter = 0 ; Copy_pu8DataArray[Local_u8Counter] != '\0' ; Local_u8Counter++ )
 80025aa:	7dbb      	ldrb	r3, [r7, #22]
 80025ac:	3301      	adds	r3, #1
 80025ae:	75bb      	strb	r3, [r7, #22]
 80025b0:	7dbb      	ldrb	r3, [r7, #22]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1df      	bne.n	800257c <MSPI_u8TransmitArraySynch+0x1c>
		   }
	   }
       MSPI_u8SendReceiveSynch( Copy_SPIindex , '\0' , &Local_u8RxTemp );
 80025bc:	f107 020f 	add.w	r2, r7, #15
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff83 	bl	80024d0 <MSPI_u8SendReceiveSynch>
 80025ca:	e001      	b.n	80025d0 <MSPI_u8TransmitArraySynch+0x70>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <SPI1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations *************************************************/
/*************************************************************************************************************************************/
void SPI1_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_1] != NULL )
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SPI1_IRQHandler+0x20>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <SPI1_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_1]( SPI_Index[SPI_1] -> SPI_DR );
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SPI1_IRQHandler+0x20>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <SPI1_IRQHandler+0x24>)
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	4610      	mov	r0, r2
 80025f6:	4798      	blx	r3
	}
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000144 	.word	0x20000144
 8002600:	20000034 	.word	0x20000034

08002604 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_2] != NULL )
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SPI2_IRQHandler+0x20>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <SPI2_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_2]( SPI_Index[SPI_2] -> SPI_DR );
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SPI2_IRQHandler+0x20>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <SPI2_IRQHandler+0x24>)
 8002616:	6852      	ldr	r2, [r2, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3
	}
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000144 	.word	0x20000144
 8002628:	20000034 	.word	0x20000034

0800262c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_3] != NULL )
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <SPI3_IRQHandler+0x20>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <SPI3_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_3]( SPI_Index[SPI_3] -> SPI_DR );
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <SPI3_IRQHandler+0x20>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <SPI3_IRQHandler+0x24>)
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4610      	mov	r0, r2
 8002646:	4798      	blx	r3
	}
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000144 	.word	0x20000144
 8002650:	20000034 	.word	0x20000034

08002654 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_4] != NULL )
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SPI4_IRQHandler+0x20>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <SPI4_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_4]( SPI_Index[SPI_4] -> SPI_DR );
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SPI4_IRQHandler+0x20>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <SPI4_IRQHandler+0x24>)
 8002666:	68d2      	ldr	r2, [r2, #12]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	4610      	mov	r0, r2
 800266e:	4798      	blx	r3
	}
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000144 	.word	0x20000144
 8002678:	20000034 	.word	0x20000034

0800267c <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MSTK_voidStopTimer+0x28>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <MSTK_voidStopTimer+0x28>)
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <MSTK_voidStopTimer+0x28>)
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <MSTK_voidStopTimer+0x28>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <SysTick_Handler+0x38>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <SysTick_Handler+0x32>
    {
         if ( SINGLE == STK_u8IntervalType )
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <SysTick_Handler+0x3c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <SysTick_Handler+0x38>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 80026c2:	f7ff ffdb 	bl	800267c <MSTK_voidStopTimer>
 80026c6:	e006      	b.n	80026d6 <SysTick_Handler+0x2e>
         }
         else if ( PERIODIC == STK_u8IntervalType )
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <SysTick_Handler+0x3c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <SysTick_Handler+0x2e>
         {
        	 SysTick_CallBack();
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <SysTick_Handler+0x38>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4798      	blx	r3
         }
         GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ) ;
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Handler+0x40>)
 80026d8:	681b      	ldr	r3, [r3, #0]

    }

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000154 	.word	0x20000154
 80026e4:	20000044 	.word	0x20000044
 80026e8:	e000e010 	.word	0xe000e010

080026ec <MUSART_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8SetConfiguration ( const USARTconfig_t* USARTconfig )
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b08a      	sub	sp, #40	; 0x28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
	if (  USARTconfig !=NULL )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 823c 	beq.w	8002b7a <MUSART_u8SetConfiguration+0x48e>
	{
		/*************************************************************************************************************************************/
		/********************************************** Clear Flags ********************************************************************/
		MUSART_voidClearFlags(USARTconfig->USARTindex) ;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fafe 	bl	8002d08 <MUSART_voidClearFlags>
		/********************************************** Configuration ******************************************************************/
		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RE_MASK << (USART_CR1_RE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4ba8      	ldr	r3, [pc, #672]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	4ba4      	ldr	r3, [pc, #656]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Receiver << (USART_CR1_RE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4ba0      	ldr	r3, [pc, #640]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4619      	mov	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	4b9a      	ldr	r3, [pc, #616]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800274a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800274e:	430a      	orrs	r2, r1
 8002750:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TE_MASK << (USART_CR1_TE));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	4b93      	ldr	r3, [pc, #588]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Transmitter << (USART_CR1_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	789b      	ldrb	r3, [r3, #2]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4619      	mov	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002790:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RXNEIE_MASK << (USART_CR1_RXNEIE));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b85      	ldr	r3, [pc, #532]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->RXNEinterrupt << (USART_CR1_RXNEIE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	78db      	ldrb	r3, [r3, #3]
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	4619      	mov	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	4b77      	ldr	r3, [pc, #476]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TCIE_MASK << (USART_CR1_TCIE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80027f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fc:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TransmetCompleteInterrupt << (USART_CR1_TCIE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	791b      	ldrb	r3, [r3, #4]
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	4619      	mov	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800281c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TXEIE_MASK << (USART_CR1_TXEIE));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800283a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800283e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TXEinterrupt << (USART_CR1_TXEIE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	795b      	ldrb	r3, [r3, #5]
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	4619      	mov	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002862:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002866:	430a      	orrs	r2, r1
 8002868:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PS_MASK << (USART_CR1_PS));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002880:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002888:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParitySelection << (USART_CR1_PS));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	799b      	ldrb	r3, [r3, #6]
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	4619      	mov	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PCE_MASK << (USART_CR1_PCE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParityControl << (USART_CR1_PCE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	79db      	ldrb	r3, [r3, #7]
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4619      	mov	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	60da      	str	r2, [r3, #12]


		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_M_MASK << (USART_CR1_M));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80028fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800290c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002914:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->WordLength << (USART_CR1_M));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7a1b      	ldrb	r3, [r3, #8]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	4619      	mov	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002934:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_OVER8_MASK << (USART_CR1_OVER8));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800295a:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->OverSampling << (USART_CR1_OVER8));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7a5b      	ldrb	r3, [r3, #9]
 800296e:	03db      	lsls	r3, r3, #15
 8002970:	4619      	mov	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800297a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800297e:	430a      	orrs	r2, r1
 8002980:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR2 &=~ (USART_STOP_MASK << (USART_CR2_STOP));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 800298a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 8002998:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800299c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029a0:	611a      	str	r2, [r3, #16]
		USART_Index[USARTconfig->USARTindex] -> CR2 |=  (USARTconfig->StopBit_t << (USART_CR2_STOP));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <MUSART_u8SetConfiguration+0x2c8>)
 80029aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	e002      	b.n	80029b8 <MUSART_u8SetConfiguration+0x2cc>
 80029b2:	bf00      	nop
 80029b4:	20000048 	.word	0x20000048
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7a9b      	ldrb	r3, [r3, #10]
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	4619      	mov	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	4b71      	ldr	r3, [pc, #452]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 80029c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	611a      	str	r2, [r3, #16]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_EIE_MASK << (USART_CR3_EIE));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 80029d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4b69      	ldr	r3, [pc, #420]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 80029e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->ErrorTnterrupt << (USART_CR3_EIE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7adb      	ldrb	r3, [r3, #11]
 8002a02:	4619      	mov	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4b60      	ldr	r3, [pc, #384]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAR_MASK << (USART_CR3_DMAR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b5c      	ldr	r3, [pc, #368]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4b58      	ldr	r3, [pc, #352]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAresevier << (USART_CR3_DMAR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7b1b      	ldrb	r3, [r3, #12]
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	4619      	mov	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAT_MASK << (USART_CR3_EIE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAtransmitter << (USART_CR3_DMAT));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7b5b      	ldrb	r3, [r3, #13]
 8002a8c:	01db      	lsls	r3, r3, #7
 8002a8e:	4619      	mov	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002a98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	615a      	str	r2, [r3, #20]
		/********************************************** Baud Rate ************************************************************************/
		uint8_t Local_u8OverSampling ;
		if (USARTconfig->OverSampling == BY_8 )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7a5b      	ldrb	r3, [r3, #9]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d103      	bne.n	8002ab0 <MUSART_u8SetConfiguration+0x3c4>
		{
			Local_u8OverSampling=8;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002aae:	e002      	b.n	8002ab6 <MUSART_u8SetConfiguration+0x3ca>
		}
		else
		{
			Local_u8OverSampling=16;
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE ) ;
 8002ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <MUSART_u8SetConfiguration+0x4a4>)
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	469a      	mov	sl, r3
 8002acc:	4693      	mov	fp, r2
 8002ace:	e9c7 ab06 	strd	sl, fp, [r7, #24]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE )  ) % 100 ) * (Local_u8OverSampling) ;
 8002ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <MUSART_u8SetConfiguration+0x4a8>)
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <MUSART_u8SetConfiguration+0x4ac>)
 8002ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2164      	movs	r1, #100	; 0x64
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	4698      	mov	r8, r3
 8002b00:	4691      	mov	r9, r2
 8002b02:	e9c7 8904 	strd	r8, r9, [r7, #16]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8002b06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b0a:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8002b0e:	428a      	cmp	r2, r1
 8002b10:	f173 0300 	sbcs.w	r3, r3, #0
 8002b14:	d30c      	bcc.n	8002b30 <MUSART_u8SetConfiguration+0x444>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8002b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b1a:	1c54      	adds	r4, r2, #1
 8002b1c:	f143 0500 	adc.w	r5, r3, #0
 8002b20:	e9c7 4506 	strd	r4, r5, [r7, #24]
			Local_u64Fraction  = USART_FRACTION ;
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}
		USART_Index[USARTconfig->USARTindex] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	011c      	lsls	r4, r3, #4
 8002b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b38:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	f7fd fb60 	bl	8000204 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002b50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b54:	4322      	orrs	r2, r4
 8002b56:	609a      	str	r2, [r3, #8]
		/********************************************** Enable ***************************************************************************/
		SET_BIT ( USART_Index[USARTconfig->USARTindex] -> CR1 , USART_CR1_UE );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <MUSART_u8SetConfiguration+0x4a0>)
 8002b6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	e001      	b.n	8002b7e <MUSART_u8SetConfiguration+0x492>
		/*************************************************************************************************************************************/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
	}
}
 8002b7e:	bf00      	nop
 8002b80:	4618      	mov	r0, r3
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000048 	.word	0x20000048
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	5f5e1000 	.word	0x5f5e1000
 8002b98:	51eb851f 	.word	0x51eb851f

08002b9c <MUSART_u8ReceiveCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01f      	beq.n	8002bf2 <MUSART_u8ReceiveCharSynch+0x56>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <MUSART_u8ReceiveCharSynch+0x68>)
 8002bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4911      	ldr	r1, [pc, #68]	; (8002c04 <MUSART_u8ReceiveCharSynch+0x68>)
 8002bc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bc4:	f022 0220 	bic.w	r2, r2, #32
 8002bc8:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8002bca:	bf00      	nop
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <MUSART_u8ReceiveCharSynch+0x68>)
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f5      	beq.n	8002bcc <MUSART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <MUSART_u8ReceiveCharSynch+0x68>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e001      	b.n	8002bf6 <MUSART_u8ReceiveCharSynch+0x5a>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000048 	.word	0x20000048

08002c08 <MUSART_u8ReceiveArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveArraySynch  (  USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray , uint8_t Copy_u8ArraySize )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <MUSART_u8ReceiveArraySynch+0x40>
	{
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8ArraySize ; Local_u8Counter++ )
 8002c22:	2300      	movs	r3, #0
 8002c24:	73bb      	strb	r3, [r7, #14]
 8002c26:	e00a      	b.n	8002c3e <MUSART_u8ReceiveArraySynch+0x36>
	   {
    	   MUSART_u8ReceiveCharSynch( Copy_USARTindex , & (Copy_pu8DataArray[Local_u8Counter]) );
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	441a      	add	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ffb2 	bl	8002b9c <MUSART_u8ReceiveCharSynch>
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8ArraySize ; Local_u8Counter++ )
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73bb      	strb	r3, [r7, #14]
 8002c3e:	7bba      	ldrb	r2, [r7, #14]
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3f0      	bcc.n	8002c28 <MUSART_u8ReceiveArraySynch+0x20>
 8002c46:	e001      	b.n	8002c4c <MUSART_u8ReceiveArraySynch+0x44>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <MUSART_u8TransmitCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8TransmitCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460a      	mov	r2, r1
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
	if ( 1 )
	{
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <MUSART_u8TransmitCharSynch+0x5c>)
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	79ba      	ldrb	r2, [r7, #6]
 8002c76:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8002c78:	bf00      	nop
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <MUSART_u8TransmitCharSynch+0x5c>)
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f5      	beq.n	8002c7a <MUSART_u8TransmitCharSynch+0x22>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <MUSART_u8TransmitCharSynch+0x5c>)
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	4906      	ldr	r1, [pc, #24]	; (8002cb4 <MUSART_u8TransmitCharSynch+0x5c>)
 8002c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20000048 	.word	0x20000048

08002cb8 <MUSART_u8TransmitArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t   MUSART_u8TransmitArraySynch  ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <MUSART_u8TransmitArraySynch+0x42>
	{
       for (uint8_t Local_u8Counter = 0 ; Copy_pu8DataArray[Local_u8Counter] != '\0' ; Local_u8Counter++ )
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73bb      	strb	r3, [r7, #14]
 8002cd2:	e00b      	b.n	8002cec <MUSART_u8TransmitArraySynch+0x34>
	   {
    	   MUSART_u8TransmitCharSynch( Copy_USARTindex , Copy_pu8DataArray[Local_u8Counter]  );
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ffb9 	bl	8002c58 <MUSART_u8TransmitCharSynch>
       for (uint8_t Local_u8Counter = 0 ; Copy_pu8DataArray[Local_u8Counter] != '\0' ; Local_u8Counter++ )
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73bb      	strb	r3, [r7, #14]
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ed      	bne.n	8002cd4 <MUSART_u8TransmitArraySynch+0x1c>
 8002cf8:	e001      	b.n	8002cfe <MUSART_u8TransmitArraySynch+0x46>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <MUSART_voidClearFlags+0x24>)
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000048 	.word	0x20000048

08002d30 <USART1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <USART1_IRQHandler+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <USART1_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_1);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7ff ffe3 	bl	8002d08 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_1]();
 8002d42:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <USART1_IRQHandler+0x1c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4798      	blx	r3
	}

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000158 	.word	0x20000158

08002d50 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <USART2_IRQHandler+0x1c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <USART2_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_2);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7ff ffd3 	bl	8002d08 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_2]();
 8002d62:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <USART2_IRQHandler+0x1c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4798      	blx	r3
	}

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000158 	.word	0x20000158

08002d70 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <USART3_IRQHandler+0x1c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <USART3_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_3);
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f7ff ffc3 	bl	8002d08 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_3]();
 8002d82:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <USART3_IRQHandler+0x1c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4798      	blx	r3
	}

}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000158 	.word	0x20000158

08002d90 <USR_u8ReceivePass>:
#include "USR_private.h"
#include "USR_interface.h"


USR_PassStatus USR_u8ReceivePass(USARTindex_t Copy_u8USART)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Counter = 0,
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
			Local_u8CorrectPass[USR_PASS_LENGTH] = USR_CORRECT_PASS,
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <USR_u8ReceivePass+0x68>)
 8002da0:	613b      	str	r3, [r7, #16]
			Local_u8EnteredPass[USR_PASS_LENGTH];

	USR_PassStatus Local_u8PassStatus = PASS_CORRECT;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75bb      	strb	r3, [r7, #22]

	/* Get password from user*/
	MUSART_u8ReceiveArraySynch(Copy_u8USART, Local_u8EnteredPass, USR_PASS_LENGTH);
 8002da6:	f107 010c 	add.w	r1, r7, #12
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2204      	movs	r2, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff2a 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	210d      	movs	r1, #13
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff4d 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	/* check password is correct or not*/
	for(Local_u8Counter = 0 ;Local_u8Counter < USR_PASS_LENGTH ;Local_u8Counter++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
 8002dc2:	e010      	b.n	8002de6 <USR_u8ReceivePass+0x56>
	{
		if(Local_u8CorrectPass[Local_u8Counter] != Local_u8EnteredPass[Local_u8Counter])
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	443b      	add	r3, r7
 8002dca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	443b      	add	r3, r7
 8002dd4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <USR_u8ReceivePass+0x50>
		{
			Local_u8PassStatus = PASS_NOT_CORRECT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75bb      	strb	r3, [r7, #22]
	for(Local_u8Counter = 0 ;Local_u8Counter < USR_PASS_LENGTH ;Local_u8Counter++)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	3301      	adds	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d9eb      	bls.n	8002dc4 <USR_u8ReceivePass+0x34>
		}
	}
	return Local_u8PassStatus;
 8002dec:	7dbb      	ldrb	r3, [r7, #22]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	34333231 	.word	0x34333231

08002dfc <USR_voidSendDashBoard>:
void USR_voidSendDashBoard(USARTindex_t Copy_u8USART)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	/* Display Dash-board Selection options*/
	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DashBoardChoose);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	491a      	ldr	r1, [pc, #104]	; (8002e74 <USR_voidSendDashBoard+0x78>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff54 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	210d      	movs	r1, #13
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff1f 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DashBoard1);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4916      	ldr	r1, [pc, #88]	; (8002e78 <USR_voidSendDashBoard+0x7c>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff4a 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	210d      	movs	r1, #13
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff15 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DashBoard2);
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4912      	ldr	r1, [pc, #72]	; (8002e7c <USR_voidSendDashBoard+0x80>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff40 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	210d      	movs	r1, #13
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff0b 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DashBoard3);
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <USR_voidSendDashBoard+0x84>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff36 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	210d      	movs	r1, #13
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff01 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DashBoard4);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	490a      	ldr	r1, [pc, #40]	; (8002e84 <USR_voidSendDashBoard+0x88>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff2c 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	210d      	movs	r1, #13
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fef7 	bl	8002c58 <MUSART_u8TransmitCharSynch>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	080036bc 	.word	0x080036bc
 8002e78:	080036d0 	.word	0x080036d0
 8002e7c:	080036ec 	.word	0x080036ec
 8002e80:	08003704 	.word	0x08003704
 8002e84:	08003718 	.word	0x08003718

08002e88 <USR_voidReceiveTimeDate>:

void USR_voidReceiveTimeDate(USARTindex_t Copy_u8USART ,USR_Alarm_T *Copy_TimeDateCnfg )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_u8RecVal[USR_DATE_LENGTH];

	/*Get Date*/
	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_AlarmDate);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4954      	ldr	r1, [pc, #336]	; (8002fe8 <USR_voidReceiveTimeDate+0x160>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff0d 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	210d      	movs	r1, #13
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fed8 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_DateTmp);
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4950      	ldr	r1, [pc, #320]	; (8002fec <USR_voidReceiveTimeDate+0x164>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff03 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	210d      	movs	r1, #13
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fece 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Local_u8RecVal[0], USR_DAY_LENGTH);
 8002ebc:	f107 010c 	add.w	r1, r7, #12
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fe9f 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_Slash);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	212f      	movs	r1, #47	; 0x2f
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fec2 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	Copy_TimeDateCnfg->Date[0] = (Local_u8RecVal[0]-'0')*10 + (Local_u8RecVal[1]-'0');
 8002ed4:	7b3b      	ldrb	r3, [r7, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	3b10      	subs	r3, #16
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	701a      	strb	r2, [r3, #0]

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Local_u8RecVal[0], USR_MONTH_LENGTH);
 8002eee:	f107 010c 	add.w	r1, r7, #12
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fe86 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_Slash);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	212f      	movs	r1, #47	; 0x2f
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fea9 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	Copy_TimeDateCnfg->Date[1] = (Local_u8RecVal[0]-'0')*10 + (Local_u8RecVal[1]-'0');
 8002f06:	7b3b      	ldrb	r3, [r7, #12]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	7b7b      	ldrb	r3, [r7, #13]
 8002f14:	4413      	add	r3, r2
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3b10      	subs	r3, #16
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	705a      	strb	r2, [r3, #1]

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Local_u8RecVal[0], USR_YEAR_LENGTH);
 8002f20:	f107 010c 	add.w	r1, r7, #12
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2204      	movs	r2, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fe6d 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	210d      	movs	r1, #13
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe90 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	Copy_TimeDateCnfg->Date[2] = (Local_u8RecVal[2]-'0')*10 + (Local_u8RecVal[3]-'0');
 8002f38:	7bbb      	ldrb	r3, [r7, #14]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	4413      	add	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3b10      	subs	r3, #16
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	709a      	strb	r2, [r3, #2]


	/* Get Time*/
	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_AlarmTime);
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4926      	ldr	r1, [pc, #152]	; (8002ff0 <USR_voidReceiveTimeDate+0x168>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff feae 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	210d      	movs	r1, #13
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe79 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_TimeTmp);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <USR_voidReceiveTimeDate+0x16c>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fea4 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	210d      	movs	r1, #13
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fe6f 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Local_u8RecVal[0], USR_HOUR_LENGTH);
 8002f7a:	f107 010c 	add.w	r1, r7, #12
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2202      	movs	r2, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fe40 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_DOT);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	213a      	movs	r1, #58	; 0x3a
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fe63 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Local_u8RecVal[2], USR_MIN_LENGTH);
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	1c99      	adds	r1, r3, #2
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fe33 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	210d      	movs	r1, #13
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe56 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	//	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_DOT);

	Copy_TimeDateCnfg->Time[0] = (Local_u8RecVal[0]-'0')*10 + (Local_u8RecVal[1]-'0');
 8002fac:	7b3b      	ldrb	r3, [r7, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	7b7b      	ldrb	r3, [r7, #13]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3b10      	subs	r3, #16
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	711a      	strb	r2, [r3, #4]
	Copy_TimeDateCnfg->Time[1] = (Local_u8RecVal[2]-'0')*10 + (Local_u8RecVal[3]-'0');
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3b10      	subs	r3, #16
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	715a      	strb	r2, [r3, #5]
//
	//	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Copy_TimeDateCnfg->Time[4], USR_SEC_LENGTH);
	//	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);


}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08003724 	.word	0x08003724
 8002fec:	08003738 	.word	0x08003738
 8002ff0:	08003744 	.word	0x08003744
 8002ff4:	08003758 	.word	0x08003758

08002ff8 <USR_u8DisplayAlarms>:
void USR_u8DisplayAlarms(USARTindex_t Copy_u8USART ,uint8_t Copy_u8AlarmIndex ,uint8_t *Copy_pu8AlarmName)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	603a      	str	r2, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	460b      	mov	r3, r1
 8003006:	71bb      	strb	r3, [r7, #6]
	/* Display ALarms' name */
	MUSART_u8TransmitCharSynch(Copy_u8USART,'\n');
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	210a      	movs	r1, #10
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fe23 	bl	8002c58 <MUSART_u8TransmitCharSynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,(Copy_u8AlarmIndex+'0'));
 8003012:	79bb      	ldrb	r3, [r7, #6]
 8003014:	3330      	adds	r3, #48	; 0x30
 8003016:	b2da      	uxtb	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe1b 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	if(*Copy_pu8AlarmName != '\0')
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <USR_u8DisplayAlarms+0x48>
	{
		MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)Copy_pu8AlarmName);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe42 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
		MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	210d      	movs	r1, #13
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe0d 	bl	8002c58 <MUSART_u8TransmitCharSynch>
	else
	{
		MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_AlarmNull);
		MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
	}
}
 800303e:	e009      	b.n	8003054 <USR_u8DisplayAlarms+0x5c>
		MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_AlarmNull);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4906      	ldr	r1, [pc, #24]	; (800305c <USR_u8DisplayAlarms+0x64>)
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe37 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
		MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	210d      	movs	r1, #13
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe02 	bl	8002c58 <MUSART_u8TransmitCharSynch>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	08003760 	.word	0x08003760

08003060 <USR_u8ReceiveAlarmSelect>:
USR_AlarmSelect USR_u8ReceiveAlarmSelect(USARTindex_t Copy_u8USART)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Choice;
	USR_AlarmSelect Local_u8AlrmSelct;

	/* Get alarm index */
	MUSART_u8ReceiveCharSynch(Copy_u8USART, &Local_u8Choice);
 800306a:	f107 020e 	add.w	r2, r7, #14
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fd92 	bl	8002b9c <MUSART_u8ReceiveCharSynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	210d      	movs	r1, #13
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fdeb 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	Local_u8AlrmSelct = Local_u8Choice-'0';
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	3b30      	subs	r3, #48	; 0x30
 8003086:	73fb      	strb	r3, [r7, #15]

	return Local_u8AlrmSelct;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <USR_voidReceiveAlarmCnfg>:
void USR_voidReceiveAlarmCnfg(USARTindex_t Copy_u8USART ,USR_Alarm_T *Copy_AlarmCnfg)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]

	/* Get date & Time from user*/
	USR_voidReceiveTimeDate(Copy_u8USART, Copy_AlarmCnfg);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	6839      	ldr	r1, [r7, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff feef 	bl	8002e88 <USR_voidReceiveTimeDate>

	/*Get ALarm Name*/
	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_AlarmName);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4911      	ldr	r1, [pc, #68]	; (80030f4 <USR_voidReceiveAlarmCnfg+0x60>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fe02 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	210d      	movs	r1, #13
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fdcd 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(Copy_u8USART,(uint8_t *)USR_Script_NameTmp);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	490d      	ldr	r1, [pc, #52]	; (80030f8 <USR_voidReceiveAlarmCnfg+0x64>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fdf8 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	210d      	movs	r1, #13
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fdc3 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8ReceiveArraySynch(Copy_u8USART, &Copy_AlarmCnfg->Name[0], USR_MAX_NAME_LENGTH);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	1d99      	adds	r1, r3, #6
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	220a      	movs	r2, #10
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fd94 	bl	8002c08 <MUSART_u8ReceiveArraySynch>
	MUSART_u8TransmitCharSynch(Copy_u8USART,USR_Script_NewLine);
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	210d      	movs	r1, #13
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fdb7 	bl	8002c58 <MUSART_u8TransmitCharSynch>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	0800376c 	.word	0x0800376c
 80030f8:	08003784 	.word	0x08003784

080030fc <main>:
#include "USR_sctipts.h"
#include "APP3_interface.h"
#include "APP_2_interface.h"
extern uint8_t Globla_Alrams_Flags_state;
int main(void)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b0bd      	sub	sp, #244	; 0xf4
 8003100:	af00      	add	r7, sp, #0
	/*************************	Clock Settings	*****************************/
	RCC_u8SetClksts(CLK_HSI, STATE_ON);
 8003102:	2101      	movs	r1, #1
 8003104:	2000      	movs	r0, #0
 8003106:	f7fe febf 	bl	8001e88 <RCC_u8SetClksts>
	RCC_SetSysClk(HSI);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fe ff0a 	bl	8001f24 <RCC_SetSysClk>

	RCC_voidAPB1EnablePerapheralClock(APB1_USART2);
 8003110:	2011      	movs	r0, #17
 8003112:	f7fe ff55 	bl	8001fc0 <RCC_voidAPB1EnablePerapheralClock>
	RCC_voidAHB1EnablePerapheralClock(AHB1_GPIOA);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fe ff26 	bl	8001f68 <RCC_voidAHB1EnablePerapheralClock>

	RCC_voidAPB2EnablePerapheralClock(APB2_SPI11);
 800311c:	200c      	movs	r0, #12
 800311e:	f7fe ff39 	bl	8001f94 <RCC_voidAPB2EnablePerapheralClock>
	RCC_voidAHB1EnablePerapheralClock(AHB1_GPIOB);
 8003122:	2001      	movs	r0, #1
 8003124:	f7fe ff20 	bl	8001f68 <RCC_voidAHB1EnablePerapheralClock>
	RCC_voidAPB1EnablePerapheralClock(APB1_I2C1);
 8003128:	2015      	movs	r0, #21
 800312a:	f7fe ff49 	bl	8001fc0 <RCC_voidAPB1EnablePerapheralClock>
	/********************************************************************************************************************************************/
	/**************************************************** RTC initialization ********************************************************************/
	/********************************************************************************************************************************************/
	GPIO_PinConfig_T sda ={RTC_I2C_PORT , RTC_I2C_SDA_PIN , ALTER_FUNC , SPEED_FAST , OPEN_DRAIN , RTC_I2C_PULL , AF4};
 800312e:	4ac9      	ldr	r2, [pc, #804]	; (8003454 <main+0x358>)
 8003130:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003138:	6018      	str	r0, [r3, #0]
 800313a:	3304      	adds	r3, #4
 800313c:	8019      	strh	r1, [r3, #0]
 800313e:	3302      	adds	r3, #2
 8003140:	0c0a      	lsrs	r2, r1, #16
 8003142:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&sda);
 8003144:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe f9d7 	bl	80014fc <GPIO_u8PinInit>
	GPIO_PinConfig_T scl ={RTC_I2C_PORT , RTC_I2C_SCL_PIN , ALTER_FUNC , SPEED_FAST , OPEN_DRAIN , RTC_I2C_PULL , AF4};
 800314e:	4ac2      	ldr	r2, [pc, #776]	; (8003458 <main+0x35c>)
 8003150:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003158:	6018      	str	r0, [r3, #0]
 800315a:	3304      	adds	r3, #4
 800315c:	8019      	strh	r1, [r3, #0]
 800315e:	3302      	adds	r3, #2
 8003160:	0c0a      	lsrs	r2, r1, #16
 8003162:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&scl);
 8003164:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe f9c7 	bl	80014fc <GPIO_u8PinInit>

	GPIO_u8SetPinValue(sda.Port, sda.PinNum, PIN_HIGH);
 800316e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8003172:	f897 10d9 	ldrb.w	r1, [r7, #217]	; 0xd9
 8003176:	2201      	movs	r2, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fb07 	bl	800178c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(scl.Port, scl.PinNum, PIN_HIGH);
 800317e:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003182:	f897 10d1 	ldrb.w	r1, [r7, #209]	; 0xd1
 8003186:	2201      	movs	r2, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe faff 	bl	800178c <GPIO_u8SetPinValue>

	/*********************************************************************************************/

	RCC_voidAPB1EnablePerapheralClock(APB1_I2C1);
 800318e:	2015      	movs	r0, #21
 8003190:	f7fe ff16 	bl	8001fc0 <RCC_voidAPB1EnablePerapheralClock>


	I2Cconfig_t I2cCinfig ={RTC_I2C,SM,SCL_SM_100K,STRETCHING_ENABLE,I2C_MODE,ACK_ENABLE,ENGC_ENABLE};
 8003194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003198:	222c      	movs	r2, #44	; 0x2c
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fa61 	bl	8003664 <memset>
 80031a2:	4bae      	ldr	r3, [pc, #696]	; (800345c <main+0x360>)
 80031a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	DMA_Cnfg_T I2C_DMA_Rx =
 80031b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 80031ce:	2302      	movs	r3, #2
 80031d0:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80031d4:	2304      	movs	r3, #4
 80031d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80031da:	4ba1      	ldr	r3, [pc, #644]	; (8003460 <main+0x364>)
 80031dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			.SrcDestMode = PERIPH_TO_MEM,
			.StreamNum = STREAM0,
			.TransferMode = DIRECT_MODE
	};

	DMA_Cnfg_T I2C_DMA_Tx =
 80031e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80031fa:	2307      	movs	r3, #7
 80031fc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8003200:	2301      	movs	r3, #1
 8003202:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8003206:	2303      	movs	r3, #3
 8003208:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800320c:	2304      	movs	r3, #4
 800320e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003212:	4b94      	ldr	r3, [pc, #592]	; (8003464 <main+0x368>)
 8003214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			.StreamNum = STREAM7,
			.TransferMode = DIRECT_MODE
	};


	I2cCinfig.DMA_Rx = I2C_DMA_Rx;
 8003218:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800321c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	I2cCinfig.DMA_Tx = I2C_DMA_Tx;
 8003226:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800322a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800322e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DMA_u8Init(&I2C_DMA_Tx);
 8003234:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fb81 	bl	8000940 <DMA_u8Init>
	DMA_u8Init(&I2C_DMA_Rx);
 800323e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fb7c 	bl	8000940 <DMA_u8Init>

	MI2C_u8SetConfiguration(&I2cCinfig);
 8003248:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fadf 	bl	8001810 <MI2C_u8SetConfiguration>

	MNVIC_u8EnableInterrupt(NVIC_DMA1_Stream0);
 8003252:	200b      	movs	r0, #11
 8003254:	f7fe fdf2 	bl	8001e3c <MNVIC_u8EnableInterrupt>
	MNVIC_u8EnableInterrupt(NVIC_DMA1_Stream7);
 8003258:	202f      	movs	r0, #47	; 0x2f
 800325a:	f7fe fdef 	bl	8001e3c <MNVIC_u8EnableInterrupt>
	HRTC_u8Init(&I2cCinfig);
 800325e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fec2 	bl	8001fec <HRTC_u8Init>
	/********************************************************************************************************************************************/
	/**************************************************** APP3 initialization *******************************************************************/
	/********************************************************************************************************************************************/
	APP3_voidinit();
 8003268:	f7fd f94e 	bl	8000508 <APP3_voidinit>
	/********************************************************************************************************************************************/
	/********************************************************************************************************************************************/

	/********************	Local variables initialization	********************/
	volatile uint8_t Local_u8Pulstemp ;
	uint8_t Local_u8GreenLedFlag=0;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	uint8_t Local_u8PassFlag,
	Local_u8Trials = 0,
 8003272:	2300      	movs	r3, #0
 8003274:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	Local_u8Counter;


	USR_Alarm_T Local_NewDateTime=
 8003278:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <main+0x36c>)
 800327a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800327e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.Date = "\0",
			.Name = "NewDate",
			.Time = "\0"
	};

	USR_Alarm_T Local_Alarms[USR_MAX_ALRMS]= {"\0"};
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	2250      	movs	r2, #80	; 0x50
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f9e9 	bl	8003664 <memset>
	USR_Choice Local_u8Choice;
	USR_AlarmSelect Local_u8AlrmSelect;


	/*********************	GPIO Pins configurations ***********************/
	GPIO_PinConfig_T USARTPinRX =
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f8c3 2003 	str.w	r2, [r3, #3]
 800329e:	2302      	movs	r3, #2
 80032a0:	767b      	strb	r3, [r7, #25]
 80032a2:	2302      	movs	r3, #2
 80032a4:	76bb      	strb	r3, [r7, #26]
 80032a6:	2307      	movs	r3, #7
 80032a8:	77bb      	strb	r3, [r7, #30]
			.Port = PORTA,
			.PullType = PUSH_PULL,
			.Speed = SPEED_LOW
	};

	GPIO_PinConfig_T USARTPinTX =
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f8c3 2003 	str.w	r2, [r3, #3]
 80032b6:	2303      	movs	r3, #3
 80032b8:	747b      	strb	r3, [r7, #17]
 80032ba:	2302      	movs	r3, #2
 80032bc:	74bb      	strb	r3, [r7, #18]
 80032be:	2307      	movs	r3, #7
 80032c0:	75bb      	strb	r3, [r7, #22]
			.Speed = SPEED_LOW
	};


	/*********************	USART configuration	*************************/
	USARTconfig_t USR_USART_Cnfg =
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <main+0x370>)
 80032c4:	463c      	mov	r4, r7
 80032c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c8:	c407      	stmia	r4!, {r0, r1, r2}
 80032ca:	8023      	strh	r3, [r4, #0]
			.ParitySelection = PARITY_SELECTION_EVEN
	};


	/***********************	MCAL Initialization ***********************/
	MUSART_u8SetConfiguration(&USR_USART_Cnfg);
 80032cc:	463b      	mov	r3, r7
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fa0c 	bl	80026ec <MUSART_u8SetConfiguration>
	GPIO_u8PinInit(&USARTPinRX);
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe f90f 	bl	80014fc <GPIO_u8PinInit>
	GPIO_u8PinInit(&USARTPinTX);
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe f90a 	bl	80014fc <GPIO_u8PinInit>


	/*******************	User Interface Program	***********************/

	/* Welcome */
	MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_Welcome);
 80032e8:	783b      	ldrb	r3, [r7, #0]
 80032ea:	4961      	ldr	r1, [pc, #388]	; (8003470 <main+0x374>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fce3 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 80032f2:	783b      	ldrb	r3, [r7, #0]
 80032f4:	210d      	movs	r1, #13
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fcae 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_EnterPass);
 80032fc:	783b      	ldrb	r3, [r7, #0]
 80032fe:	495d      	ldr	r1, [pc, #372]	; (8003474 <main+0x378>)
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fcd9 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 8003306:	783b      	ldrb	r3, [r7, #0]
 8003308:	210d      	movs	r1, #13
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fca4 	bl	8002c58 <MUSART_u8TransmitCharSynch>

	do
	{

		if(Local_u8Trials != 0)
 8003310:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <main+0x230>
		{
			/* Wrong Password*/
			MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_WrongPass);
 8003318:	783b      	ldrb	r3, [r7, #0]
 800331a:	4957      	ldr	r1, [pc, #348]	; (8003478 <main+0x37c>)
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fccb 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
			MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 8003322:	783b      	ldrb	r3, [r7, #0]
 8003324:	210d      	movs	r1, #13
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fc96 	bl	8002c58 <MUSART_u8TransmitCharSynch>
		}
		/* Check password*/
		Local_u8PassFlag = USR_u8ReceivePass(USR_USART_Cnfg.USARTindex);
 800332c:	783b      	ldrb	r3, [r7, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fd2e 	bl	8002d90 <USR_u8ReceivePass>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
		Local_u8Trials++;
 800333a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800333e:	3301      	adds	r3, #1
 8003340:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	}
	while((Local_u8PassFlag == PASS_NOT_CORRECT) && (Local_u8Trials < USR_MAX_TRIALS));
 8003344:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <main+0x258>
 800334c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003350:	2b02      	cmp	r3, #2
 8003352:	d9dd      	bls.n	8003310 <main+0x214>


	if(Local_u8PassFlag == PASS_NOT_CORRECT)
 8003354:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <main+0x27a>
	{
		/***************************************************************************************/
		/*************************** Turn On Red Led *******************************************/
		/***************************************************************************************/
		APP3_voidTurnOnRedLed();
 800335c:	f7fd f966 	bl	800062c <APP3_voidTurnOnRedLed>
		/***************************************************************************************/
		/***************************************************************************************/
		/***************************************************************************************/
		/*Login Failed*/
		MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_TrailFailed);
 8003360:	783b      	ldrb	r3, [r7, #0]
 8003362:	4946      	ldr	r1, [pc, #280]	; (800347c <main+0x380>)
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fca7 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
		MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 800336a:	783b      	ldrb	r3, [r7, #0]
 800336c:	210d      	movs	r1, #13
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fc72 	bl	8002c58 <MUSART_u8TransmitCharSynch>
 8003374:	e11d      	b.n	80035b2 <main+0x4b6>
	else
	{
		/***************************************************************************************/
		/*************************** Turn On Green Led *****************************************/
		/***************************************************************************************/
		APP3_voidTurnOnGreenLed();
 8003376:	f7fd f943 	bl	8000600 <APP3_voidTurnOnGreenLed>
		do
		{


			if (Globla_Alrams_Flags_state==0)
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <main+0x384>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d148      	bne.n	8003414 <main+0x318>
			{
				/********************************************************
				 * alarm EXTI and notification
				 */
				if (((Globla_Alrams_Flags_state>>APP2_ALARM_1)&1)==1)
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <main+0x384>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <main+0x2a0>
				{
					/*send the name of alarm 1 */

					/*clear bit*/
					Globla_Alrams_Flags_state &=~(1<<APP2_ALARM_1);
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <main+0x384>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <main+0x384>)
 800339a:	701a      	strb	r2, [r3, #0]
				}
				if (((Globla_Alrams_Flags_state>>APP2_ALARM_2)&1)==1)
 800339c:	4b38      	ldr	r3, [pc, #224]	; (8003480 <main+0x384>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <main+0x2be>
				{
					/*send the name of alarm 2 */

					/*clear bit*/
					Globla_Alrams_Flags_state &=~(1<<APP2_ALARM_2);
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <main+0x384>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <main+0x384>)
 80033b8:	701a      	strb	r2, [r3, #0]
				}
				if (((Globla_Alrams_Flags_state>>APP2_ALARM_3)&1)==1)
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <main+0x384>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <main+0x2dc>
				{
					/*send the name of alarm 3 */

					/*clear bit*/
					Globla_Alrams_Flags_state &=~(1<<APP2_ALARM_3);
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <main+0x384>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <main+0x384>)
 80033d6:	701a      	strb	r2, [r3, #0]
				}
				if (((Globla_Alrams_Flags_state>>APP2_ALARM_4)&1)==1)
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <main+0x384>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <main+0x2fa>
				{
					/*send the name of alarm 4 */

					/*clear bit*/
					Globla_Alrams_Flags_state &=~(1<<APP2_ALARM_4);
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <main+0x384>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f023 0308 	bic.w	r3, r3, #8
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <main+0x384>)
 80033f4:	701a      	strb	r2, [r3, #0]
				}
				if (((Globla_Alrams_Flags_state>>APP2_ALARM_5)&1)==1)
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <main+0x384>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <main+0x318>
				{
					/*send the name of alarm 5 */

					/*clear bit*/
					Globla_Alrams_Flags_state &=~(1<<APP2_ALARM_5);
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <main+0x384>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <main+0x384>)
 8003412:	701a      	strb	r2, [r3, #0]
			}
			/***************************************************************************************/
			/***************************************************************************************/
			/***************************************************************************************/
			/* Display dash-board*/
			USR_voidSendDashBoard(USR_USART_Cnfg.USARTindex);
 8003414:	783b      	ldrb	r3, [r7, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fcf0 	bl	8002dfc <USR_voidSendDashBoard>
			MUSART_u8ReceiveCharSynch(USR_USART_Cnfg.USARTindex, &Local_u8Choice);
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	f107 021f 	add.w	r2, r7, #31
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fbb9 	bl	8002b9c <MUSART_u8ReceiveCharSynch>
			MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 800342a:	783b      	ldrb	r3, [r7, #0]
 800342c:	210d      	movs	r1, #13
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fc12 	bl	8002c58 <MUSART_u8TransmitCharSynch>

			switch(Local_u8Choice)
 8003434:	7ffb      	ldrb	r3, [r7, #31]
 8003436:	3b31      	subs	r3, #49	; 0x31
 8003438:	2b03      	cmp	r3, #3
 800343a:	f200 80ab 	bhi.w	8003594 <main+0x498>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <main+0x348>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003485 	.word	0x08003485
 8003448:	080034b7 	.word	0x080034b7
 800344c:	080034db 	.word	0x080034db
 8003450:	0800357f 	.word	0x0800357f
 8003454:	080038c4 	.word	0x080038c4
 8003458:	080038cc 	.word	0x080038cc
 800345c:	000186a0 	.word	0x000186a0
 8003460:	08001e25 	.word	0x08001e25
 8003464:	08001df1 	.word	0x08001df1
 8003468:	080038d4 	.word	0x080038d4
 800346c:	080038e4 	.word	0x080038e4
 8003470:	08003790 	.word	0x08003790
 8003474:	080037b4 	.word	0x080037b4
 8003478:	080037c4 	.word	0x080037c4
 800347c:	080037e8 	.word	0x080037e8
 8003480:	2000009c 	.word	0x2000009c
				 *
				 * */
				/***************************************************************************************/
				/*************************** Display On LCD ********************************************/
				/***************************************************************************************/
				APP3_voidDisplayTime();
 8003484:	f7fd f908 	bl	8000698 <APP3_voidDisplayTime>
				for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=10000;Local_u8Counter++)
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800348e:	e009      	b.n	80034a4 <main+0x3a8>
				{
					Local_u8Pulstemp=Local_u8Counter;
 8003490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=10000;Local_u8Counter++)
 800349a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d9ef      	bls.n	8003490 <main+0x394>
				}
				APP3_voidDisplayDate();
 80034b0:	f7fd f922 	bl	80006f8 <APP3_voidDisplayDate>
				/***************************************************************************************/
				/***************************************************************************************/
				/***************************************************************************************/
				break;
 80034b4:	e079      	b.n	80035aa <main+0x4ae>

			case CHOICE_SET_TIME :

				USR_voidReceiveTimeDate(USR_USART_Cnfg.USARTindex ,&Local_NewDateTime);
 80034b6:	783b      	ldrb	r3, [r7, #0]
 80034b8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fce2 	bl	8002e88 <USR_voidReceiveTimeDate>
				 *
				 *
				 * */

				/* Date and time is update d*/
				MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_DateUpd);
 80034c4:	783b      	ldrb	r3, [r7, #0]
 80034c6:	493b      	ldr	r1, [pc, #236]	; (80035b4 <main+0x4b8>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fbf5 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
				MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 80034ce:	783b      	ldrb	r3, [r7, #0]
 80034d0:	210d      	movs	r1, #13
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fbc0 	bl	8002c58 <MUSART_u8TransmitCharSynch>
				break;
 80034d8:	e067      	b.n	80035aa <main+0x4ae>

			case CHOICE_SET_ALRM :
				/***************************************************************************************/
				/*************************** For Testing ***********************************************/
				/***************************************************************************************/
				APP3_voidSendAlarmName((uint8_t*)"Alarm Test");
 80034da:	4837      	ldr	r0, [pc, #220]	; (80035b8 <main+0x4bc>)
 80034dc:	f7fd f93c 	bl	8000758 <APP3_voidSendAlarmName>
				for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=10000;Local_u8Counter++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e6:	e009      	b.n	80034fc <main+0x400>
				{
					Local_u8Pulstemp=Local_u8Counter;
 80034e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				for (uint32_t Local_u8Counter =0 ; Local_u8Counter<=10000;Local_u8Counter++)
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	3301      	adds	r3, #1
 80034f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003500:	f242 7210 	movw	r2, #10000	; 0x2710
 8003504:	4293      	cmp	r3, r2
 8003506:	d9ef      	bls.n	80034e8 <main+0x3ec>
				}
				APP3_voidAlarmCompareMatch();
 8003508:	f7fd f8a6 	bl	8000658 <APP3_voidAlarmCompareMatch>
				/***************************************************************************************/
				/***************************************************************************************/
				/***************************************************************************************/

				for(Local_u8Counter = 0 ;Local_u8Counter < USR_MAX_ALRMS ;Local_u8Counter++)
 800350c:	2300      	movs	r3, #0
 800350e:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8003512:	e013      	b.n	800353c <main+0x440>
				{
					/* Display Alarms board */
					USR_u8DisplayAlarms(USR_USART_Cnfg.USARTindex,(Local_u8Counter+1) ,(uint8_t *)(&(Local_Alarms[Local_u8Counter].Name)));
 8003514:	7838      	ldrb	r0, [r7, #0]
 8003516:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800351a:	3301      	adds	r3, #1
 800351c:	b2d9      	uxtb	r1, r3
 800351e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8003522:	f107 0220 	add.w	r2, r7, #32
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	3306      	adds	r3, #6
 800352c:	461a      	mov	r2, r3
 800352e:	f7ff fd63 	bl	8002ff8 <USR_u8DisplayAlarms>
				for(Local_u8Counter = 0 ;Local_u8Counter < USR_MAX_ALRMS ;Local_u8Counter++)
 8003532:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8003536:	3301      	adds	r3, #1
 8003538:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 800353c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8003540:	2b04      	cmp	r3, #4
 8003542:	d9e7      	bls.n	8003514 <main+0x418>
				}

				/*Select alarm */
				Local_u8AlrmSelect = USR_u8ReceiveAlarmSelect(USR_USART_Cnfg.USARTindex);
 8003544:	783b      	ldrb	r3, [r7, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fd8a 	bl	8003060 <USR_u8ReceiveAlarmSelect>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

				/* Set alarm configuration*/
				USR_voidReceiveAlarmCnfg(USR_USART_Cnfg.USARTindex ,(&Local_Alarms[Local_u8AlrmSelect-1]));
 8003552:	7838      	ldrb	r0, [r7, #0]
 8003554:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8003558:	3b01      	subs	r3, #1
 800355a:	f107 0220 	add.w	r2, r7, #32
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7ff fd96 	bl	8003094 <USR_voidReceiveAlarmCnfg>
				 *
				 *
				 * */

				/* New alarm is set */
				MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_AlarmSet);
 8003568:	783b      	ldrb	r3, [r7, #0]
 800356a:	4914      	ldr	r1, [pc, #80]	; (80035bc <main+0x4c0>)
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fba3 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
				MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 8003572:	783b      	ldrb	r3, [r7, #0]
 8003574:	210d      	movs	r1, #13
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fb6e 	bl	8002c58 <MUSART_u8TransmitCharSynch>

				break;
 800357c:	e015      	b.n	80035aa <main+0x4ae>

			case CHOICE_EXIT :

				/* Exit the system */
				MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_Exit);
 800357e:	783b      	ldrb	r3, [r7, #0]
 8003580:	490f      	ldr	r1, [pc, #60]	; (80035c0 <main+0x4c4>)
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb98 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
				MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 8003588:	783b      	ldrb	r3, [r7, #0]
 800358a:	210d      	movs	r1, #13
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fb63 	bl	8002c58 <MUSART_u8TransmitCharSynch>
				break;
 8003592:	e00a      	b.n	80035aa <main+0x4ae>

			default :
				/* Invalid Choice */
				MUSART_u8TransmitArraySynch(USR_USART_Cnfg.USARTindex,(uint8_t *)USR_Script_Invalid);
 8003594:	783b      	ldrb	r3, [r7, #0]
 8003596:	490b      	ldr	r1, [pc, #44]	; (80035c4 <main+0x4c8>)
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fb8d 	bl	8002cb8 <MUSART_u8TransmitArraySynch>
				MUSART_u8TransmitCharSynch(USR_USART_Cnfg.USARTindex,USR_Script_NewLine);
 800359e:	783b      	ldrb	r3, [r7, #0]
 80035a0:	210d      	movs	r1, #13
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fb58 	bl	8002c58 <MUSART_u8TransmitCharSynch>

				break;
 80035a8:	bf00      	nop
			}
		}
		while(Local_u8Choice != CHOICE_EXIT);
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b34      	cmp	r3, #52	; 0x34
 80035ae:	f47f aee4 	bne.w	800337a <main+0x27e>
	}

	while(1)
 80035b2:	e7fe      	b.n	80035b2 <main+0x4b6>
 80035b4:	08003810 	.word	0x08003810
 80035b8:	0800383c 	.word	0x0800383c
 80035bc:	08003848 	.word	0x08003848
 80035c0:	08003868 	.word	0x08003868
 80035c4:	08003890 	.word	0x08003890

080035c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d0:	480c      	ldr	r0, [pc, #48]	; (8003604 <LoopForever+0x6>)
  ldr r1, =_edata
 80035d2:	490d      	ldr	r1, [pc, #52]	; (8003608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <LoopForever+0xe>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d8:	e002      	b.n	80035e0 <LoopCopyDataInit>

080035da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035de:	3304      	adds	r3, #4

080035e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e4:	d3f9      	bcc.n	80035da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e8:	4c0a      	ldr	r4, [pc, #40]	; (8003614 <LoopForever+0x16>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ec:	e001      	b.n	80035f2 <LoopFillZerobss>

080035ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f0:	3204      	adds	r2, #4

080035f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f4:	d3fb      	bcc.n	80035ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035f6:	f000 f811 	bl	800361c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035fa:	f7ff fd7f 	bl	80030fc <main>

080035fe <LoopForever>:

LoopForever:
  b LoopForever
 80035fe:	e7fe      	b.n	80035fe <LoopForever>
  ldr   r0, =_estack
 8003600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003608:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800360c:	08003904 	.word	0x08003904
  ldr r2, =_sbss
 8003610:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003614:	20000170 	.word	0x20000170

08003618 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003618:	e7fe      	b.n	8003618 <ADC_IRQHandler>
	...

0800361c <__libc_init_array>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4d0d      	ldr	r5, [pc, #52]	; (8003654 <__libc_init_array+0x38>)
 8003620:	4c0d      	ldr	r4, [pc, #52]	; (8003658 <__libc_init_array+0x3c>)
 8003622:	1b64      	subs	r4, r4, r5
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	2600      	movs	r6, #0
 8003628:	42a6      	cmp	r6, r4
 800362a:	d109      	bne.n	8003640 <__libc_init_array+0x24>
 800362c:	4d0b      	ldr	r5, [pc, #44]	; (800365c <__libc_init_array+0x40>)
 800362e:	4c0c      	ldr	r4, [pc, #48]	; (8003660 <__libc_init_array+0x44>)
 8003630:	f000 f820 	bl	8003674 <_init>
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	2600      	movs	r6, #0
 800363a:	42a6      	cmp	r6, r4
 800363c:	d105      	bne.n	800364a <__libc_init_array+0x2e>
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	f855 3b04 	ldr.w	r3, [r5], #4
 8003644:	4798      	blx	r3
 8003646:	3601      	adds	r6, #1
 8003648:	e7ee      	b.n	8003628 <__libc_init_array+0xc>
 800364a:	f855 3b04 	ldr.w	r3, [r5], #4
 800364e:	4798      	blx	r3
 8003650:	3601      	adds	r6, #1
 8003652:	e7f2      	b.n	800363a <__libc_init_array+0x1e>
 8003654:	080038fc 	.word	0x080038fc
 8003658:	080038fc 	.word	0x080038fc
 800365c:	080038fc 	.word	0x080038fc
 8003660:	08003900 	.word	0x08003900

08003664 <memset>:
 8003664:	4402      	add	r2, r0
 8003666:	4603      	mov	r3, r0
 8003668:	4293      	cmp	r3, r2
 800366a:	d100      	bne.n	800366e <memset+0xa>
 800366c:	4770      	bx	lr
 800366e:	f803 1b01 	strb.w	r1, [r3], #1
 8003672:	e7f9      	b.n	8003668 <memset+0x4>

08003674 <_init>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	bf00      	nop
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr

08003680 <_fini>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr
