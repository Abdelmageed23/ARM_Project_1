#ifndef  RTC_PRIVATE_H
#define  RTC_PRIVATE_H

/******************************************************************************/
/************************ Register Bit ****************************************/
/******************************************************************************/
#define RTC_HRS_PM_AM_BIT            5
#define RTC_HRS_12_24_BIT            6
#define RTC_SEC_CH_BIT               7
/******************************************************************************/
/************************ Mask ************************************************/
/******************************************************************************/
#define RTC_SEC_CH_MASK              0b1
#define RTC_SEC_MASK                 0x00
#define RTC_HRS_12_24_PM_AM_MASK     0b11
#define RTC_HRS_PM_AM_MASK           0b1
#define RTC_HRS_12_24_MASK           0b1

/******************************************************************************/
/************************ Addresses *******************************************/
/******************************************************************************/
typedef enum
{
	ADDRESS_SEC  ,
	ADDRESS_MIN  ,
	ADDRESS_HRS  ,
	ADDRESS_DAY  ,
	ADDRESS_DATE ,
	ADDRESS_MONTH,
	ADDRESS_YEAR
}RTC_Address;

#define RTC_ADDRESS_ARR				{ADDRESS_SEC ,ADDRESS_MIN  ,ADDRESS_HRS  ,ADDRESS_DAY  ,ADDRESS_DATE ,ADDRESS_MONTH,ADDRESS_YEAR}
#define RTC_I2C_SLAVE_ADDRESS         0b01101000
/*************************************************************************************************************************************/
/********************************************************* Static Functions Prototype ************************************************/
/*************************************************************************************************************************************/
/**
/**
 ******************************************************************************
 * @fn             : BinaryToBCD
 * @brief          : Convert From Binary To BCD
 * @param[in]      : Copy_u8Vlaue --> Set Binary Vlaue
 * @retval         : Get BCD Value u8
 ******************************************************************************
 * @attention
 *
 *
 ******************************************************************************
 */
 void BinaryToBCD (uint8_t *Copy_pu8BinArr ,uint8_t *Copy_pu8BcdArr ,uint8_t Copy_u8ArrSize);
/**
 ******************************************************************************
 * @fn             : BinaryToBCD
 * @brief          : Convert From Binary To BCD
 * @param[in]      : Copy_u8Vlaue --> Set   Vlaue
 * @retval         : Get  Binary Value u8
 ******************************************************************************
 * @attention
 *
 *
 ******************************************************************************
 */
//static void BCDToBinary (uint8_t *Copy_pu8BcdArr , uint8_t *Copy_pu8BinArr ,uint8_t Copy_u8ArrSize);
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/









#endif
