
I2C_Driver_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fdc  08002fdc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08002fdc  08002fdc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fdc  08002fdc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08002fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000098  0800307c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800307c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004729  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c96  00000000  00000000  000247f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  00025488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000308  00000000  00000000  00025828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003566  00000000  00000000  00025b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e83  00000000  00000000  00029096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c366  00000000  00000000  0002cf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000149c  00000000  00000000  000392d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002e70 	.word	0x08002e70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08002e70 	.word	0x08002e70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <DMA_u8Init>:
static DMA_RegDef_T *DMA_Arr[2] = {DMA1 , DMA2};

static void (*GeneralCallBackFun[DMA_TYPE_NUM*DMA_STREAM_NUM])(void) = {NULL};

uint8_t DMA_u8Init(DMA_Cnfg_T* DMA_Cnfg)
{
 80002b0:	b490      	push	{r4, r7}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]


	if(DMA_Cnfg != NULL)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f000 82d3 	beq.w	800086a <DMA_u8Init+0x5ba>
	{
		/* Set Channel Number */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_CHSEL_MASK << DMA_CHSEL_SHIFT);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4bbb      	ldr	r3, [pc, #748]	; (80005b8 <DMA_u8Init+0x308>)
 80002cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	79db      	ldrb	r3, [r3, #7]
 80002d4:	4619      	mov	r1, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	440b      	add	r3, r1
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	4413      	add	r3, r2
 80002e0:	3310      	adds	r3, #16
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	4611      	mov	r1, r2
 80002ea:	4ab3      	ldr	r2, [pc, #716]	; (80005b8 <DMA_u8Init+0x308>)
 80002ec:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	79d2      	ldrb	r2, [r2, #7]
 80002f4:	4610      	mov	r0, r2
 80002f6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80002fa:	4603      	mov	r3, r0
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	4403      	add	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	440b      	add	r3, r1
 8000304:	3310      	adds	r3, #16
 8000306:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->ChannelNum << DMA_CHSEL_SHIFT);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4baa      	ldr	r3, [pc, #680]	; (80005b8 <DMA_u8Init+0x308>)
 8000310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	79db      	ldrb	r3, [r3, #7]
 8000318:	4619      	mov	r1, r3
 800031a:	460b      	mov	r3, r1
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	440b      	add	r3, r1
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	4413      	add	r3, r2
 8000324:	3310      	adds	r3, #16
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	7a12      	ldrb	r2, [r2, #8]
 800032c:	0652      	lsls	r2, r2, #25
 800032e:	4614      	mov	r4, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	7812      	ldrb	r2, [r2, #0]
 8000334:	4611      	mov	r1, r2
 8000336:	4aa0      	ldr	r2, [pc, #640]	; (80005b8 <DMA_u8Init+0x308>)
 8000338:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	79d2      	ldrb	r2, [r2, #7]
 8000340:	4610      	mov	r0, r2
 8000342:	ea43 0204 	orr.w	r2, r3, r4
 8000346:	4603      	mov	r3, r0
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	4403      	add	r3, r0
 800034c:	00db      	lsls	r3, r3, #3
 800034e:	440b      	add	r3, r1
 8000350:	3310      	adds	r3, #16
 8000352:	601a      	str	r2, [r3, #0]

		/* Set data transfer direction*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_DIR_MASK << DMA_DIR_SHIFT);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b97      	ldr	r3, [pc, #604]	; (80005b8 <DMA_u8Init+0x308>)
 800035c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	79db      	ldrb	r3, [r3, #7]
 8000364:	4619      	mov	r1, r3
 8000366:	460b      	mov	r3, r1
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	440b      	add	r3, r1
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	4413      	add	r3, r2
 8000370:	3310      	adds	r3, #16
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	4611      	mov	r1, r2
 800037a:	4a8f      	ldr	r2, [pc, #572]	; (80005b8 <DMA_u8Init+0x308>)
 800037c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	79d2      	ldrb	r2, [r2, #7]
 8000384:	4610      	mov	r0, r2
 8000386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800038a:	4603      	mov	r3, r0
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4403      	add	r3, r0
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	440b      	add	r3, r1
 8000394:	3310      	adds	r3, #16
 8000396:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->SrcDestMode << DMA_DIR_SHIFT);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	461a      	mov	r2, r3
 800039e:	4b86      	ldr	r3, [pc, #536]	; (80005b8 <DMA_u8Init+0x308>)
 80003a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	79db      	ldrb	r3, [r3, #7]
 80003a8:	4619      	mov	r1, r3
 80003aa:	460b      	mov	r3, r1
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	440b      	add	r3, r1
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	4413      	add	r3, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7952      	ldrb	r2, [r2, #5]
 80003bc:	0192      	lsls	r2, r2, #6
 80003be:	4614      	mov	r4, r2
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	7812      	ldrb	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a7c      	ldr	r2, [pc, #496]	; (80005b8 <DMA_u8Init+0x308>)
 80003c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	79d2      	ldrb	r2, [r2, #7]
 80003d0:	4610      	mov	r0, r2
 80003d2:	ea43 0204 	orr.w	r2, r3, r4
 80003d6:	4603      	mov	r3, r0
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4403      	add	r3, r0
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	440b      	add	r3, r1
 80003e0:	3310      	adds	r3, #16
 80003e2:	601a      	str	r2, [r3, #0]

		/* Set priority level */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PL_MASK << DMA_PL_SHIFT);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b73      	ldr	r3, [pc, #460]	; (80005b8 <DMA_u8Init+0x308>)
 80003ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	79db      	ldrb	r3, [r3, #7]
 80003f4:	4619      	mov	r1, r3
 80003f6:	460b      	mov	r3, r1
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	440b      	add	r3, r1
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	4413      	add	r3, r2
 8000400:	3310      	adds	r3, #16
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	4611      	mov	r1, r2
 800040a:	4a6b      	ldr	r2, [pc, #428]	; (80005b8 <DMA_u8Init+0x308>)
 800040c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	79d2      	ldrb	r2, [r2, #7]
 8000414:	4610      	mov	r0, r2
 8000416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800041a:	4603      	mov	r3, r0
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4403      	add	r3, r0
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	440b      	add	r3, r1
 8000424:	3310      	adds	r3, #16
 8000426:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->PriorityLevel << DMA_PL_SHIFT);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b62      	ldr	r3, [pc, #392]	; (80005b8 <DMA_u8Init+0x308>)
 8000430:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	79db      	ldrb	r3, [r3, #7]
 8000438:	4619      	mov	r1, r3
 800043a:	460b      	mov	r3, r1
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	440b      	add	r3, r1
 8000440:	00db      	lsls	r3, r3, #3
 8000442:	4413      	add	r3, r2
 8000444:	3310      	adds	r3, #16
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	7a52      	ldrb	r2, [r2, #9]
 800044c:	0412      	lsls	r2, r2, #16
 800044e:	4614      	mov	r4, r2
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	4611      	mov	r1, r2
 8000456:	4a58      	ldr	r2, [pc, #352]	; (80005b8 <DMA_u8Init+0x308>)
 8000458:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	79d2      	ldrb	r2, [r2, #7]
 8000460:	4610      	mov	r0, r2
 8000462:	ea43 0204 	orr.w	r2, r3, r4
 8000466:	4603      	mov	r3, r0
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	4403      	add	r3, r0
 800046c:	00db      	lsls	r3, r3, #3
 800046e:	440b      	add	r3, r1
 8000470:	3310      	adds	r3, #16
 8000472:	601a      	str	r2, [r3, #0]

		/* Set Peripheral Increment Mode */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_MSIZE_MASK << DMA_PINC_SHIFT);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b4f      	ldr	r3, [pc, #316]	; (80005b8 <DMA_u8Init+0x308>)
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	79db      	ldrb	r3, [r3, #7]
 8000484:	4619      	mov	r1, r3
 8000486:	460b      	mov	r3, r1
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	440b      	add	r3, r1
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	4413      	add	r3, r2
 8000490:	3310      	adds	r3, #16
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7812      	ldrb	r2, [r2, #0]
 8000498:	4611      	mov	r1, r2
 800049a:	4a47      	ldr	r2, [pc, #284]	; (80005b8 <DMA_u8Init+0x308>)
 800049c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	79d2      	ldrb	r2, [r2, #7]
 80004a4:	4610      	mov	r0, r2
 80004a6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80004aa:	4603      	mov	r3, r0
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4403      	add	r3, r0
 80004b0:	00db      	lsls	r3, r3, #3
 80004b2:	440b      	add	r3, r1
 80004b4:	3310      	adds	r3, #16
 80004b6:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= DMA_Cnfg->PerIncMode << DMA_PINC_SHIFT;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <DMA_u8Init+0x308>)
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	79db      	ldrb	r3, [r3, #7]
 80004c8:	4619      	mov	r1, r3
 80004ca:	460b      	mov	r3, r1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	440b      	add	r3, r1
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	4413      	add	r3, r2
 80004d4:	3310      	adds	r3, #16
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7892      	ldrb	r2, [r2, #2]
 80004dc:	0252      	lsls	r2, r2, #9
 80004de:	4614      	mov	r4, r2
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a34      	ldr	r2, [pc, #208]	; (80005b8 <DMA_u8Init+0x308>)
 80004e8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	79d2      	ldrb	r2, [r2, #7]
 80004f0:	4610      	mov	r0, r2
 80004f2:	ea43 0204 	orr.w	r2, r3, r4
 80004f6:	4603      	mov	r3, r0
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4403      	add	r3, r0
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	440b      	add	r3, r1
 8000500:	3310      	adds	r3, #16
 8000502:	601a      	str	r2, [r3, #0]

		/* Set Memory Increment Mode*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PSIZE_MASK << DMA_MINC_SHIFT);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <DMA_u8Init+0x308>)
 800050c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	79db      	ldrb	r3, [r3, #7]
 8000514:	4619      	mov	r1, r3
 8000516:	460b      	mov	r3, r1
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	440b      	add	r3, r1
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	3310      	adds	r3, #16
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7812      	ldrb	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	4a23      	ldr	r2, [pc, #140]	; (80005b8 <DMA_u8Init+0x308>)
 800052c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	79d2      	ldrb	r2, [r2, #7]
 8000534:	4610      	mov	r0, r2
 8000536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800053a:	4603      	mov	r3, r0
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	4403      	add	r3, r0
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	440b      	add	r3, r1
 8000544:	3310      	adds	r3, #16
 8000546:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= DMA_Cnfg->MemIncMode << DMA_MINC_SHIFT;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <DMA_u8Init+0x308>)
 8000550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	79db      	ldrb	r3, [r3, #7]
 8000558:	4619      	mov	r1, r3
 800055a:	460b      	mov	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	440b      	add	r3, r1
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	4413      	add	r3, r2
 8000564:	3310      	adds	r3, #16
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7852      	ldrb	r2, [r2, #1]
 800056c:	0292      	lsls	r2, r2, #10
 800056e:	4614      	mov	r4, r2
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	4611      	mov	r1, r2
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <DMA_u8Init+0x308>)
 8000578:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	79d2      	ldrb	r2, [r2, #7]
 8000580:	4610      	mov	r0, r2
 8000582:	ea43 0204 	orr.w	r2, r3, r4
 8000586:	4603      	mov	r3, r0
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4403      	add	r3, r0
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	440b      	add	r3, r1
 8000590:	3310      	adds	r3, #16
 8000592:	601a      	str	r2, [r3, #0]


		/* Set peripheral data size */
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_PSIZE_MASK <<DMA_PSIZE_SHIFT);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <DMA_u8Init+0x308>)
 800059c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	460b      	mov	r3, r1
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	440b      	add	r3, r1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	3310      	adds	r3, #16
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	e002      	b.n	80005bc <DMA_u8Init+0x30c>
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7812      	ldrb	r2, [r2, #0]
 80005c0:	4611      	mov	r1, r2
 80005c2:	4aae      	ldr	r2, [pc, #696]	; (800087c <DMA_u8Init+0x5cc>)
 80005c4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	79d2      	ldrb	r2, [r2, #7]
 80005cc:	4610      	mov	r0, r2
 80005ce:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80005d2:	4603      	mov	r3, r0
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4403      	add	r3, r0
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	3310      	adds	r3, #16
 80005de:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->PerIncSize <<DMA_PSIZE_SHIFT);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4ba5      	ldr	r3, [pc, #660]	; (800087c <DMA_u8Init+0x5cc>)
 80005e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	79db      	ldrb	r3, [r3, #7]
 80005f0:	4619      	mov	r1, r3
 80005f2:	460b      	mov	r3, r1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	440b      	add	r3, r1
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4413      	add	r3, r2
 80005fc:	3310      	adds	r3, #16
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	02d2      	lsls	r2, r2, #11
 8000606:	4614      	mov	r4, r2
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	4611      	mov	r1, r2
 800060e:	4a9b      	ldr	r2, [pc, #620]	; (800087c <DMA_u8Init+0x5cc>)
 8000610:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	79d2      	ldrb	r2, [r2, #7]
 8000618:	4610      	mov	r0, r2
 800061a:	ea43 0204 	orr.w	r2, r3, r4
 800061e:	4603      	mov	r3, r0
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4403      	add	r3, r0
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	440b      	add	r3, r1
 8000628:	3310      	adds	r3, #16
 800062a:	601a      	str	r2, [r3, #0]


		if(DMA_Cnfg->TransferMode == FIFO_MODE)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	799b      	ldrb	r3, [r3, #6]
 8000630:	2b01      	cmp	r3, #1
 8000632:	f040 80b1 	bne.w	8000798 <DMA_u8Init+0x4e8>
		{
			/* Disable direct mode*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SFCR] |= (1 << DMA_DMDIS_SHIFT);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	4b8f      	ldr	r3, [pc, #572]	; (800087c <DMA_u8Init+0x5cc>)
 800063e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	79db      	ldrb	r3, [r3, #7]
 8000646:	4619      	mov	r1, r3
 8000648:	460b      	mov	r3, r1
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	440b      	add	r3, r1
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	3324      	adds	r3, #36	; 0x24
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	4611      	mov	r1, r2
 800065c:	4a87      	ldr	r2, [pc, #540]	; (800087c <DMA_u8Init+0x5cc>)
 800065e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	79d2      	ldrb	r2, [r2, #7]
 8000666:	4610      	mov	r0, r2
 8000668:	f043 0204 	orr.w	r2, r3, #4
 800066c:	4603      	mov	r3, r0
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4403      	add	r3, r0
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	440b      	add	r3, r1
 8000676:	3324      	adds	r3, #36	; 0x24
 8000678:	601a      	str	r2, [r3, #0]

			/* Set memory data size */
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_MSIZE_MASK <<DMA_MSIZE_SHIFT);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b7e      	ldr	r3, [pc, #504]	; (800087c <DMA_u8Init+0x5cc>)
 8000682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	4619      	mov	r1, r3
 800068c:	460b      	mov	r3, r1
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	440b      	add	r3, r1
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	3310      	adds	r3, #16
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	4611      	mov	r1, r2
 80006a0:	4a76      	ldr	r2, [pc, #472]	; (800087c <DMA_u8Init+0x5cc>)
 80006a2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	79d2      	ldrb	r2, [r2, #7]
 80006aa:	4610      	mov	r0, r2
 80006ac:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80006b0:	4603      	mov	r3, r0
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4403      	add	r3, r0
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	3310      	adds	r3, #16
 80006bc:	601a      	str	r2, [r3, #0]
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->MemIncSize <<DMA_MSIZE_SHIFT);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b6d      	ldr	r3, [pc, #436]	; (800087c <DMA_u8Init+0x5cc>)
 80006c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	79db      	ldrb	r3, [r3, #7]
 80006ce:	4619      	mov	r1, r3
 80006d0:	460b      	mov	r3, r1
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	440b      	add	r3, r1
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	4413      	add	r3, r2
 80006da:	3310      	adds	r3, #16
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	78d2      	ldrb	r2, [r2, #3]
 80006e2:	0352      	lsls	r2, r2, #13
 80006e4:	4614      	mov	r4, r2
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a63      	ldr	r2, [pc, #396]	; (800087c <DMA_u8Init+0x5cc>)
 80006ee:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	79d2      	ldrb	r2, [r2, #7]
 80006f6:	4610      	mov	r0, r2
 80006f8:	ea43 0204 	orr.w	r2, r3, r4
 80006fc:	4603      	mov	r3, r0
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4403      	add	r3, r0
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	440b      	add	r3, r1
 8000706:	3310      	adds	r3, #16
 8000708:	601a      	str	r2, [r3, #0]

			/* Set FIFO threshold*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] &= ~(DMA_FTH_MASK);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b5a      	ldr	r3, [pc, #360]	; (800087c <DMA_u8Init+0x5cc>)
 8000712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	79db      	ldrb	r3, [r3, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	460b      	mov	r3, r1
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	440b      	add	r3, r1
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	4413      	add	r3, r2
 8000726:	3310      	adds	r3, #16
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	4a52      	ldr	r2, [pc, #328]	; (800087c <DMA_u8Init+0x5cc>)
 8000732:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	79d2      	ldrb	r2, [r2, #7]
 800073a:	4610      	mov	r0, r2
 800073c:	f023 0203 	bic.w	r2, r3, #3
 8000740:	4603      	mov	r3, r0
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4403      	add	r3, r0
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3310      	adds	r3, #16
 800074c:	601a      	str	r2, [r3, #0]
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (DMA_Cnfg->FIFOThresh);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	4b49      	ldr	r3, [pc, #292]	; (800087c <DMA_u8Init+0x5cc>)
 8000756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	79db      	ldrb	r3, [r3, #7]
 800075e:	4619      	mov	r1, r3
 8000760:	460b      	mov	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	3310      	adds	r3, #16
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	7a92      	ldrb	r2, [r2, #10]
 8000772:	4614      	mov	r4, r2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	4611      	mov	r1, r2
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <DMA_u8Init+0x5cc>)
 800077c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	79d2      	ldrb	r2, [r2, #7]
 8000784:	4610      	mov	r0, r2
 8000786:	ea43 0204 	orr.w	r2, r3, r4
 800078a:	4603      	mov	r3, r0
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4403      	add	r3, r0
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	440b      	add	r3, r1
 8000794:	3310      	adds	r3, #16
 8000796:	601a      	str	r2, [r3, #0]


		}

		/*Set Callback function */
		if(DMA_Cnfg->DMA_Type == DMA_1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d108      	bne.n	80007b2 <DMA_u8Init+0x502>
		{
			GeneralCallBackFun[DMA_Cnfg->StreamNum] = DMA_Cnfg->CallBackFunc;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	79db      	ldrb	r3, [r3, #7]
 80007a4:	4619      	mov	r1, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a35      	ldr	r2, [pc, #212]	; (8000880 <DMA_u8Init+0x5d0>)
 80007ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80007b0:	e00b      	b.n	80007ca <DMA_u8Init+0x51a>

		}
		else if(DMA_Cnfg->DMA_Type == DMA_2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d107      	bne.n	80007ca <DMA_u8Init+0x51a>
		{
			GeneralCallBackFun[(DMA_Cnfg->StreamNum)+DMA_STREAM_NUM] = DMA_Cnfg->CallBackFunc;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	79db      	ldrb	r3, [r3, #7]
 80007be:	3308      	adds	r3, #8
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	68d2      	ldr	r2, [r2, #12]
 80007c4:	492e      	ldr	r1, [pc, #184]	; (8000880 <DMA_u8Init+0x5d0>)
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}

		/*Enable Corresponding interrupt*/
		if(DMA_Cnfg->InterruptType == FIFO_ERR)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7adb      	ldrb	r3, [r3, #11]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d122      	bne.n	8000818 <DMA_u8Init+0x568>
		{
			/* Enable FIFO interrupt*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SFCR] |= (1 << DMA_FEIE_SHIFT);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <DMA_u8Init+0x5cc>)
 80007da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	79db      	ldrb	r3, [r3, #7]
 80007e2:	4619      	mov	r1, r3
 80007e4:	460b      	mov	r3, r1
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	440b      	add	r3, r1
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4413      	add	r3, r2
 80007ee:	3324      	adds	r3, #36	; 0x24
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a20      	ldr	r2, [pc, #128]	; (800087c <DMA_u8Init+0x5cc>)
 80007fa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	79d2      	ldrb	r2, [r2, #7]
 8000802:	4610      	mov	r0, r2
 8000804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000808:	4603      	mov	r3, r0
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4403      	add	r3, r0
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	3324      	adds	r3, #36	; 0x24
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	e02a      	b.n	800086e <DMA_u8Init+0x5be>
		}
		else
		{
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= (1 << DMA_Cnfg->InterruptType);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <DMA_u8Init+0x5cc>)
 8000820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	79db      	ldrb	r3, [r3, #7]
 8000828:	4619      	mov	r1, r3
 800082a:	460b      	mov	r3, r1
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	440b      	add	r3, r1
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	4413      	add	r3, r2
 8000834:	3310      	adds	r3, #16
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7ad2      	ldrb	r2, [r2, #11]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	4614      	mov	r4, r2
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	4611      	mov	r1, r2
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <DMA_u8Init+0x5cc>)
 800084c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	79d2      	ldrb	r2, [r2, #7]
 8000854:	4610      	mov	r0, r2
 8000856:	ea43 0204 	orr.w	r2, r3, r4
 800085a:	4603      	mov	r3, r0
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4403      	add	r3, r0
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3310      	adds	r3, #16
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	e001      	b.n	800086e <DMA_u8Init+0x5be>

	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 800086a:	2302      	movs	r3, #2
 800086c:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 800086e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bc90      	pop	{r4, r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000
 8000880:	200000b4 	.word	0x200000b4

08000884 <DMA_u8StartTransfer>:

uint8_t DMA_u8StartTransfer(DMA_Cnfg_T *DMA_Cnfg,uint32_t *Copy_pu32SrcAddress , uint32_t *Copy_pu32DestAddress , uint16_t Copy_u32DataSize)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	807b      	strh	r3, [r7, #2]
	uint8_t Local_u8ErrorState = OK;
 8000892:	2300      	movs	r3, #0
 8000894:	75fb      	strb	r3, [r7, #23]

	if((DMA_Cnfg != NULL) && (Copy_pu32DestAddress != NULL) && (Copy_pu32SrcAddress != NULL))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 8093 	beq.w	80009c4 <DMA_u8StartTransfer+0x140>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 808f 	beq.w	80009c4 <DMA_u8StartTransfer+0x140>
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 808b 	beq.w	80009c4 <DMA_u8StartTransfer+0x140>
	{
		if (DMA_Cnfg->SrcDestMode == MEM_TO_PERIPH)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d121      	bne.n	80008fa <DMA_u8StartTransfer+0x76>
		{
			/* Set memory as source address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SM0AR] = (uint32_t)Copy_pu32SrcAddress;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b46      	ldr	r3, [pc, #280]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 80008be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	4603      	mov	r3, r0
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4403      	add	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	440b      	add	r3, r1
 80008d4:	331c      	adds	r3, #28
 80008d6:	601a      	str	r2, [r3, #0]

			/* Set peripheral as destination address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SPAR]  = (uint32_t)Copy_pu32DestAddress;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 80008e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	79db      	ldrb	r3, [r3, #7]
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4403      	add	r3, r0
 80008f6:	6019      	str	r1, [r3, #0]
 80008f8:	e020      	b.n	800093c <DMA_u8StartTransfer+0xb8>
		}

		else
		{
			/* Set peripheral as source address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SPAR]  = (uint32_t)Copy_pu32SrcAddress;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	79db      	ldrb	r3, [r3, #7]
 800090a:	68b9      	ldr	r1, [r7, #8]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4403      	add	r3, r0
 8000918:	6019      	str	r1, [r3, #0]

			/* Set memory as destination address*/
			DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SM0AR] = (uint32_t)Copy_pu32DestAddress;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000922:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	79db      	ldrb	r3, [r3, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4603      	mov	r3, r0
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4403      	add	r3, r0
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	440b      	add	r3, r1
 8000938:	331c      	adds	r3, #28
 800093a:	601a      	str	r2, [r3, #0]

		}

		/* Set data size*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SNDTR] = 	Copy_u32DataSize;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	79db      	ldrb	r3, [r3, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	887a      	ldrh	r2, [r7, #2]
 8000950:	4603      	mov	r3, r0
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4403      	add	r3, r0
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3314      	adds	r3, #20
 800095c:	601a      	str	r2, [r3, #0]

		/*Clear interrupt status registers*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->ISR[0] = 0x00;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
		DMA_Arr[DMA_Cnfg->DMA_Type]->ISR[1] = 0x00;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]

		/*Enable Stream*/
		DMA_Arr[DMA_Cnfg->DMA_Type]->STR[DMA_Cnfg->StreamNum][SCR] |= 1;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 8000986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	79db      	ldrb	r3, [r3, #7]
 800098e:	4619      	mov	r1, r3
 8000990:	460b      	mov	r3, r1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	440b      	add	r3, r1
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	4413      	add	r3, r2
 800099a:	3310      	adds	r3, #16
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <DMA_u8StartTransfer+0x154>)
 80009a6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	79d2      	ldrb	r2, [r2, #7]
 80009ae:	4610      	mov	r0, r2
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	4603      	mov	r3, r0
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4403      	add	r3, r0
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	440b      	add	r3, r1
 80009be:	3310      	adds	r3, #16
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e001      	b.n	80009c8 <DMA_u8StartTransfer+0x144>

	}

	else
	{
		Local_u8ErrorState = NOK;
 80009c4:	2301      	movs	r3, #1
 80009c6:	75fb      	strb	r3, [r7, #23]
	}

	return Local_u8ErrorState;
 80009c8:	7dfb      	ldrb	r3, [r7, #23]

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	371c      	adds	r7, #28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000000 	.word	0x20000000

080009dc <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <DMA1_Stream0_IRQHandler+0x18>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	609a      	str	r2, [r3, #8]

	GeneralCallBackFun[STREAM0]();
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <DMA1_Stream0_IRQHandler+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40026000 	.word	0x40026000
 80009f8:	200000b4 	.word	0x200000b4

080009fc <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <DMA1_Stream1_IRQHandler+0x18>)
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM1]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <DMA1_Stream1_IRQHandler+0x1c>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4798      	blx	r3
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40026000 	.word	0x40026000
 8000a18:	200000b4 	.word	0x200000b4

08000a1c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <DMA1_Stream2_IRQHandler+0x18>)
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295
 8000a26:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM2]();
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <DMA1_Stream2_IRQHandler+0x1c>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4798      	blx	r3
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40026000 	.word	0x40026000
 8000a38:	200000b4 	.word	0x200000b4

08000a3c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[0] = 0xffffffff;
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <DMA1_Stream3_IRQHandler+0x18>)
 8000a42:	f04f 32ff 	mov.w	r2, #4294967295
 8000a46:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM3]();
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <DMA1_Stream3_IRQHandler+0x1c>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40026000 	.word	0x40026000
 8000a58:	200000b4 	.word	0x200000b4

08000a5c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <DMA1_Stream4_IRQHandler+0x18>)
 8000a62:	f04f 32ff 	mov.w	r2, #4294967295
 8000a66:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM4]();
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <DMA1_Stream4_IRQHandler+0x1c>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	4798      	blx	r3
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40026000 	.word	0x40026000
 8000a78:	200000b4 	.word	0x200000b4

08000a7c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <DMA1_Stream5_IRQHandler+0x18>)
 8000a82:	f04f 32ff 	mov.w	r2, #4294967295
 8000a86:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM5]();
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <DMA1_Stream5_IRQHandler+0x1c>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4798      	blx	r3
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40026000 	.word	0x40026000
 8000a98:	200000b4 	.word	0x200000b4

08000a9c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <DMA1_Stream6_IRQHandler+0x18>)
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM6]();
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <DMA1_Stream6_IRQHandler+0x1c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4798      	blx	r3
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40026000 	.word	0x40026000
 8000ab8:	200000b4 	.word	0x200000b4

08000abc <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA1->IFCR[1] = 0xffffffff;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <DMA1_Stream7_IRQHandler+0x18>)
 8000ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac6:	60da      	str	r2, [r3, #12]


	/* Call Callback Function*/
	GeneralCallBackFun[STREAM7]();
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <DMA1_Stream7_IRQHandler+0x1c>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4798      	blx	r3
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40026000 	.word	0x40026000
 8000ad8:	200000b4 	.word	0x200000b4

08000adc <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <DMA2_Stream0_IRQHandler+0x18>)
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae6:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[(STREAM0 + DMA_STREAM_NUM)]();
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <DMA2_Stream0_IRQHandler+0x1c>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	4798      	blx	r3
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40026400 	.word	0x40026400
 8000af8:	200000b4 	.word	0x200000b4

08000afc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <DMA2_Stream1_IRQHandler+0x18>)
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM1 + DMA_STREAM_NUM]();
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <DMA2_Stream1_IRQHandler+0x1c>)
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	4798      	blx	r3
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40026400 	.word	0x40026400
 8000b18:	200000b4 	.word	0x200000b4

08000b1c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <DMA2_Stream2_IRQHandler+0x18>)
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295
 8000b26:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM2 + DMA_STREAM_NUM]();
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <DMA2_Stream2_IRQHandler+0x1c>)
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	4798      	blx	r3
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40026400 	.word	0x40026400
 8000b38:	200000b4 	.word	0x200000b4

08000b3c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[0] = 0xffffffff;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <DMA2_Stream3_IRQHandler+0x18>)
 8000b42:	f04f 32ff 	mov.w	r2, #4294967295
 8000b46:	609a      	str	r2, [r3, #8]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM3 + DMA_STREAM_NUM]();
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <DMA2_Stream3_IRQHandler+0x1c>)
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	4798      	blx	r3
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40026400 	.word	0x40026400
 8000b58:	200000b4 	.word	0x200000b4

08000b5c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <DMA2_Stream4_IRQHandler+0x18>)
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM4 + DMA_STREAM_NUM]();
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <DMA2_Stream4_IRQHandler+0x1c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4798      	blx	r3
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40026400 	.word	0x40026400
 8000b78:	200000b4 	.word	0x200000b4

08000b7c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <DMA2_Stream5_IRQHandler+0x18>)
 8000b82:	f04f 32ff 	mov.w	r2, #4294967295
 8000b86:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM5 + DMA_STREAM_NUM]();
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <DMA2_Stream5_IRQHandler+0x1c>)
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	4798      	blx	r3
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40026400 	.word	0x40026400
 8000b98:	200000b4 	.word	0x200000b4

08000b9c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <DMA2_Stream6_IRQHandler+0x18>)
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba6:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM6 + DMA_STREAM_NUM]();
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <DMA2_Stream6_IRQHandler+0x1c>)
 8000baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bac:	4798      	blx	r3
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40026400 	.word	0x40026400
 8000bb8:	200000b4 	.word	0x200000b4

08000bbc <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	/*Clear Flag*/
	DMA2->IFCR[1] = 0xffffffff;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <DMA2_Stream7_IRQHandler+0x18>)
 8000bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc6:	60da      	str	r2, [r3, #12]

	/* Call Callback Function*/
	GeneralCallBackFun[STREAM7 + DMA_STREAM_NUM]();
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <DMA2_Stream7_IRQHandler+0x1c>)
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	4798      	blx	r3
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40026400 	.word	0x40026400
 8000bd8:	200000b4 	.word	0x200000b4

08000bdc <GPIO_u8PinInit>:
 * @brief 		the function initializes the GPIO pin according to the input parameters
 * @param[in]	PinConfig : the initialization values of the pin
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_T *PinConfig)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK,
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
			Local_u8RegNum,
			Local_u8BitNum;

	/*Check Null Pointer*/
	if(PinConfig != NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8130 	beq.w	8000e50 <GPIO_u8PinInit+0x274>
	{
		/*Check Valid Inputs Configuration*/
		if((PinConfig->Port <= PORTH) && ((PinConfig->PinNum) <= PIN15)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	f200 8128 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	785b      	ldrb	r3, [r3, #1]
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	f200 8123 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
				&& (PinConfig->Mode <= ANALOG) && (PinConfig->AltFunc <= AF15)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	f200 811e 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	f200 8119 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
				&& (PinConfig->OutType <= OPEN_DRAIN) && (PinConfig->PullType <= PULL_DN)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	791b      	ldrb	r3, [r3, #4]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f200 8114 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	f200 810f 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
				&&(PinConfig->Speed) <= SPEED_HIGH)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	f200 810a 	bhi.w	8000e4a <GPIO_u8PinInit+0x26e>
		{
			/*1. Set Pin Mode : Input ,Output ,Analog ,Alternative Function */
			(GPIOPort[PinConfig->Port]->MODER) &= ~(MODER_MASK << ((PinConfig->PinNum)*MODER_PIN_ACCESS)) ;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b8a      	ldr	r3, [pc, #552]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4619      	mov	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	4b83      	ldr	r3, [pc, #524]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000c5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
			(GPIOPort[PinConfig->Port]->MODER) |= ((PinConfig->Mode) << (PinConfig->PinNum)*MODER_PIN_ACCESS);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	4619      	mov	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	4b77      	ldr	r3, [pc, #476]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000c8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]

			/*2. Set Pull State : PullUp ,PullDn ,NoPull*/
			(GPIOPort[PinConfig->Port]->PUPDR) &= ~(PUPDR_MASK << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b73      	ldr	r3, [pc, #460]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	4b6b      	ldr	r3, [pc, #428]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000cba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cbe:	400a      	ands	r2, r1
 8000cc0:	60da      	str	r2, [r3, #12]
			(GPIOPort[PinConfig->Port]->PUPDR) |= (PinConfig->PullType << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b67      	ldr	r3, [pc, #412]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	795b      	ldrb	r3, [r3, #5]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000cea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	60da      	str	r2, [r3, #12]

			/*Output Pin Setting*/
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d004      	beq.n	8000d04 <GPIO_u8PinInit+0x128>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	f040 80a9 	bne.w	8000e56 <GPIO_u8PinInit+0x27a>
			{
				/*3. Set Output Type Of Pin : PushPull ,OpenDrain*/
				(GPIOPort[PinConfig->Port]->OTYPER) &= ~(OTYPER_MASK << PinConfig->PinNum);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	785b      	ldrb	r3, [r3, #1]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2301      	movs	r3, #1
 8000d1a:	408b      	lsls	r3, r1
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4619      	mov	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]
				(GPIOPort[PinConfig->Port]->OTYPER) |= (PinConfig->OutType << PinConfig->PinNum);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	791b      	ldrb	r3, [r3, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	605a      	str	r2, [r3, #4]

				/*4. Set Speed Of Pin : Low ,Medium ,Fast ,High*/
				(GPIOPort[PinConfig->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	785b      	ldrb	r3, [r3, #1]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2103      	movs	r1, #3
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d88:	400a      	ands	r2, r1
 8000d8a:	609a      	str	r2, [r3, #8]
				(GPIOPort[PinConfig->Port]->OSPEEDER) |= (PinConfig->Speed << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	78db      	ldrb	r3, [r3, #3]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	4619      	mov	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000db4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	609a      	str	r2, [r3, #8]

				/*5. Set Alternative Function*/
				if(PinConfig->Mode == ALTER_FUNC)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d148      	bne.n	8000e56 <GPIO_u8PinInit+0x27a>
				{
					Local_u8RegNum = (PinConfig->PinNum)/AFR_DIV_REM;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	73bb      	strb	r3, [r7, #14]
					Local_u8BitNum = ((PinConfig->PinNum)%AFR_DIV_REM)*AFR_PIN_ACCESS;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	737b      	strb	r3, [r7, #13]

					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << Local_u8BitNum);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de6:	7bba      	ldrb	r2, [r7, #14]
 8000de8:	3208      	adds	r2, #8
 8000dea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	7bba      	ldrb	r2, [r7, #14]
 8000e08:	4001      	ands	r1, r0
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) |= (PinConfig->AltFunc << Local_u8BitNum);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	7bba      	ldrb	r2, [r7, #14]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <GPIO_u8PinInit+0x28c>)
 8000e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3e:	7bba      	ldrb	r2, [r7, #14]
 8000e40:	4301      	orrs	r1, r0
 8000e42:	3208      	adds	r2, #8
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8000e48:	e005      	b.n	8000e56 <GPIO_u8PinInit+0x27a>
				}
			}
		}
		else
		{
			Local_u8ErrorState = ERROR_STATE_NOK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e003      	b.n	8000e58 <GPIO_u8PinInit+0x27c>
		}
	}

	else
	{
		Local_u8ErrorState = ERROR_STATE_NULL_PTR;
 8000e50:	2302      	movs	r3, #2
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e000      	b.n	8000e58 <GPIO_u8PinInit+0x27c>
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8000e56:	bf00      	nop
	}

	return Local_u8ErrorState;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <MI2C_u8SetConfiguration>:
 ******************************************************************************
 */
static   I2C_REG* I2C_Index[I2C_NUMBERS]={I2C1,I2C2,I2C3};

uint8_t MI2C_u8SetConfiguration ( const I2Cconfig_t* I2Cconfig )
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
	if (  I2Cconfig !=NULL )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80b0 	beq.w	8000fe0 <MI2C_u8SetConfiguration+0x174>
	{
		I2C_Index[I2Cconfig->I2Cindex]->CR1 |=  (I2C_F_S_MASK<<I2C_CCR_F_S);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000e96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e9e:	601a      	str	r2, [r3, #0]
		I2C_Index[I2Cconfig->I2Cindex]->CR1 &= ~(I2C_F_S_MASK<<I2C_CCR_F_S);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ebe:	601a      	str	r2, [r3, #0]
		uint32_t Local_u16Temp=0 , Local_u16Freq=0 , Local_u16Result=0 ;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
		Local_u16Temp=I2C_Index[I2Cconfig->I2Cindex]->CR2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_FREQ_MASK  << I2C_CR2_FREQ );
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee2:	613b      	str	r3, [r7, #16]
		Local_u16Freq=(P_CLOCK1/1000000);
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
		Local_u16Temp  |=  ( Local_u16Freq        );
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CR2=Local_u16Temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	605a      	str	r2, [r3, #4]
		/*****************************************************************************/
		Local_u16Temp=0 ;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
		Local_u16Result =(P_CLOCK1/(2*(I2Cconfig->ClockSpeed)));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4a3b      	ldr	r2, [pc, #236]	; (8000ff8 <MI2C_u8SetConfiguration+0x18c>)
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	60bb      	str	r3, [r7, #8]
		Local_u16Temp |=Local_u16Result;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_F_S_MASK          << I2C_CCR_F_S );
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f20:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->MasterMode << I2C_CCR_F_S );
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	03db      	lsls	r3, r3, #15
 8000f28:	461a      	mov	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CCR = Local_u16Temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	61da      	str	r2, [r3, #28]
		/*****************************************************************************/
		I2C_Index[I2Cconfig->I2Cindex]->TRISE = Local_u16Freq+I2C_TRISE_MASK ;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	3201      	adds	r2, #1
 8000f50:	621a      	str	r2, [r3, #32]
		/*****************************************************************************/
		Local_u16Temp=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_NOSTRETCH_MASK          << I2C_CR1_NOSTRETCH );
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f5c:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->Clock_Stretching << I2C_CR1_NOSTRETCH );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	461a      	mov	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_SMBUS_MASK     << I2C_CR1_SMBUS );
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->I2Cmode << I2C_CR1_SMBUS );
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7a5b      	ldrb	r3, [r3, #9]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_ACK_MASK          << I2C_CR1_ACK );
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f88:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->Acknowledge << I2C_CR1_ACK );
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7a9b      	ldrb	r3, [r3, #10]
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	461a      	mov	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
		Local_u16Temp  &=~ ( I2C_ENGC_MASK          << I2C_CR1_ENGC );
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f9e:	613b      	str	r3, [r7, #16]
		Local_u16Temp  |=  ( I2Cconfig->GeneralCall << I2C_CR1_ENGC );
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7adb      	ldrb	r3, [r3, #11]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
		I2C_Index[I2Cconfig->I2Cindex]->CR1 = Local_u16Temp ;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]


		/*******************************************************************************/
		SET_BIT(I2C_Index[I2Cconfig->I2Cindex]->CR1,I2C_CR1_PE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MI2C_u8SetConfiguration+0x188>)
 8000fd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e001      	b.n	8000fe4 <MI2C_u8SetConfiguration+0x178>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]

}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000028 	.word	0x20000028
 8000ff8:	00f42400 	.word	0x00f42400

08000ffc <MI2C_u8Transmit_DMA>:
	}
	return Local_u8ErrorState ;
}

uint8_t MI2C_u8Transmit_DMA( I2Cconfig_t* I2Cconfig , uint16_t Copy_u16SlaveAdd ,uint8_t *Copy_pu8Data , uint32_t Copy_u32Size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	460b      	mov	r3, r1
 800100a:	817b      	strh	r3, [r7, #10]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 800100c:	2301      	movs	r3, #1
 800100e:	77fb      	strb	r3, [r7, #31]
	volatile uint8_t Local_u8tmp ;
	if ( I2Cconfig != NULL &&  Copy_pu8Data != NULL)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d06b      	beq.n	80010ee <MI2C_u8Transmit_DMA+0xf2>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d068      	beq.n	80010ee <MI2C_u8Transmit_DMA+0xf2>
	{
		/*********************************************************************************************/
		for (uint32_t i =0 ; i<=100;i++)
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	e005      	b.n	800102e <MI2C_u8Transmit_DMA+0x32>
		{
			Local_u8tmp=i;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i =0 ; i<=100;i++)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	3301      	adds	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	d9f6      	bls.n	8001022 <MI2C_u8Transmit_DMA+0x26>
		}

		/* Enable event interrupt*/
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |= 1 << I2C_ITEVTEN_SHIFT;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MI2C_u8Transmit_DMA+0x100>)
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <MI2C_u8Transmit_DMA+0x100>)
 800104a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800104e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001052:	605a      	str	r2, [r3, #4]

		/* Enable DMA request */
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |=  (1 << I2C_CR2_DMAEN);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MI2C_u8Transmit_DMA+0x100>)
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MI2C_u8Transmit_DMA+0x100>)
 800106a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001072:	605a      	str	r2, [r3, #4]

		/* Generate Start*/
		MI2C_u8GenerateStart( I2Cconfig->I2Cindex ,FUNC_STATE_ENABLE ,  REPEAT_DISABBLE);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f949 	bl	8001314 <MI2C_u8GenerateStart>
		while( (MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , FLAG_EV5)==FLAG_RESET));
 8001082:	bf00      	nop
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8ae 	bl	80011ec <MI2C_u8GetFlagStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f6      	beq.n	8001084 <MI2C_u8Transmit_DMA+0x88>


		/* Send slave Address*/
		MI2C_u8SendAddress( I2Cconfig->I2Cindex ,Copy_u16SlaveAdd , TRANSMITTER);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	8979      	ldrh	r1, [r7, #10]
 800109c:	2200      	movs	r2, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f972 	bl	8001388 <MI2C_u8SendAddress>
		while( MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , FLAG_EV6)==FLAG_SET);
 80010a4:	bf00      	nop
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2102      	movs	r1, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f89d 	bl	80011ec <MI2C_u8GetFlagStatus>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d0f6      	beq.n	80010a6 <MI2C_u8Transmit_DMA+0xaa>
		/*********************************************************************************************/
		while( MI2C_u8GetFlagStatus(  I2Cconfig->I2Cindex , MASTER_BYTE_TRANSMITTER)==FLAG_RESET);
 80010b8:	bf00      	nop
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2103      	movs	r1, #3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f893 	bl	80011ec <MI2C_u8GetFlagStatus>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f6      	beq.n	80010ba <MI2C_u8Transmit_DMA+0xbe>

		/* Start transmission*/
		DMA_u8StartTransfer(&(I2Cconfig->DMA_Tx),(uint32_t *)Copy_pu8Data, (uint32_t *)&(I2C_Index[I2Cconfig->I2Cindex]->DR),Copy_u32Size);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f103 001c 	add.w	r0, r3, #28
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MI2C_u8Transmit_DMA+0x100>)
 80010da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010de:	f103 0210 	add.w	r2, r3, #16
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f7ff fbcc 	bl	8000884 <DMA_u8StartTransfer>
 80010ec:	e001      	b.n	80010f2 <MI2C_u8Transmit_DMA+0xf6>


	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80010ee:	2300      	movs	r3, #0
 80010f0:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8ErrorState ;
 80010f2:	7ffb      	ldrb	r3, [r7, #31]

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000028 	.word	0x20000028

08001100 <MI2C_u8Receive_DMA>:

uint8_t MI2C_u8Receive_DMA( I2Cconfig_t* I2Cconfig , uint16_t Copy_u16SlaveAdd ,uint8_t *Copy_pu8Data , uint32_t Copy_u32Size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	817b      	strh	r3, [r7, #10]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001110:	2301      	movs	r3, #1
 8001112:	75fb      	strb	r3, [r7, #23]
	volatile uint8_t Local_u8tmp ;
	if ( I2Cconfig != NULL &&  Copy_pu8Data != NULL)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d05e      	beq.n	80011d8 <MI2C_u8Receive_DMA+0xd8>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d05b      	beq.n	80011d8 <MI2C_u8Receive_DMA+0xd8>
	{
		/* Enable event interrupt*/
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |= 1 << I2C_ITEVTEN_SHIFT;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MI2C_u8Receive_DMA+0xe8>)
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MI2C_u8Receive_DMA+0xe8>)
 8001136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800113a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800113e:	605a      	str	r2, [r3, #4]

		/* Enable DMA request */
		I2C_Index[I2Cconfig->I2Cindex]->CR2 |=  (1 << I2C_CR2_DMAEN);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MI2C_u8Receive_DMA+0xe8>)
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MI2C_u8Receive_DMA+0xe8>)
 8001156:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800115a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115e:	605a      	str	r2, [r3, #4]

		/*********************************************************************************************/
		MI2C_u8GenerateStart( I2Cconfig->I2Cindex ,FUNC_STATE_ENABLE ,  REPEAT_DISABBLE);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f8d3 	bl	8001314 <MI2C_u8GenerateStart>
		while( MI2C_u8GetFlagStatus( I2Cconfig->I2Cindex , FLAG_EV5)==FLAG_RESET);
 800116e:	bf00      	nop
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f838 	bl	80011ec <MI2C_u8GetFlagStatus>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f6      	beq.n	8001170 <MI2C_u8Receive_DMA+0x70>
		MI2C_u8SendAddress(I2Cconfig->I2Cindex ,Copy_u16SlaveAdd , RECEIVER);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	8979      	ldrh	r1, [r7, #10]
 8001188:	2201      	movs	r2, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f8fc 	bl	8001388 <MI2C_u8SendAddress>
		while( MI2C_u8GetFlagStatus( I2Cconfig->I2Cindex , FLAG_EV6)==FLAG_SET);
 8001190:	bf00      	nop
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2102      	movs	r1, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f827 	bl	80011ec <MI2C_u8GetFlagStatus>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d0f6      	beq.n	8001192 <MI2C_u8Receive_DMA+0x92>
		/*********************************************************************************************/
		MI2C_u8AcknowledgeConfig(I2Cconfig->I2Cindex , ACK_ENABLE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f920 	bl	80013f0 <MI2C_u8AcknowledgeConfig>


		/*********************************************************************************************/
		if (Copy_u32Size >= 1 )
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d012      	beq.n	80011dc <MI2C_u8Receive_DMA+0xdc>
		{

			/* Start transmission*/
			DMA_u8StartTransfer(&(I2Cconfig->DMA_Rx),(uint32_t *)&(I2C_Index[I2Cconfig->I2Cindex]->DR),(uint32_t *)Copy_pu8Data ,Copy_u32Size);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f103 000c 	add.w	r0, r3, #12
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MI2C_u8Receive_DMA+0xe8>)
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	f103 0110 	add.w	r1, r3, #16
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	f7ff fb57 	bl	8000884 <DMA_u8StartTransfer>
		if (Copy_u32Size >= 1 )
 80011d6:	e001      	b.n	80011dc <MI2C_u8Receive_DMA+0xdc>

		}
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80011d8:	2300      	movs	r3, #0
 80011da:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]

}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000028 	.word	0x20000028

080011ec <MI2C_u8GetFlagStatus>:
 *
 *
 ******************************************************************************
 */
static FlagStatus_t MI2C_u8GetFlagStatus( I2Cindex_t Copy_I2Cindex , Flag_t Copy_Flag)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	volatile uint32_t Local_u32DummyRead;
	FlagStatus_t Local_BitStatus = FLAG_RESET ;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
	uint32_t Local_u32Flag1 , Local_u32Flag2 , Local_u32LastEvent ;
	switch (Copy_Flag)
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d87a      	bhi.n	80012fc <MI2C_u8GetFlagStatus+0x110>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <MI2C_u8GetFlagStatus+0x20>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001229 	.word	0x08001229
 8001210:	08001243 	.word	0x08001243
 8001214:	0800125b 	.word	0x0800125b
 8001218:	08001281 	.word	0x08001281
 800121c:	080012bb 	.word	0x080012bb
 8001220:	080012bb 	.word	0x080012bb
 8001224:	080012d5 	.word	0x080012d5
	{
	case FLAG_BUSY :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR2 ,I2C_SR2_BUSY))
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a38      	ldr	r2, [pc, #224]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	085b      	lsrs	r3, r3, #1
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d158      	bne.n	80012ee <MI2C_u8GetFlagStatus+0x102>
		{
			Local_BitStatus = FLAG_SET ;
 800123c:	2301      	movs	r3, #1
 800123e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001240:	e055      	b.n	80012ee <MI2C_u8GetFlagStatus+0x102>
	}
	case FLAG_EV5 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_SB))
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d14e      	bne.n	80012f2 <MI2C_u8GetFlagStatus+0x106>
		{
			Local_BitStatus = FLAG_SET ;
 8001254:	2301      	movs	r3, #1
 8001256:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8001258:	e04b      	b.n	80012f2 <MI2C_u8GetFlagStatus+0x106>
	}
	case FLAG_EV6 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_ADDR))
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a2b      	ldr	r2, [pc, #172]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <MI2C_u8GetFlagStatus+0x86>
		{
			Local_BitStatus = FLAG_SET ;
 800126e:	2301      	movs	r3, #1
 8001270:	77fb      	strb	r3, [r7, #31]
		}
		Local_u32DummyRead = I2C_Index[Copy_I2Cindex]->SR2 ;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	60fb      	str	r3, [r7, #12]
		break;
 800127e:	e03d      	b.n	80012fc <MI2C_u8GetFlagStatus+0x110>
	}
	case MASTER_BYTE_TRANSMITTER :
	{
		Local_u32Flag1 = I2C_Index[Copy_I2Cindex]->SR1 ;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	61bb      	str	r3, [r7, #24]
		Local_u32Flag2 = I2C_Index[Copy_I2Cindex]->SR2 ;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	617b      	str	r3, [r7, #20]
		Local_u32Flag2 = Local_u32Flag2 << I2C_BYTE_TRANSMITTER_MASK ;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	617b      	str	r3, [r7, #20]
		Local_u32LastEvent = (Local_u32Flag1 | Local_u32Flag2) & ((uint32_t)I2C_MASTER_BYTE_TRANSMITTER_MASK);
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012a8:	613b      	str	r3, [r7, #16]
		if ( (Local_u32LastEvent & I2C_EVENT_MASTER_BYTE_TRANSMITTER) == I2C_EVENT_MASTER_BYTE_TRANSMITTER)
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MI2C_u8GetFlagStatus+0x124>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <MI2C_u8GetFlagStatus+0x124>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <MI2C_u8GetFlagStatus+0xce>
		{
			Local_BitStatus = FLAG_SET ;
 80012b6:	2301      	movs	r3, #1
 80012b8:	77fb      	strb	r3, [r7, #31]
		}
	}
	case FLAG_EV8_1 :
	case FLAG_EV8 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_TxE))
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	09db      	lsrs	r3, r3, #7
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d113      	bne.n	80012f6 <MI2C_u8GetFlagStatus+0x10a>
		{
			Local_BitStatus = FLAG_SET ;
 80012ce:	2301      	movs	r3, #1
 80012d0:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80012d2:	e010      	b.n	80012f6 <MI2C_u8GetFlagStatus+0x10a>
	}
	case FLAG_EV7 :
	{
		if (FLAG_SET ==GET_BIT(I2C_Index[Copy_I2Cindex]->SR1 ,I2C_SR1_RxNE))
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4a0d      	ldr	r2, [pc, #52]	; (800130c <MI2C_u8GetFlagStatus+0x120>)
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	099b      	lsrs	r3, r3, #6
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <MI2C_u8GetFlagStatus+0x10e>
		{
			Local_BitStatus = FLAG_SET ;
 80012e8:	2301      	movs	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80012ec:	e005      	b.n	80012fa <MI2C_u8GetFlagStatus+0x10e>
		break;
 80012ee:	bf00      	nop
 80012f0:	e004      	b.n	80012fc <MI2C_u8GetFlagStatus+0x110>
		break;
 80012f2:	bf00      	nop
 80012f4:	e002      	b.n	80012fc <MI2C_u8GetFlagStatus+0x110>
		break;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <MI2C_u8GetFlagStatus+0x110>
		break;
 80012fa:	bf00      	nop
	}
	}

	return  Local_BitStatus ;
 80012fc:	7ffb      	ldrb	r3, [r7, #31]

}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000028 	.word	0x20000028
 8001310:	00070080 	.word	0x00070080

08001314 <MI2C_u8GenerateStart>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8GenerateStart( I2Cindex_t Copy_I2Cindex , FunctionalState_t Copy_FunctionalState , StartRepeat_t Copy_StartRepeat)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	460b      	mov	r3, r1
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_FunctionalState <= FUNC_STATE_ENABLE &&  Copy_StartRepeat <= REPEAT_ENABLE )
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d820      	bhi.n	8001372 <MI2C_u8GenerateStart+0x5e>
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d81d      	bhi.n	8001372 <MI2C_u8GenerateStart+0x5e>
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d81a      	bhi.n	8001372 <MI2C_u8GenerateStart+0x5e>
	{
		//		if ( Copy_StartRepeat != REPEAT_ENABLE )
		//		{
		//			while(FLAG_SET== MI2C_u8GetFlagStatus( I2C_1 , FLAG_BUSY));
		//		}
		I2C_Index[Copy_I2Cindex]->CR1  &=~ ( I2C_START_MASK       << I2C_CR1_START );
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <MI2C_u8GenerateStart+0x70>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <MI2C_u8GenerateStart+0x70>)
 800134a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001352:	601a      	str	r2, [r3, #0]
		I2C_Index[Copy_I2Cindex]->CR1  |=  ( Copy_FunctionalState << I2C_CR1_START );
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MI2C_u8GenerateStart+0x70>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4618      	mov	r0, r3
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4907      	ldr	r1, [pc, #28]	; (8001384 <MI2C_u8GenerateStart+0x70>)
 8001368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136c:	4302      	orrs	r2, r0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e001      	b.n	8001376 <MI2C_u8GenerateStart+0x62>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000028 	.word	0x20000028

08001388 <MI2C_u8SendAddress>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8SendAddress( I2Cindex_t Copy_I2Cindex , uint16_t Copy_u16SlaveAddress , Direction_t Copy_Direction )
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_u16SlaveAddress = Copy_u16SlaveAddress;
 800139e:	88bb      	ldrh	r3, [r7, #4]
 80013a0:	81bb      	strh	r3, [r7, #12]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_Direction <= RECEIVER  )
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d818      	bhi.n	80013da <MI2C_u8SendAddress+0x52>
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d815      	bhi.n	80013da <MI2C_u8SendAddress+0x52>
	{
		Local_u16SlaveAddress= (Local_u16SlaveAddress <<I2C_SLAVE_ADDRESS_MASK);
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	81bb      	strh	r3, [r7, #12]
		if ( Copy_Direction ==  RECEIVER )
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d104      	bne.n	80013c4 <MI2C_u8SendAddress+0x3c>
		{

			Local_u16SlaveAddress |= (I2C_SLAVE_ADDRESS_MASK  <<I2C_SLAVE_ADDRESS_RX_TX_BIT);
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	81bb      	strh	r3, [r7, #12]
 80013c2:	e003      	b.n	80013cc <MI2C_u8SendAddress+0x44>
		}
		else
		{
			Local_u16SlaveAddress &=~ (I2C_SLAVE_ADDRESS_MASK <<I2C_SLAVE_ADDRESS_RX_TX_BIT);
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	81bb      	strh	r3, [r7, #12]
		}
		I2C_Index[Copy_I2Cindex]->DR = Local_u16SlaveAddress;
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <MI2C_u8SendAddress+0x64>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	89ba      	ldrh	r2, [r7, #12]
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	e001      	b.n	80013de <MI2C_u8SendAddress+0x56>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	20000028 	.word	0x20000028

080013f0 <MI2C_u8AcknowledgeConfig>:
 *
 *
 ******************************************************************************
 */
static uint8_t MI2C_u8AcknowledgeConfig( I2Cindex_t Copy_I2Cindex , Acknowledge_t Copy_Acknowledge )
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
	if ( Copy_I2Cindex <= I2C_3 &&  Copy_Acknowledge <= ACK_ENABLE )
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d81d      	bhi.n	8001446 <MI2C_u8AcknowledgeConfig+0x56>
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d81a      	bhi.n	8001446 <MI2C_u8AcknowledgeConfig+0x56>
	{
		I2C_Index[Copy_I2Cindex]->CR1  &=~ ( I2C_ACK_MASK     << I2C_CR1_ACK );
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <MI2C_u8AcknowledgeConfig+0x68>)
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <MI2C_u8AcknowledgeConfig+0x68>)
 800141e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001426:	601a      	str	r2, [r3, #0]
		I2C_Index[Copy_I2Cindex]->CR1  |=  ( Copy_Acknowledge << I2C_CR1_ACK );
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <MI2C_u8AcknowledgeConfig+0x68>)
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	4618      	mov	r0, r3
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4907      	ldr	r1, [pc, #28]	; (8001458 <MI2C_u8AcknowledgeConfig+0x68>)
 800143c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001440:	4302      	orrs	r2, r0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e001      	b.n	800144a <MI2C_u8AcknowledgeConfig+0x5a>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20000028 	.word	0x20000028

0800145c <MI2C_u8ACallbackTx>:

void MI2C_u8ACallbackTx(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	I2C1->CR1  &=~ ( I2C_STOP_MASK      << I2C_CR1_STOP );
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MI2C_u8ACallbackTx+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <MI2C_u8ACallbackTx+0x28>)
 8001466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
	I2C1->CR1  |=  ( 1 << I2C_CR1_STOP );
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <MI2C_u8ACallbackTx+0x28>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <MI2C_u8ACallbackTx+0x28>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400

08001488 <MI2C_u8ACallbackRx>:

void MI2C_u8ACallbackRx(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
	uint32_t Local_u8tmp;
	I2C1->CR1  &=~ ( I2C_ACK_MASK     << I2C_CR1_ACK );
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 8001494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001498:	6013      	str	r3, [r2, #0]
	I2C1->CR1  |=  ( 0 << I2C_CR1_ACK );
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 800149c:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6013      	str	r3, [r2, #0]

	I2C1->CR1  &=~ ( I2C_STOP_MASK      << I2C_CR1_STOP );
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ac:	6013      	str	r3, [r2, #0]
	I2C1->CR1  |=  ( 1 << I2C_CR1_STOP );
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6013      	str	r3, [r2, #0]

	for (uint32_t i =0 ; i<=100;i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e004      	b.n	80014ca <MI2C_u8ACallbackRx+0x42>
	{
		Local_u8tmp=i;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
	for (uint32_t i =0 ; i<=100;i++)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d9f7      	bls.n	80014c0 <MI2C_u8ACallbackRx+0x38>
	}
	I2C1->CR1  &=~ ( I2C_ACK_MASK     << I2C_CR1_ACK );
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
	I2C1->CR1  |=  ( 1 << I2C_CR1_ACK );
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <MI2C_u8ACallbackRx+0x6c>)
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e6:	6013      	str	r3, [r2, #0]

}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40005400 	.word	0x40005400

080014f8 <MNVIC_u8EnableInterrupt>:
 *
 ******************************************************************************
 */

uint8_t   MNVIC_u8EnableInterrupt    ( IntNumber_t Copy_IntNumber )
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
	if ( Copy_IntNumber <= NVIC_FMPI2C1_error )
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b60      	cmp	r3, #96	; 0x60
 800150a:	d80f      	bhi.n	800152c <MNVIC_u8EnableInterrupt+0x34>
	{
		uint8_t Local_u8Reg = Copy_IntNumber/NVIC_BIT_REG_ACCESS;
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Bit = Copy_IntNumber%NVIC_BIT_REG_ACCESS;
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	737b      	strb	r3, [r7, #13]
		NVIC -> ISER[Local_u8Reg] = ( NVIC_BIT_MASK << Local_u8Bit );
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	2201      	movs	r2, #1
 800151e:	fa02 f103 	lsl.w	r1, r2, r3
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <MNVIC_u8EnableInterrupt+0x48>)
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800152a:	e001      	b.n	8001530 <MNVIC_u8EnableInterrupt+0x38>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <RCC_u8SetClksts>:
 * @param[in]  ClkType  : the clock what it is want to change his state
 * @param[in]  State : the state which the user wants the clock to be OFForON
 * @retval ErrorStatus
 */
uint8_t RCC_u8SetClksts(CLKsSYS_type_ty ClkType,STATE_ty State)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ERROR_STATE_OK;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
	uint32_t Polling=0;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
	while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
	{
    	Polling++;
    }
	*/
	switch (State)
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01e      	beq.n	80015a0 <RCC_u8SetClksts+0x5c>
 8001562:	2b01      	cmp	r3, #1
 8001564:	d128      	bne.n	80015b8 <RCC_u8SetClksts+0x74>
	{
	case STATE_ON:
		RCC->RCC_CR |=(1 << ClkType);
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <RCC_u8SetClksts+0x98>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <RCC_u8SetClksts+0x98>)
 8001576:	430b      	orrs	r3, r1
 8001578:	6013      	str	r3, [r2, #0]
		while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
 800157a:	e002      	b.n	8001582 <RCC_u8SetClksts+0x3e>
		{
        	Polling++;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3301      	adds	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
		while ((((RCC->RCC_CR,CLKYYPE_FLAG) & 1)!=State)&&(Polling!=CLKYYPE_TIMEOUT))
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <RCC_u8SetClksts+0x98>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	3301      	adds	r3, #1
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	429a      	cmp	r2, r3
 8001592:	d014      	beq.n	80015be <RCC_u8SetClksts+0x7a>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f24c 3250 	movw	r2, #50000	; 0xc350
 800159a:	4293      	cmp	r3, r2
 800159c:	d1ee      	bne.n	800157c <RCC_u8SetClksts+0x38>
    	}
		break;
 800159e:	e00e      	b.n	80015be <RCC_u8SetClksts+0x7a>
	case STATE_OFF:
		RCC->RCC_CR &=~(1 << ClkType);
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <RCC_u8SetClksts+0x98>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	79fa      	ldrb	r2, [r7, #7]
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	4611      	mov	r1, r2
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <RCC_u8SetClksts+0x98>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	6013      	str	r3, [r2, #0]
		/*NO need for polling*/
		break;
 80015b6:	e003      	b.n	80015c0 <RCC_u8SetClksts+0x7c>
	default:
		Local_ErrorState= ERROR_STATE_NOK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
		break;
 80015bc:	e000      	b.n	80015c0 <RCC_u8SetClksts+0x7c>
		break;
 80015be:	bf00      	nop
	}
	if(Polling==CLKYYPE_TIMEOUT)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <RCC_u8SetClksts+0x8a>
	{
		Local_ErrorState = ERROR_STATE_TIME_OUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40023800 	.word	0x40023800

080015e0 <RCC_SetSysClk>:
 * @brief the funtion change the system clock source, according to input parameter
 * @param[in] ClkType : the clock which uaer want to be a system clook
 * @retval Error status
*/
uint8_t RCC_SetSysClk(CLK_type_ty ClkType)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_ErrorState = ERROR_STATE_OK;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
	if (ClkType <= PLL_R)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d80c      	bhi.n	800160e <RCC_SetSysClk+0x2e>
	{
		RCC->RCC_CFGR &=~(TWO_BITS_MASKING << RCC_CFGR_SW_0);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <RCC_SetSysClk+0x40>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <RCC_SetSysClk+0x40>)
 80015fa:	f023 030b 	bic.w	r3, r3, #11
 80015fe:	6093      	str	r3, [r2, #8]
		RCC->RCC_CFGR |=(ClkType << RCC_CFGR_SW_0);
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <RCC_SetSysClk+0x40>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4906      	ldr	r1, [pc, #24]	; (8001620 <RCC_SetSysClk+0x40>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
 800160c:	e001      	b.n	8001612 <RCC_SetSysClk+0x32>
	}
	else
	{
		Local_ErrorState=ERROR_STATE_NOK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800

08001624 <RCC_voidAHB1EnablePerapheralClock>:


void RCC_voidAHB1EnablePerapheralClock(AHB1peripheral_ty Copy_Perapheral)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_AHB1ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <RCC_voidAHB1EnablePerapheralClock+0x28>)
 8001630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2101      	movs	r1, #1
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	4904      	ldr	r1, [pc, #16]	; (800164c <RCC_voidAHB1EnablePerapheralClock+0x28>)
 800163c:	4313      	orrs	r3, r2
 800163e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	.word	0x40023800

08001650 <RCC_voidAPB1EnablePerapheralClock>:
{
	RCC->RCC_APB2ENR &=~(ONE_BIT_MASKING<<Copy_Perapheral);
}

void RCC_voidAPB1EnablePerapheralClock(APB1peripheral_ty Copy_Perapheral)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB1ENR |=(ONE_BIT_MASKING<<Copy_Perapheral);
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <RCC_voidAPB1EnablePerapheralClock+0x28>)
 800165c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	4904      	ldr	r1, [pc, #16]	; (8001678 <RCC_voidAPB1EnablePerapheralClock+0x28>)
 8001668:	4313      	orrs	r3, r2
 800166a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40023800 	.word	0x40023800

0800167c <HRTC_u8Init>:
 *
 *
 ******************************************************************************
 */
void HRTC_u8Init( I2Cconfig_t *Copy_I2CCnfg )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
//	DMA_u8Init(&I2C_DMA_Tx);
//	DMA_u8Init(&I2C_DMA_Rx);
//
//	MI2C_u8SetConfiguration(&I2cCinfig);
	/*********************************************************************************************/
	RTC_voidWriteRegister( Copy_I2CCnfg ,RTC_SEC_MASK , RTC_ADDRESS_SEC );
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f90c 	bl	80018a6 <RTC_voidWriteRegister>
	/*********************************************************************************************/
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HRTC_voidSetCurrentTime>:
 *
 *
 ******************************************************************************
 */
void HRTC_voidSetCurrentTime ( I2Cconfig_t *Copy_I2CCnfg,RTC_time_t *RTC_time )
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	/*********************************************************************************************/
	uint8_t Local_u8Second = BinaryToBCD(RTC_time->seconds);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f92d 	bl	8001904 <BinaryToBCD>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73bb      	strb	r3, [r7, #14]
	Local_u8Second &= ~(RTC_SEC_CH_MASK<<RTC_SEC_CH_BIT);
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016b4:	73bb      	strb	r3, [r7, #14]
	RTC_voidWriteRegister(Copy_I2CCnfg,Local_u8Second , RTC_ADDRESS_SEC );
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f8f2 	bl	80018a6 <RTC_voidWriteRegister>
	/*********************************************************************************************/
	RTC_voidWriteRegister(Copy_I2CCnfg,BinaryToBCD(RTC_time->minutes) , RTC_ADDRESS_MIN );
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	785b      	ldrb	r3, [r3, #1]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f91c 	bl	8001904 <BinaryToBCD>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8e7 	bl	80018a6 <RTC_voidWriteRegister>
	/*********************************************************************************************/
	uint8_t Local_u8Hours = BinaryToBCD(RTC_time->hours);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f911 	bl	8001904 <BinaryToBCD>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
	if ( RTC_time-> time_format == _24HRS )
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d104      	bne.n	80016f8 <HRTC_voidSetCurrentTime+0x62>
	{
		Local_u8Hours &= ~(RTC_HRS_12_24_MASK<<RTC_HRS_12_24_BIT);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e010      	b.n	800171a <HRTC_voidSetCurrentTime+0x84>
	}
	else
	{
		Local_u8Hours |= (RTC_HRS_12_24_MASK<<RTC_HRS_12_24_BIT);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	73fb      	strb	r3, [r7, #15]
		if (RTC_time->time_format == _12HRS_PM)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	78db      	ldrb	r3, [r3, #3]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d104      	bne.n	8001712 <HRTC_voidSetCurrentTime+0x7c>
		{
			Local_u8Hours |=   (RTC_HRS_PM_AM_MASK<<RTC_HRS_PM_AM_BIT);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e003      	b.n	800171a <HRTC_voidSetCurrentTime+0x84>
		}
		else
		{
			Local_u8Hours &=  ~ (RTC_HRS_PM_AM_MASK<<RTC_HRS_PM_AM_BIT);
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	f023 0320 	bic.w	r3, r3, #32
 8001718:	73fb      	strb	r3, [r7, #15]
		}
	}
	RTC_voidWriteRegister(Copy_I2CCnfg,Local_u8Hours , RTC_ADDRESS_HRS );
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2202      	movs	r2, #2
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f8c0 	bl	80018a6 <RTC_voidWriteRegister>
	/*********************************************************************************************/
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HRTC_voidGetCurrentTime>:
 *
 *
 ******************************************************************************
 */
void HRTC_voidGetCurrentTime(I2Cconfig_t *Copy_I2CCnfg,RTC_time_t *RTC_time)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	/*********************************************************************************************/
	uint8_t Local_u8Second = RTC_voidReadRegister(Copy_I2CCnfg ,RTC_ADDRESS_SEC);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ca 	bl	80018d4 <RTC_voidReadRegister>
 8001740:	4603      	mov	r3, r0
 8001742:	73bb      	strb	r3, [r7, #14]
	Local_u8Second &= ~(RTC_SEC_CH_MASK<<RTC_SEC_CH_BIT);
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800174a:	73bb      	strb	r3, [r7, #14]
	RTC_time->seconds = BCDToBinary(Local_u8Second);
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f904 	bl	800195c <BCDToBinary>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	701a      	strb	r2, [r3, #0]
	/*********************************************************************************************/
	RTC_time->minutes = BCDToBinary(RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_MIN));
 800175c:	2101      	movs	r1, #1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8b8 	bl	80018d4 <RTC_voidReadRegister>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f8f8 	bl	800195c <BCDToBinary>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	705a      	strb	r2, [r3, #1]
	/*********************************************************************************************/
	uint8_t Local_u8Hours  = RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_HRS) ;
 8001774:	2102      	movs	r1, #2
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8ac 	bl	80018d4 <RTC_voidReadRegister>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
	if (  Local_u8Hours & (RTC_HRS_12_24_MASK << RTC_HRS_12_24_BIT ))
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <HRTC_voidGetCurrentTime+0x7e>
	{
		if (  Local_u8Hours & (RTC_HRS_PM_AM_MASK << RTC_HRS_PM_AM_BIT ) )
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HRTC_voidGetCurrentTime+0x6e>
		{

			RTC_time->time_format = _12HRS_PM;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	70da      	strb	r2, [r3, #3]
 800179a:	e002      	b.n	80017a2 <HRTC_voidGetCurrentTime+0x74>
		}
		else
		{
			RTC_time->time_format = _12HRS_AM;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	70da      	strb	r2, [r3, #3]

		}
		Local_u8Hours &= ~(RTC_HRS_12_24_PM_AM_MASK<<RTC_HRS_PM_AM_BIT);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e002      	b.n	80017b2 <HRTC_voidGetCurrentTime+0x84>
	}
	else
	{
		RTC_time->time_format = _24HRS ;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2202      	movs	r2, #2
 80017b0:	70da      	strb	r2, [r3, #3]

	}
	RTC_time->hours   = BCDToBinary(Local_u8Hours);
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f8d1 	bl	800195c <BCDToBinary>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	709a      	strb	r2, [r3, #2]
	/*********************************************************************************************/
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HRTC_voidSetCurrentDate>:
 *
 *
 ******************************************************************************
 */
void HRTC_voidSetCurrentDate(I2Cconfig_t *Copy_I2CCnfg ,RTC_date_t *RTC_date)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	RTC_voidWriteRegister( Copy_I2CCnfg,BinaryToBCD(RTC_date->date) ,  RTC_ADDRESS_DATE  );
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f893 	bl	8001904 <BinaryToBCD>
 80017de:	4603      	mov	r3, r0
 80017e0:	2204      	movs	r2, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f85e 	bl	80018a6 <RTC_voidWriteRegister>
	RTC_voidWriteRegister( Copy_I2CCnfg,BinaryToBCD(RTC_date->month),  RTC_ADDRESS_MONTH );
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f888 	bl	8001904 <BinaryToBCD>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2205      	movs	r2, #5
 80017f8:	4619      	mov	r1, r3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f853 	bl	80018a6 <RTC_voidWriteRegister>
	RTC_voidWriteRegister( Copy_I2CCnfg,BinaryToBCD(RTC_date->year) ,  RTC_ADDRESS_YEAR  );
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	789b      	ldrb	r3, [r3, #2]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f87d 	bl	8001904 <BinaryToBCD>
 800180a:	4603      	mov	r3, r0
 800180c:	2206      	movs	r2, #6
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f848 	bl	80018a6 <RTC_voidWriteRegister>
	RTC_voidWriteRegister( Copy_I2CCnfg,BinaryToBCD(RTC_date->day)  ,  RTC_ADDRESS_DAY   );
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f872 	bl	8001904 <BinaryToBCD>
 8001820:	4603      	mov	r3, r0
 8001822:	2203      	movs	r2, #3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f83d 	bl	80018a6 <RTC_voidWriteRegister>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HRTC_voidGetCurrentDate>:
 *
 *
 ******************************************************************************
 */
void HRTC_voidGetCurrentDate(I2Cconfig_t *Copy_I2CCnfg ,RTC_date_t *RTC_date)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	RTC_date->date   = BCDToBinary (RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_DATE));
 800183e:	2104      	movs	r1, #4
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f847 	bl	80018d4 <RTC_voidReadRegister>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f887 	bl	800195c <BCDToBinary>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	701a      	strb	r2, [r3, #0]
	RTC_date->month  = BCDToBinary (RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_MONTH));
 8001856:	2105      	movs	r1, #5
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f83b 	bl	80018d4 <RTC_voidReadRegister>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f87b 	bl	800195c <BCDToBinary>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	705a      	strb	r2, [r3, #1]
	RTC_date->year   = BCDToBinary (RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_YEAR));
 800186e:	2106      	movs	r1, #6
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f82f 	bl	80018d4 <RTC_voidReadRegister>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f86f 	bl	800195c <BCDToBinary>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	709a      	strb	r2, [r3, #2]
	RTC_date->day    = BCDToBinary (RTC_voidReadRegister(Copy_I2CCnfg,RTC_ADDRESS_DAY));
 8001886:	2103      	movs	r1, #3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f823 	bl	80018d4 <RTC_voidReadRegister>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f863 	bl	800195c <BCDToBinary>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	70da      	strb	r2, [r3, #3]
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <RTC_voidWriteRegister>:
 *
 *
 ******************************************************************************
 */
static void RTC_voidWriteRegister( I2Cconfig_t *Copy_I2CCnfg  ,uint8_t Copy_u8Value , uint8_t Copy_u8RegAddress )
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	4613      	mov	r3, r2
 80018b4:	70bb      	strb	r3, [r7, #2]
    uint8_t Local_Au8TransmitArray[2] ;
    Local_Au8TransmitArray[0] = Copy_u8RegAddress ;
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	733b      	strb	r3, [r7, #12]
    Local_Au8TransmitArray[1] = Copy_u8Value ;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	737b      	strb	r3, [r7, #13]
	MI2C_u8Transmit_DMA(Copy_I2CCnfg, RTC_I2C_SLAVE_ADDRESS, Local_Au8TransmitArray, 2);
 80018be:	f107 020c 	add.w	r2, r7, #12
 80018c2:	2302      	movs	r3, #2
 80018c4:	2168      	movs	r1, #104	; 0x68
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fb98 	bl	8000ffc <MI2C_u8Transmit_DMA>
//	MI2C_u8SendSynch ( RTC_I2C , RTC_I2C_SLAVE_ADDRESS , Local_Au8TransmitArray , 2 , STOP_ENABLE , REPEAT_DISABBLE );

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <RTC_voidReadRegister>:
 *
 *
 ******************************************************************************
 */
static uint8_t RTC_voidReadRegister( I2Cconfig_t *Copy_I2CCnfg  ,uint8_t Copy_u8RegAddress )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8Data ;
	MI2C_u8Transmit_DMA(Copy_I2CCnfg, RTC_I2C_SLAVE_ADDRESS, &Copy_u8RegAddress, 1);
 80018e0:	1cfa      	adds	r2, r7, #3
 80018e2:	2301      	movs	r3, #1
 80018e4:	2168      	movs	r1, #104	; 0x68
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fb88 	bl	8000ffc <MI2C_u8Transmit_DMA>
	MI2C_u8Receive_DMA(Copy_I2CCnfg, RTC_I2C_SLAVE_ADDRESS,&Local_u8Data , 1);
 80018ec:	f107 020f 	add.w	r2, r7, #15
 80018f0:	2301      	movs	r3, #1
 80018f2:	2168      	movs	r1, #104	; 0x68
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fc03 	bl	8001100 <MI2C_u8Receive_DMA>

//	MI2C_u8SendSynch    ( RTC_I2C , RTC_I2C_SLAVE_ADDRESS ,&Copy_u8RegAddress , 1 , STOP_ENABLE , REPEAT_DISABBLE);
//	MI2C_u8ReceiveSynch ( RTC_I2C , RTC_I2C_SLAVE_ADDRESS ,&Local_u8Data      , 1 , STOP_ENABLE , REPEAT_ENABLE  );
	return Local_u8Data ;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]

}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <BinaryToBCD>:
 *
 *
 ******************************************************************************
 */
static uint8_t BinaryToBCD (uint8_t Copy_u8BinaryVlaue )
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Tens , Local_u8Ones ,Local_u8BCD ;
	Local_u8BCD = Copy_u8BinaryVlaue ;
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	73fb      	strb	r3, [r7, #15]
	if ( Copy_u8BinaryVlaue >= 10 )
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d918      	bls.n	800194a <BinaryToBCD+0x46>
	{
		Local_u8Tens = Copy_u8BinaryVlaue/10;
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <BinaryToBCD+0x54>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	73bb      	strb	r3, [r7, #14]
		Local_u8Ones = Copy_u8BinaryVlaue%10;
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <BinaryToBCD+0x54>)
 8001928:	fba3 1302 	umull	r1, r3, r3, r2
 800192c:	08d9      	lsrs	r1, r3, #3
 800192e:	460b      	mov	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	737b      	strb	r3, [r7, #13]
		Local_u8BCD = (uint8_t)((Local_u8Tens<<4) | Local_u8Ones) ;
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	b25a      	sxtb	r2, r3
 8001940:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8BCD ;
 800194a:	7bfb      	ldrb	r3, [r7, #15]

}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	cccccccd 	.word	0xcccccccd

0800195c <BCDToBinary>:
 *
 *
 ******************************************************************************
 */
static uint8_t BCDToBinary (uint8_t Copy_u8BcdVlaue )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Tens , Local_u8Ones ,Local_u8Binary ;
	Local_u8Tens = (uint8_t)((Copy_u8BcdVlaue >> 4) * 10) ;
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
	Local_u8Ones = Copy_u8BcdVlaue & (uint8_t)0x0F;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	73bb      	strb	r3, [r7, #14]
	Local_u8Binary = Local_u8Tens + Local_u8Ones ;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	7bbb      	ldrb	r3, [r7, #14]
 8001982:	4413      	add	r3, r2
 8001984:	737b      	strb	r3, [r7, #13]
	return Local_u8Binary ;
 8001986:	7b7b      	ldrb	r3, [r7, #13]

}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <NumberToString>:
#include "RTC_interface.h"
/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
void NumberToString (uint8_t Copy_u8Number , uint8_t* Copy_pu8String )
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Number <10)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	d809      	bhi.n	80019ba <NumberToString+0x26>
	{
		Copy_pu8String[0]='0';
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2230      	movs	r2, #48	; 0x30
 80019aa:	701a      	strb	r2, [r3, #0]
		Copy_pu8String[1]=Copy_u8Number + 48;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	3230      	adds	r2, #48	; 0x30
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
	else if (Copy_u8Number >10 && Copy_u8Number <99 )
	{
		Copy_pu8String[0]= (Copy_u8Number / 10 )+ 48;
		Copy_pu8String[1]= (Copy_u8Number % 10 )+ 48;
	}
}
 80019b8:	e01f      	b.n	80019fa <NumberToString+0x66>
	else if (Copy_u8Number >10 && Copy_u8Number <99 )
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b0a      	cmp	r3, #10
 80019be:	d91c      	bls.n	80019fa <NumberToString+0x66>
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b62      	cmp	r3, #98	; 0x62
 80019c4:	d819      	bhi.n	80019fa <NumberToString+0x66>
		Copy_pu8String[0]= (Copy_u8Number / 10 )+ 48;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <NumberToString+0x74>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3330      	adds	r3, #48	; 0x30
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	701a      	strb	r2, [r3, #0]
		Copy_pu8String[1]= (Copy_u8Number % 10 )+ 48;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <NumberToString+0x74>)
 80019de:	fba3 1302 	umull	r1, r3, r3, r2
 80019e2:	08d9      	lsrs	r1, r3, #3
 80019e4:	460b      	mov	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	3230      	adds	r2, #48	; 0x30
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	cccccccd 	.word	0xcccccccd

08001a0c <DataToString>:
uint8_t *DataToString(RTC_date_t *Copy_Date)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	static uint8_t Local_Au8String[9];
	NumberToString(Copy_Date->date, &Local_Au8String[0]);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <DataToString+0x48>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffba 	bl	8001994 <NumberToString>
	Local_Au8String[2]='/';
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <DataToString+0x48>)
 8001a22:	222f      	movs	r2, #47	; 0x2f
 8001a24:	709a      	strb	r2, [r3, #2]
	NumberToString(Copy_Date->month,&Local_Au8String[3]);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	490b      	ldr	r1, [pc, #44]	; (8001a58 <DataToString+0x4c>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ffb1 	bl	8001994 <NumberToString>
	Local_Au8String[5]='/';
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <DataToString+0x48>)
 8001a34:	222f      	movs	r2, #47	; 0x2f
 8001a36:	715a      	strb	r2, [r3, #5]
	NumberToString(Copy_Date->year ,&Local_Au8String[6]);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <DataToString+0x50>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ffa8 	bl	8001994 <NumberToString>
	Local_Au8String[8]='\0';
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <DataToString+0x48>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	721a      	strb	r2, [r3, #8]
	return Local_Au8String;
 8001a4a:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <DataToString+0x48>)
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200000f4 	.word	0x200000f4
 8001a58:	200000f7 	.word	0x200000f7
 8001a5c:	200000fa 	.word	0x200000fa

08001a60 <TimeToString>:
uint8_t *TimeToString(RTC_time_t *Copy_Time)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	static uint8_t Local_Au8String[9];
	NumberToString(Copy_Time->hours  ,&Local_Au8String[0]);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <TimeToString+0x48>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff90 	bl	8001994 <NumberToString>
	Local_Au8String[2]=':';
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <TimeToString+0x48>)
 8001a76:	223a      	movs	r2, #58	; 0x3a
 8001a78:	709a      	strb	r2, [r3, #2]
	NumberToString(Copy_Time->minutes,&Local_Au8String[3]);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	490b      	ldr	r1, [pc, #44]	; (8001aac <TimeToString+0x4c>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff87 	bl	8001994 <NumberToString>
	Local_Au8String[5]=':';
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <TimeToString+0x48>)
 8001a88:	223a      	movs	r2, #58	; 0x3a
 8001a8a:	715a      	strb	r2, [r3, #5]
	NumberToString(Copy_Time->seconds,&Local_Au8String[6]);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <TimeToString+0x50>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff7e 	bl	8001994 <NumberToString>
	Local_Au8String[8]='\0';
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <TimeToString+0x48>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	721a      	strb	r2, [r3, #8]
	return Local_Au8String;
 8001a9e:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <TimeToString+0x48>)
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000100 	.word	0x20000100
 8001aac:	20000103 	.word	0x20000103
 8001ab0:	20000106 	.word	0x20000106

08001ab4 <GetDay>:
char *GetDay(uint8_t Copy_DayIndex)
{
 8001ab4:	b4b0      	push	{r4, r5, r7}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	char * Local_Au8Days[]={ "SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY", "SATURDAY" };
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <GetDay+0x38>)
 8001ac0:	f107 040c 	add.w	r4, r7, #12
 8001ac4:	461d      	mov	r5, r3
 8001ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return Local_Au8Days[Copy_DayIndex-1];
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3328      	adds	r3, #40	; 0x28
 8001ada:	443b      	add	r3, r7
 8001adc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	372c      	adds	r7, #44	; 0x2c
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bcb0      	pop	{r4, r5, r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	08002ecc 	.word	0x08002ecc

08001af0 <main>:

/***********************************************************************************/
int main(void)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b09d      	sub	sp, #116	; 0x74
 8001af4:	af00      	add	r7, sp, #0

	RCC_u8SetClksts(CLK_HSI,STATE_ON);
 8001af6:	2101      	movs	r1, #1
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fd23 	bl	8001544 <RCC_u8SetClksts>
	RCC_SetSysClk(HSI);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fd6e 	bl	80015e0 <RCC_SetSysClk>
	RCC_voidAHB1EnablePerapheralClock(AHB1_GPIOA);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fd8d 	bl	8001624 <RCC_voidAHB1EnablePerapheralClock>
    /****************************************************************************************************************************************************/
	RCC_voidAHB1EnablePerapheralClock(AHB1_GPIOB);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7ff fd8a 	bl	8001624 <RCC_voidAHB1EnablePerapheralClock>
	RCC_voidAPB1EnablePerapheralClock(APB1_I2C1);
 8001b10:	2015      	movs	r0, #21
 8001b12:	f7ff fd9d 	bl	8001650 <RCC_voidAPB1EnablePerapheralClock>

	RCC_voidAHB1EnablePerapheralClock(AHB1_DMA1);
 8001b16:	2015      	movs	r0, #21
 8001b18:	f7ff fd84 	bl	8001624 <RCC_voidAHB1EnablePerapheralClock>


	/*********************************************************************************************/
	GPIO_PinConfig_T sda ={RTC_I2C_PORT , RTC_I2C_SDA_PIN , ALTER_FUNC , SPEED_FAST , OPEN_DRAIN , RTC_I2C_PULL , AF4};
 8001b1c:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <main+0x1ec>)
 8001b1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b26:	6018      	str	r0, [r3, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	8019      	strh	r1, [r3, #0]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	0c0a      	lsrs	r2, r1, #16
 8001b30:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&sda);
 8001b32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f850 	bl	8000bdc <GPIO_u8PinInit>
	GPIO_PinConfig_T scl ={RTC_I2C_PORT , RTC_I2C_SCL_PIN , ALTER_FUNC , SPEED_FAST , OPEN_DRAIN , RTC_I2C_PULL , AF4};
 8001b3c:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <main+0x1f0>)
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b46:	6018      	str	r0, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	8019      	strh	r1, [r3, #0]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	0c0a      	lsrs	r2, r1, #16
 8001b50:	701a      	strb	r2, [r3, #0]
	GPIO_u8PinInit(&scl);
 8001b52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f840 	bl	8000bdc <GPIO_u8PinInit>
	/*********************************************************************************************/

	I2Cconfig_t I2cCinfig ={RTC_I2C,SM,SCL_SM_100K,STRETCHING_ENABLE,I2C_MODE,ACK_ENABLE,ENGC_ENABLE};
 8001b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b60:	222c      	movs	r2, #44	; 0x2c
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f9ed 	bl	8001f44 <memset>
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <main+0x1f4>)
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	DMA_Cnfg_T I2C_DMA_Rx =
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001b94:	2302      	movs	r3, #2
 8001b96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ba0:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <main+0x1f8>)
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			.SrcDestMode = PERIPH_TO_MEM,
			.StreamNum = STREAM0,
			.TransferMode = DIRECT_MODE
	};

	DMA_Cnfg_T I2C_DMA_Tx =
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	747b      	strb	r3, [r7, #17]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	757b      	strb	r3, [r7, #21]
 8001bba:	2307      	movs	r3, #7
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	763b      	strb	r3, [r7, #24]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	767b      	strb	r3, [r7, #25]
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	76fb      	strb	r3, [r7, #27]
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <main+0x1fc>)
 8001bcc:	61fb      	str	r3, [r7, #28]
			.StreamNum = STREAM7,
			.TransferMode = DIRECT_MODE
	};


	I2cCinfig.DMA_Rx = I2C_DMA_Rx;
 8001bce:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	I2cCinfig.DMA_Tx = I2C_DMA_Tx;
 8001bdc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DMA_u8Init(&I2C_DMA_Tx);
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fb5e 	bl	80002b0 <DMA_u8Init>
	DMA_u8Init(&I2C_DMA_Rx);
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fb59 	bl	80002b0 <DMA_u8Init>

	MI2C_u8SetConfiguration(&I2cCinfig);
 8001bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f932 	bl	8000e6c <MI2C_u8SetConfiguration>

	MNVIC_u8EnableInterrupt(NVIC_DMA1_Stream0);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f7ff fc75 	bl	80014f8 <MNVIC_u8EnableInterrupt>
	MNVIC_u8EnableInterrupt(NVIC_DMA1_Stream7);
 8001c0e:	202f      	movs	r0, #47	; 0x2f
 8001c10:	f7ff fc72 	bl	80014f8 <MNVIC_u8EnableInterrupt>

	RTC_time_t   SetTime,GetTime;
	RTC_date_t   SetDate,GetDate;
	HRTC_u8Init(&I2cCinfig);
 8001c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd2f 	bl	800167c <HRTC_u8Init>




	SetDate.day = MONDAY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	71fb      	strb	r3, [r7, #7]
	SetDate.date = 28;
 8001c22:	231c      	movs	r3, #28
 8001c24:	713b      	strb	r3, [r7, #4]
	SetDate.month = 8;
 8001c26:	2308      	movs	r3, #8
 8001c28:	717b      	strb	r3, [r7, #5]
	SetDate.year = 23;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	71bb      	strb	r3, [r7, #6]
	HRTC_voidSetCurrentDate(&I2cCinfig,&SetDate);
 8001c2e:	1d3a      	adds	r2, r7, #4
 8001c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fdc7 	bl	80017ca <HRTC_voidSetCurrentDate>

	SetTime.hours = 9;
 8001c3c:	2309      	movs	r3, #9
 8001c3e:	73bb      	strb	r3, [r7, #14]
	SetTime.minutes = 47;
 8001c40:	232f      	movs	r3, #47	; 0x2f
 8001c42:	737b      	strb	r3, [r7, #13]
	SetTime.seconds = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	733b      	strb	r3, [r7, #12]
	SetTime.time_format = _12HRS_AM;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
	HRTC_voidSetCurrentTime(&I2cCinfig,&SetTime);
 8001c4c:	f107 020c 	add.w	r2, r7, #12
 8001c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd1d 	bl	8001696 <HRTC_voidSetCurrentTime>


	for(;;)
	{
			HRTC_voidGetCurrentDate(&I2cCinfig,&GetDate);
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fde5 	bl	8001834 <HRTC_voidGetCurrentDate>
			HRTC_voidGetCurrentTime(&I2cCinfig,&GetTime);
 8001c6a:	f107 0208 	add.w	r2, r7, #8
 8001c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fd5a 	bl	800172e <HRTC_voidGetCurrentTime>
			uint8_t *am_or_pm ;
			if ( GetTime.time_format != _24HRS )
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d013      	beq.n	8001ca8 <main+0x1b8>
			{
				if ( GetTime.time_format == _12HRS_AM )
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <main+0x19c>
				{
					am_or_pm="AM";
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <main+0x200>)
 8001c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c8a:	e001      	b.n	8001c90 <main+0x1a0>
				}
				else
				{
					am_or_pm="PM";
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <main+0x204>)
 8001c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				printf("Current Time = %s %s\n",TimeToString(&GetTime),am_or_pm);
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fee3 	bl	8001a60 <TimeToString>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <main+0x208>)
 8001ca2:	f000 f957 	bl	8001f54 <iprintf>
 8001ca6:	e009      	b.n	8001cbc <main+0x1cc>
			}
			else
			{
				printf("Current Time = %s\n",TimeToString(&GetTime));
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fed7 	bl	8001a60 <TimeToString>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4811      	ldr	r0, [pc, #68]	; (8001cfc <main+0x20c>)
 8001cb8:	f000 f94c 	bl	8001f54 <iprintf>
			}
			printf("Current Data = %s <%s>\n",DataToString(&GetDate),GetDay(GetDate.day) );
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fea4 	bl	8001a0c <DataToString>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fef3 	bl	8001ab4 <GetDay>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <main+0x210>)
 8001cd6:	f000 f93d 	bl	8001f54 <iprintf>
	{
 8001cda:	e7bf      	b.n	8001c5c <main+0x16c>
 8001cdc:	08002f34 	.word	0x08002f34
 8001ce0:	08002f3c 	.word	0x08002f3c
 8001ce4:	000186a0 	.word	0x000186a0
 8001ce8:	08001489 	.word	0x08001489
 8001cec:	0800145d 	.word	0x0800145d
 8001cf0:	08002ee8 	.word	0x08002ee8
 8001cf4:	08002eec 	.word	0x08002eec
 8001cf8:	08002ef0 	.word	0x08002ef0
 8001cfc:	08002f08 	.word	0x08002f08
 8001d00:	08002f1c 	.word	0x08002f1c

08001d04 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <ITM_SendChar+0x48>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <ITM_SendChar+0x48>)
 8001d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d18:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <ITM_SendChar+0x4c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <ITM_SendChar+0x4c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001d26:	bf00      	nop
 8001d28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f8      	beq.n	8001d28 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001d36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	6013      	str	r3, [r2, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000edfc 	.word	0xe000edfc
 8001d50:	e0000e00 	.word	0xe0000e00

08001d54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
  }

  return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffab 	bl	8001d04 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
  }
  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f000 f846 	bl	8001ef0 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20020000 	.word	0x20020000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	2000010c 	.word	0x2000010c
 8001e98:	20000120 	.word	0x20000120

08001e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea6:	490d      	ldr	r1, [pc, #52]	; (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	; (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eca:	f000 f817 	bl	8001efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7ff fe0f 	bl	8001af0 <main>

08001ed2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   r0, =_estack
 8001ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001ee0:	08002fe4 	.word	0x08002fe4
  ldr r2, =_sbss
 8001ee4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001ee8:	20000120 	.word	0x20000120

08001eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>
	...

08001ef0 <__errno>:
 8001ef0:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <__errno+0x8>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000034 	.word	0x20000034

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4d0d      	ldr	r5, [pc, #52]	; (8001f34 <__libc_init_array+0x38>)
 8001f00:	4c0d      	ldr	r4, [pc, #52]	; (8001f38 <__libc_init_array+0x3c>)
 8001f02:	1b64      	subs	r4, r4, r5
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	2600      	movs	r6, #0
 8001f08:	42a6      	cmp	r6, r4
 8001f0a:	d109      	bne.n	8001f20 <__libc_init_array+0x24>
 8001f0c:	4d0b      	ldr	r5, [pc, #44]	; (8001f3c <__libc_init_array+0x40>)
 8001f0e:	4c0c      	ldr	r4, [pc, #48]	; (8001f40 <__libc_init_array+0x44>)
 8001f10:	f000 ffae 	bl	8002e70 <_init>
 8001f14:	1b64      	subs	r4, r4, r5
 8001f16:	10a4      	asrs	r4, r4, #2
 8001f18:	2600      	movs	r6, #0
 8001f1a:	42a6      	cmp	r6, r4
 8001f1c:	d105      	bne.n	8001f2a <__libc_init_array+0x2e>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f24:	4798      	blx	r3
 8001f26:	3601      	adds	r6, #1
 8001f28:	e7ee      	b.n	8001f08 <__libc_init_array+0xc>
 8001f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2e:	4798      	blx	r3
 8001f30:	3601      	adds	r6, #1
 8001f32:	e7f2      	b.n	8001f1a <__libc_init_array+0x1e>
 8001f34:	08002fdc 	.word	0x08002fdc
 8001f38:	08002fdc 	.word	0x08002fdc
 8001f3c:	08002fdc 	.word	0x08002fdc
 8001f40:	08002fe0 	.word	0x08002fe0

08001f44 <memset>:
 8001f44:	4402      	add	r2, r0
 8001f46:	4603      	mov	r3, r0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <iprintf>:
 8001f54:	b40f      	push	{r0, r1, r2, r3}
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <iprintf+0x2c>)
 8001f58:	b513      	push	{r0, r1, r4, lr}
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	b124      	cbz	r4, 8001f68 <iprintf+0x14>
 8001f5e:	69a3      	ldr	r3, [r4, #24]
 8001f60:	b913      	cbnz	r3, 8001f68 <iprintf+0x14>
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 f866 	bl	8002034 <__sinit>
 8001f68:	ab05      	add	r3, sp, #20
 8001f6a:	9a04      	ldr	r2, [sp, #16]
 8001f6c:	68a1      	ldr	r1, [r4, #8]
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	4620      	mov	r0, r4
 8001f72:	f000 f9bd 	bl	80022f0 <_vfiprintf_r>
 8001f76:	b002      	add	sp, #8
 8001f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f7c:	b004      	add	sp, #16
 8001f7e:	4770      	bx	lr
 8001f80:	20000034 	.word	0x20000034

08001f84 <std>:
 8001f84:	2300      	movs	r3, #0
 8001f86:	b510      	push	{r4, lr}
 8001f88:	4604      	mov	r4, r0
 8001f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f92:	6083      	str	r3, [r0, #8]
 8001f94:	8181      	strh	r1, [r0, #12]
 8001f96:	6643      	str	r3, [r0, #100]	; 0x64
 8001f98:	81c2      	strh	r2, [r0, #14]
 8001f9a:	6183      	str	r3, [r0, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	305c      	adds	r0, #92	; 0x5c
 8001fa2:	f7ff ffcf 	bl	8001f44 <memset>
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <std+0x38>)
 8001fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <std+0x3c>)
 8001fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <std+0x40>)
 8001fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <std+0x44>)
 8001fb4:	6224      	str	r4, [r4, #32]
 8001fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8001fb8:	bd10      	pop	{r4, pc}
 8001fba:	bf00      	nop
 8001fbc:	08002899 	.word	0x08002899
 8001fc0:	080028bb 	.word	0x080028bb
 8001fc4:	080028f3 	.word	0x080028f3
 8001fc8:	08002917 	.word	0x08002917

08001fcc <_cleanup_r>:
 8001fcc:	4901      	ldr	r1, [pc, #4]	; (8001fd4 <_cleanup_r+0x8>)
 8001fce:	f000 b8af 	b.w	8002130 <_fwalk_reent>
 8001fd2:	bf00      	nop
 8001fd4:	08002bf1 	.word	0x08002bf1

08001fd8 <__sfmoreglue>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	2268      	movs	r2, #104	; 0x68
 8001fdc:	1e4d      	subs	r5, r1, #1
 8001fde:	4355      	muls	r5, r2
 8001fe0:	460e      	mov	r6, r1
 8001fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fe6:	f000 f8e5 	bl	80021b4 <_malloc_r>
 8001fea:	4604      	mov	r4, r0
 8001fec:	b140      	cbz	r0, 8002000 <__sfmoreglue+0x28>
 8001fee:	2100      	movs	r1, #0
 8001ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ff4:	300c      	adds	r0, #12
 8001ff6:	60a0      	str	r0, [r4, #8]
 8001ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ffc:	f7ff ffa2 	bl	8001f44 <memset>
 8002000:	4620      	mov	r0, r4
 8002002:	bd70      	pop	{r4, r5, r6, pc}

08002004 <__sfp_lock_acquire>:
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <__sfp_lock_acquire+0x8>)
 8002006:	f000 b8b3 	b.w	8002170 <__retarget_lock_acquire_recursive>
 800200a:	bf00      	nop
 800200c:	20000111 	.word	0x20000111

08002010 <__sfp_lock_release>:
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <__sfp_lock_release+0x8>)
 8002012:	f000 b8ae 	b.w	8002172 <__retarget_lock_release_recursive>
 8002016:	bf00      	nop
 8002018:	20000111 	.word	0x20000111

0800201c <__sinit_lock_acquire>:
 800201c:	4801      	ldr	r0, [pc, #4]	; (8002024 <__sinit_lock_acquire+0x8>)
 800201e:	f000 b8a7 	b.w	8002170 <__retarget_lock_acquire_recursive>
 8002022:	bf00      	nop
 8002024:	20000112 	.word	0x20000112

08002028 <__sinit_lock_release>:
 8002028:	4801      	ldr	r0, [pc, #4]	; (8002030 <__sinit_lock_release+0x8>)
 800202a:	f000 b8a2 	b.w	8002172 <__retarget_lock_release_recursive>
 800202e:	bf00      	nop
 8002030:	20000112 	.word	0x20000112

08002034 <__sinit>:
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	f7ff fff0 	bl	800201c <__sinit_lock_acquire>
 800203c:	69a3      	ldr	r3, [r4, #24]
 800203e:	b11b      	cbz	r3, 8002048 <__sinit+0x14>
 8002040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002044:	f7ff bff0 	b.w	8002028 <__sinit_lock_release>
 8002048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800204c:	6523      	str	r3, [r4, #80]	; 0x50
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <__sinit+0x68>)
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <__sinit+0x6c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	62a2      	str	r2, [r4, #40]	; 0x28
 8002056:	42a3      	cmp	r3, r4
 8002058:	bf04      	itt	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	61a3      	streq	r3, [r4, #24]
 800205e:	4620      	mov	r0, r4
 8002060:	f000 f820 	bl	80020a4 <__sfp>
 8002064:	6060      	str	r0, [r4, #4]
 8002066:	4620      	mov	r0, r4
 8002068:	f000 f81c 	bl	80020a4 <__sfp>
 800206c:	60a0      	str	r0, [r4, #8]
 800206e:	4620      	mov	r0, r4
 8002070:	f000 f818 	bl	80020a4 <__sfp>
 8002074:	2200      	movs	r2, #0
 8002076:	60e0      	str	r0, [r4, #12]
 8002078:	2104      	movs	r1, #4
 800207a:	6860      	ldr	r0, [r4, #4]
 800207c:	f7ff ff82 	bl	8001f84 <std>
 8002080:	68a0      	ldr	r0, [r4, #8]
 8002082:	2201      	movs	r2, #1
 8002084:	2109      	movs	r1, #9
 8002086:	f7ff ff7d 	bl	8001f84 <std>
 800208a:	68e0      	ldr	r0, [r4, #12]
 800208c:	2202      	movs	r2, #2
 800208e:	2112      	movs	r1, #18
 8002090:	f7ff ff78 	bl	8001f84 <std>
 8002094:	2301      	movs	r3, #1
 8002096:	61a3      	str	r3, [r4, #24]
 8002098:	e7d2      	b.n	8002040 <__sinit+0xc>
 800209a:	bf00      	nop
 800209c:	08002f44 	.word	0x08002f44
 80020a0:	08001fcd 	.word	0x08001fcd

080020a4 <__sfp>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	4607      	mov	r7, r0
 80020a8:	f7ff ffac 	bl	8002004 <__sfp_lock_acquire>
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <__sfp+0x84>)
 80020ae:	681e      	ldr	r6, [r3, #0]
 80020b0:	69b3      	ldr	r3, [r6, #24]
 80020b2:	b913      	cbnz	r3, 80020ba <__sfp+0x16>
 80020b4:	4630      	mov	r0, r6
 80020b6:	f7ff ffbd 	bl	8002034 <__sinit>
 80020ba:	3648      	adds	r6, #72	; 0x48
 80020bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	d503      	bpl.n	80020cc <__sfp+0x28>
 80020c4:	6833      	ldr	r3, [r6, #0]
 80020c6:	b30b      	cbz	r3, 800210c <__sfp+0x68>
 80020c8:	6836      	ldr	r6, [r6, #0]
 80020ca:	e7f7      	b.n	80020bc <__sfp+0x18>
 80020cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020d0:	b9d5      	cbnz	r5, 8002108 <__sfp+0x64>
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <__sfp+0x88>)
 80020d4:	60e3      	str	r3, [r4, #12]
 80020d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020da:	6665      	str	r5, [r4, #100]	; 0x64
 80020dc:	f000 f847 	bl	800216e <__retarget_lock_init_recursive>
 80020e0:	f7ff ff96 	bl	8002010 <__sfp_lock_release>
 80020e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020ec:	6025      	str	r5, [r4, #0]
 80020ee:	61a5      	str	r5, [r4, #24]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4629      	mov	r1, r5
 80020f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020f8:	f7ff ff24 	bl	8001f44 <memset>
 80020fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002104:	4620      	mov	r0, r4
 8002106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002108:	3468      	adds	r4, #104	; 0x68
 800210a:	e7d9      	b.n	80020c0 <__sfp+0x1c>
 800210c:	2104      	movs	r1, #4
 800210e:	4638      	mov	r0, r7
 8002110:	f7ff ff62 	bl	8001fd8 <__sfmoreglue>
 8002114:	4604      	mov	r4, r0
 8002116:	6030      	str	r0, [r6, #0]
 8002118:	2800      	cmp	r0, #0
 800211a:	d1d5      	bne.n	80020c8 <__sfp+0x24>
 800211c:	f7ff ff78 	bl	8002010 <__sfp_lock_release>
 8002120:	230c      	movs	r3, #12
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	e7ee      	b.n	8002104 <__sfp+0x60>
 8002126:	bf00      	nop
 8002128:	08002f44 	.word	0x08002f44
 800212c:	ffff0001 	.word	0xffff0001

08002130 <_fwalk_reent>:
 8002130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002134:	4606      	mov	r6, r0
 8002136:	4688      	mov	r8, r1
 8002138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800213c:	2700      	movs	r7, #0
 800213e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002142:	f1b9 0901 	subs.w	r9, r9, #1
 8002146:	d505      	bpl.n	8002154 <_fwalk_reent+0x24>
 8002148:	6824      	ldr	r4, [r4, #0]
 800214a:	2c00      	cmp	r4, #0
 800214c:	d1f7      	bne.n	800213e <_fwalk_reent+0xe>
 800214e:	4638      	mov	r0, r7
 8002150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002154:	89ab      	ldrh	r3, [r5, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d907      	bls.n	800216a <_fwalk_reent+0x3a>
 800215a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800215e:	3301      	adds	r3, #1
 8002160:	d003      	beq.n	800216a <_fwalk_reent+0x3a>
 8002162:	4629      	mov	r1, r5
 8002164:	4630      	mov	r0, r6
 8002166:	47c0      	blx	r8
 8002168:	4307      	orrs	r7, r0
 800216a:	3568      	adds	r5, #104	; 0x68
 800216c:	e7e9      	b.n	8002142 <_fwalk_reent+0x12>

0800216e <__retarget_lock_init_recursive>:
 800216e:	4770      	bx	lr

08002170 <__retarget_lock_acquire_recursive>:
 8002170:	4770      	bx	lr

08002172 <__retarget_lock_release_recursive>:
 8002172:	4770      	bx	lr

08002174 <sbrk_aligned>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4e0e      	ldr	r6, [pc, #56]	; (80021b0 <sbrk_aligned+0x3c>)
 8002178:	460c      	mov	r4, r1
 800217a:	6831      	ldr	r1, [r6, #0]
 800217c:	4605      	mov	r5, r0
 800217e:	b911      	cbnz	r1, 8002186 <sbrk_aligned+0x12>
 8002180:	f000 fb7a 	bl	8002878 <_sbrk_r>
 8002184:	6030      	str	r0, [r6, #0]
 8002186:	4621      	mov	r1, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f000 fb75 	bl	8002878 <_sbrk_r>
 800218e:	1c43      	adds	r3, r0, #1
 8002190:	d00a      	beq.n	80021a8 <sbrk_aligned+0x34>
 8002192:	1cc4      	adds	r4, r0, #3
 8002194:	f024 0403 	bic.w	r4, r4, #3
 8002198:	42a0      	cmp	r0, r4
 800219a:	d007      	beq.n	80021ac <sbrk_aligned+0x38>
 800219c:	1a21      	subs	r1, r4, r0
 800219e:	4628      	mov	r0, r5
 80021a0:	f000 fb6a 	bl	8002878 <_sbrk_r>
 80021a4:	3001      	adds	r0, #1
 80021a6:	d101      	bne.n	80021ac <sbrk_aligned+0x38>
 80021a8:	f04f 34ff 	mov.w	r4, #4294967295
 80021ac:	4620      	mov	r0, r4
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	20000118 	.word	0x20000118

080021b4 <_malloc_r>:
 80021b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b8:	1ccd      	adds	r5, r1, #3
 80021ba:	f025 0503 	bic.w	r5, r5, #3
 80021be:	3508      	adds	r5, #8
 80021c0:	2d0c      	cmp	r5, #12
 80021c2:	bf38      	it	cc
 80021c4:	250c      	movcc	r5, #12
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	4607      	mov	r7, r0
 80021ca:	db01      	blt.n	80021d0 <_malloc_r+0x1c>
 80021cc:	42a9      	cmp	r1, r5
 80021ce:	d905      	bls.n	80021dc <_malloc_r+0x28>
 80021d0:	230c      	movs	r3, #12
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	2600      	movs	r6, #0
 80021d6:	4630      	mov	r0, r6
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021dc:	4e2e      	ldr	r6, [pc, #184]	; (8002298 <_malloc_r+0xe4>)
 80021de:	f000 fdbb 	bl	8002d58 <__malloc_lock>
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	461c      	mov	r4, r3
 80021e6:	bb34      	cbnz	r4, 8002236 <_malloc_r+0x82>
 80021e8:	4629      	mov	r1, r5
 80021ea:	4638      	mov	r0, r7
 80021ec:	f7ff ffc2 	bl	8002174 <sbrk_aligned>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	4604      	mov	r4, r0
 80021f4:	d14d      	bne.n	8002292 <_malloc_r+0xde>
 80021f6:	6834      	ldr	r4, [r6, #0]
 80021f8:	4626      	mov	r6, r4
 80021fa:	2e00      	cmp	r6, #0
 80021fc:	d140      	bne.n	8002280 <_malloc_r+0xcc>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	4631      	mov	r1, r6
 8002202:	4638      	mov	r0, r7
 8002204:	eb04 0803 	add.w	r8, r4, r3
 8002208:	f000 fb36 	bl	8002878 <_sbrk_r>
 800220c:	4580      	cmp	r8, r0
 800220e:	d13a      	bne.n	8002286 <_malloc_r+0xd2>
 8002210:	6821      	ldr	r1, [r4, #0]
 8002212:	3503      	adds	r5, #3
 8002214:	1a6d      	subs	r5, r5, r1
 8002216:	f025 0503 	bic.w	r5, r5, #3
 800221a:	3508      	adds	r5, #8
 800221c:	2d0c      	cmp	r5, #12
 800221e:	bf38      	it	cc
 8002220:	250c      	movcc	r5, #12
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ffa5 	bl	8002174 <sbrk_aligned>
 800222a:	3001      	adds	r0, #1
 800222c:	d02b      	beq.n	8002286 <_malloc_r+0xd2>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	442b      	add	r3, r5
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	e00e      	b.n	8002254 <_malloc_r+0xa0>
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	1b52      	subs	r2, r2, r5
 800223a:	d41e      	bmi.n	800227a <_malloc_r+0xc6>
 800223c:	2a0b      	cmp	r2, #11
 800223e:	d916      	bls.n	800226e <_malloc_r+0xba>
 8002240:	1961      	adds	r1, r4, r5
 8002242:	42a3      	cmp	r3, r4
 8002244:	6025      	str	r5, [r4, #0]
 8002246:	bf18      	it	ne
 8002248:	6059      	strne	r1, [r3, #4]
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	bf08      	it	eq
 800224e:	6031      	streq	r1, [r6, #0]
 8002250:	5162      	str	r2, [r4, r5]
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	4638      	mov	r0, r7
 8002256:	f104 060b 	add.w	r6, r4, #11
 800225a:	f000 fd83 	bl	8002d64 <__malloc_unlock>
 800225e:	f026 0607 	bic.w	r6, r6, #7
 8002262:	1d23      	adds	r3, r4, #4
 8002264:	1af2      	subs	r2, r6, r3
 8002266:	d0b6      	beq.n	80021d6 <_malloc_r+0x22>
 8002268:	1b9b      	subs	r3, r3, r6
 800226a:	50a3      	str	r3, [r4, r2]
 800226c:	e7b3      	b.n	80021d6 <_malloc_r+0x22>
 800226e:	6862      	ldr	r2, [r4, #4]
 8002270:	42a3      	cmp	r3, r4
 8002272:	bf0c      	ite	eq
 8002274:	6032      	streq	r2, [r6, #0]
 8002276:	605a      	strne	r2, [r3, #4]
 8002278:	e7ec      	b.n	8002254 <_malloc_r+0xa0>
 800227a:	4623      	mov	r3, r4
 800227c:	6864      	ldr	r4, [r4, #4]
 800227e:	e7b2      	b.n	80021e6 <_malloc_r+0x32>
 8002280:	4634      	mov	r4, r6
 8002282:	6876      	ldr	r6, [r6, #4]
 8002284:	e7b9      	b.n	80021fa <_malloc_r+0x46>
 8002286:	230c      	movs	r3, #12
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4638      	mov	r0, r7
 800228c:	f000 fd6a 	bl	8002d64 <__malloc_unlock>
 8002290:	e7a1      	b.n	80021d6 <_malloc_r+0x22>
 8002292:	6025      	str	r5, [r4, #0]
 8002294:	e7de      	b.n	8002254 <_malloc_r+0xa0>
 8002296:	bf00      	nop
 8002298:	20000114 	.word	0x20000114

0800229c <__sfputc_r>:
 800229c:	6893      	ldr	r3, [r2, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	b410      	push	{r4}
 80022a4:	6093      	str	r3, [r2, #8]
 80022a6:	da08      	bge.n	80022ba <__sfputc_r+0x1e>
 80022a8:	6994      	ldr	r4, [r2, #24]
 80022aa:	42a3      	cmp	r3, r4
 80022ac:	db01      	blt.n	80022b2 <__sfputc_r+0x16>
 80022ae:	290a      	cmp	r1, #10
 80022b0:	d103      	bne.n	80022ba <__sfputc_r+0x1e>
 80022b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b6:	f000 bb33 	b.w	8002920 <__swbuf_r>
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	1c58      	adds	r0, r3, #1
 80022be:	6010      	str	r0, [r2, #0]
 80022c0:	7019      	strb	r1, [r3, #0]
 80022c2:	4608      	mov	r0, r1
 80022c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <__sfputs_r>:
 80022ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022cc:	4606      	mov	r6, r0
 80022ce:	460f      	mov	r7, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	18d5      	adds	r5, r2, r3
 80022d4:	42ac      	cmp	r4, r5
 80022d6:	d101      	bne.n	80022dc <__sfputs_r+0x12>
 80022d8:	2000      	movs	r0, #0
 80022da:	e007      	b.n	80022ec <__sfputs_r+0x22>
 80022dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022e0:	463a      	mov	r2, r7
 80022e2:	4630      	mov	r0, r6
 80022e4:	f7ff ffda 	bl	800229c <__sfputc_r>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d1f3      	bne.n	80022d4 <__sfputs_r+0xa>
 80022ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022f0 <_vfiprintf_r>:
 80022f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f4:	460d      	mov	r5, r1
 80022f6:	b09d      	sub	sp, #116	; 0x74
 80022f8:	4614      	mov	r4, r2
 80022fa:	4698      	mov	r8, r3
 80022fc:	4606      	mov	r6, r0
 80022fe:	b118      	cbz	r0, 8002308 <_vfiprintf_r+0x18>
 8002300:	6983      	ldr	r3, [r0, #24]
 8002302:	b90b      	cbnz	r3, 8002308 <_vfiprintf_r+0x18>
 8002304:	f7ff fe96 	bl	8002034 <__sinit>
 8002308:	4b89      	ldr	r3, [pc, #548]	; (8002530 <_vfiprintf_r+0x240>)
 800230a:	429d      	cmp	r5, r3
 800230c:	d11b      	bne.n	8002346 <_vfiprintf_r+0x56>
 800230e:	6875      	ldr	r5, [r6, #4]
 8002310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002312:	07d9      	lsls	r1, r3, #31
 8002314:	d405      	bmi.n	8002322 <_vfiprintf_r+0x32>
 8002316:	89ab      	ldrh	r3, [r5, #12]
 8002318:	059a      	lsls	r2, r3, #22
 800231a:	d402      	bmi.n	8002322 <_vfiprintf_r+0x32>
 800231c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800231e:	f7ff ff27 	bl	8002170 <__retarget_lock_acquire_recursive>
 8002322:	89ab      	ldrh	r3, [r5, #12]
 8002324:	071b      	lsls	r3, r3, #28
 8002326:	d501      	bpl.n	800232c <_vfiprintf_r+0x3c>
 8002328:	692b      	ldr	r3, [r5, #16]
 800232a:	b9eb      	cbnz	r3, 8002368 <_vfiprintf_r+0x78>
 800232c:	4629      	mov	r1, r5
 800232e:	4630      	mov	r0, r6
 8002330:	f000 fb5a 	bl	80029e8 <__swsetup_r>
 8002334:	b1c0      	cbz	r0, 8002368 <_vfiprintf_r+0x78>
 8002336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002338:	07dc      	lsls	r4, r3, #31
 800233a:	d50e      	bpl.n	800235a <_vfiprintf_r+0x6a>
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	b01d      	add	sp, #116	; 0x74
 8002342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002346:	4b7b      	ldr	r3, [pc, #492]	; (8002534 <_vfiprintf_r+0x244>)
 8002348:	429d      	cmp	r5, r3
 800234a:	d101      	bne.n	8002350 <_vfiprintf_r+0x60>
 800234c:	68b5      	ldr	r5, [r6, #8]
 800234e:	e7df      	b.n	8002310 <_vfiprintf_r+0x20>
 8002350:	4b79      	ldr	r3, [pc, #484]	; (8002538 <_vfiprintf_r+0x248>)
 8002352:	429d      	cmp	r5, r3
 8002354:	bf08      	it	eq
 8002356:	68f5      	ldreq	r5, [r6, #12]
 8002358:	e7da      	b.n	8002310 <_vfiprintf_r+0x20>
 800235a:	89ab      	ldrh	r3, [r5, #12]
 800235c:	0598      	lsls	r0, r3, #22
 800235e:	d4ed      	bmi.n	800233c <_vfiprintf_r+0x4c>
 8002360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002362:	f7ff ff06 	bl	8002172 <__retarget_lock_release_recursive>
 8002366:	e7e9      	b.n	800233c <_vfiprintf_r+0x4c>
 8002368:	2300      	movs	r3, #0
 800236a:	9309      	str	r3, [sp, #36]	; 0x24
 800236c:	2320      	movs	r3, #32
 800236e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002372:	f8cd 800c 	str.w	r8, [sp, #12]
 8002376:	2330      	movs	r3, #48	; 0x30
 8002378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800253c <_vfiprintf_r+0x24c>
 800237c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002380:	f04f 0901 	mov.w	r9, #1
 8002384:	4623      	mov	r3, r4
 8002386:	469a      	mov	sl, r3
 8002388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800238c:	b10a      	cbz	r2, 8002392 <_vfiprintf_r+0xa2>
 800238e:	2a25      	cmp	r2, #37	; 0x25
 8002390:	d1f9      	bne.n	8002386 <_vfiprintf_r+0x96>
 8002392:	ebba 0b04 	subs.w	fp, sl, r4
 8002396:	d00b      	beq.n	80023b0 <_vfiprintf_r+0xc0>
 8002398:	465b      	mov	r3, fp
 800239a:	4622      	mov	r2, r4
 800239c:	4629      	mov	r1, r5
 800239e:	4630      	mov	r0, r6
 80023a0:	f7ff ff93 	bl	80022ca <__sfputs_r>
 80023a4:	3001      	adds	r0, #1
 80023a6:	f000 80aa 	beq.w	80024fe <_vfiprintf_r+0x20e>
 80023aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ac:	445a      	add	r2, fp
 80023ae:	9209      	str	r2, [sp, #36]	; 0x24
 80023b0:	f89a 3000 	ldrb.w	r3, [sl]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a2 	beq.w	80024fe <_vfiprintf_r+0x20e>
 80023ba:	2300      	movs	r3, #0
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023c4:	f10a 0a01 	add.w	sl, sl, #1
 80023c8:	9304      	str	r3, [sp, #16]
 80023ca:	9307      	str	r3, [sp, #28]
 80023cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023d0:	931a      	str	r3, [sp, #104]	; 0x68
 80023d2:	4654      	mov	r4, sl
 80023d4:	2205      	movs	r2, #5
 80023d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023da:	4858      	ldr	r0, [pc, #352]	; (800253c <_vfiprintf_r+0x24c>)
 80023dc:	f7fd ff18 	bl	8000210 <memchr>
 80023e0:	9a04      	ldr	r2, [sp, #16]
 80023e2:	b9d8      	cbnz	r0, 800241c <_vfiprintf_r+0x12c>
 80023e4:	06d1      	lsls	r1, r2, #27
 80023e6:	bf44      	itt	mi
 80023e8:	2320      	movmi	r3, #32
 80023ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023ee:	0713      	lsls	r3, r2, #28
 80023f0:	bf44      	itt	mi
 80023f2:	232b      	movmi	r3, #43	; 0x2b
 80023f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023f8:	f89a 3000 	ldrb.w	r3, [sl]
 80023fc:	2b2a      	cmp	r3, #42	; 0x2a
 80023fe:	d015      	beq.n	800242c <_vfiprintf_r+0x13c>
 8002400:	9a07      	ldr	r2, [sp, #28]
 8002402:	4654      	mov	r4, sl
 8002404:	2000      	movs	r0, #0
 8002406:	f04f 0c0a 	mov.w	ip, #10
 800240a:	4621      	mov	r1, r4
 800240c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002410:	3b30      	subs	r3, #48	; 0x30
 8002412:	2b09      	cmp	r3, #9
 8002414:	d94e      	bls.n	80024b4 <_vfiprintf_r+0x1c4>
 8002416:	b1b0      	cbz	r0, 8002446 <_vfiprintf_r+0x156>
 8002418:	9207      	str	r2, [sp, #28]
 800241a:	e014      	b.n	8002446 <_vfiprintf_r+0x156>
 800241c:	eba0 0308 	sub.w	r3, r0, r8
 8002420:	fa09 f303 	lsl.w	r3, r9, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	9304      	str	r3, [sp, #16]
 8002428:	46a2      	mov	sl, r4
 800242a:	e7d2      	b.n	80023d2 <_vfiprintf_r+0xe2>
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	1d19      	adds	r1, r3, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	9103      	str	r1, [sp, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	bfbb      	ittet	lt
 8002438:	425b      	neglt	r3, r3
 800243a:	f042 0202 	orrlt.w	r2, r2, #2
 800243e:	9307      	strge	r3, [sp, #28]
 8002440:	9307      	strlt	r3, [sp, #28]
 8002442:	bfb8      	it	lt
 8002444:	9204      	strlt	r2, [sp, #16]
 8002446:	7823      	ldrb	r3, [r4, #0]
 8002448:	2b2e      	cmp	r3, #46	; 0x2e
 800244a:	d10c      	bne.n	8002466 <_vfiprintf_r+0x176>
 800244c:	7863      	ldrb	r3, [r4, #1]
 800244e:	2b2a      	cmp	r3, #42	; 0x2a
 8002450:	d135      	bne.n	80024be <_vfiprintf_r+0x1ce>
 8002452:	9b03      	ldr	r3, [sp, #12]
 8002454:	1d1a      	adds	r2, r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	9203      	str	r2, [sp, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfb8      	it	lt
 800245e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002462:	3402      	adds	r4, #2
 8002464:	9305      	str	r3, [sp, #20]
 8002466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800254c <_vfiprintf_r+0x25c>
 800246a:	7821      	ldrb	r1, [r4, #0]
 800246c:	2203      	movs	r2, #3
 800246e:	4650      	mov	r0, sl
 8002470:	f7fd fece 	bl	8000210 <memchr>
 8002474:	b140      	cbz	r0, 8002488 <_vfiprintf_r+0x198>
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	eba0 000a 	sub.w	r0, r0, sl
 800247c:	fa03 f000 	lsl.w	r0, r3, r0
 8002480:	9b04      	ldr	r3, [sp, #16]
 8002482:	4303      	orrs	r3, r0
 8002484:	3401      	adds	r4, #1
 8002486:	9304      	str	r3, [sp, #16]
 8002488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800248c:	482c      	ldr	r0, [pc, #176]	; (8002540 <_vfiprintf_r+0x250>)
 800248e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002492:	2206      	movs	r2, #6
 8002494:	f7fd febc 	bl	8000210 <memchr>
 8002498:	2800      	cmp	r0, #0
 800249a:	d03f      	beq.n	800251c <_vfiprintf_r+0x22c>
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <_vfiprintf_r+0x254>)
 800249e:	bb1b      	cbnz	r3, 80024e8 <_vfiprintf_r+0x1f8>
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	3307      	adds	r3, #7
 80024a4:	f023 0307 	bic.w	r3, r3, #7
 80024a8:	3308      	adds	r3, #8
 80024aa:	9303      	str	r3, [sp, #12]
 80024ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ae:	443b      	add	r3, r7
 80024b0:	9309      	str	r3, [sp, #36]	; 0x24
 80024b2:	e767      	b.n	8002384 <_vfiprintf_r+0x94>
 80024b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80024b8:	460c      	mov	r4, r1
 80024ba:	2001      	movs	r0, #1
 80024bc:	e7a5      	b.n	800240a <_vfiprintf_r+0x11a>
 80024be:	2300      	movs	r3, #0
 80024c0:	3401      	adds	r4, #1
 80024c2:	9305      	str	r3, [sp, #20]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0c0a 	mov.w	ip, #10
 80024ca:	4620      	mov	r0, r4
 80024cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024d0:	3a30      	subs	r2, #48	; 0x30
 80024d2:	2a09      	cmp	r2, #9
 80024d4:	d903      	bls.n	80024de <_vfiprintf_r+0x1ee>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0c5      	beq.n	8002466 <_vfiprintf_r+0x176>
 80024da:	9105      	str	r1, [sp, #20]
 80024dc:	e7c3      	b.n	8002466 <_vfiprintf_r+0x176>
 80024de:	fb0c 2101 	mla	r1, ip, r1, r2
 80024e2:	4604      	mov	r4, r0
 80024e4:	2301      	movs	r3, #1
 80024e6:	e7f0      	b.n	80024ca <_vfiprintf_r+0x1da>
 80024e8:	ab03      	add	r3, sp, #12
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	462a      	mov	r2, r5
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <_vfiprintf_r+0x258>)
 80024f0:	a904      	add	r1, sp, #16
 80024f2:	4630      	mov	r0, r6
 80024f4:	f3af 8000 	nop.w
 80024f8:	4607      	mov	r7, r0
 80024fa:	1c78      	adds	r0, r7, #1
 80024fc:	d1d6      	bne.n	80024ac <_vfiprintf_r+0x1bc>
 80024fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002500:	07d9      	lsls	r1, r3, #31
 8002502:	d405      	bmi.n	8002510 <_vfiprintf_r+0x220>
 8002504:	89ab      	ldrh	r3, [r5, #12]
 8002506:	059a      	lsls	r2, r3, #22
 8002508:	d402      	bmi.n	8002510 <_vfiprintf_r+0x220>
 800250a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800250c:	f7ff fe31 	bl	8002172 <__retarget_lock_release_recursive>
 8002510:	89ab      	ldrh	r3, [r5, #12]
 8002512:	065b      	lsls	r3, r3, #25
 8002514:	f53f af12 	bmi.w	800233c <_vfiprintf_r+0x4c>
 8002518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800251a:	e711      	b.n	8002340 <_vfiprintf_r+0x50>
 800251c:	ab03      	add	r3, sp, #12
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	462a      	mov	r2, r5
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <_vfiprintf_r+0x258>)
 8002524:	a904      	add	r1, sp, #16
 8002526:	4630      	mov	r0, r6
 8002528:	f000 f880 	bl	800262c <_printf_i>
 800252c:	e7e4      	b.n	80024f8 <_vfiprintf_r+0x208>
 800252e:	bf00      	nop
 8002530:	08002f68 	.word	0x08002f68
 8002534:	08002f88 	.word	0x08002f88
 8002538:	08002f48 	.word	0x08002f48
 800253c:	08002fa8 	.word	0x08002fa8
 8002540:	08002fb2 	.word	0x08002fb2
 8002544:	00000000 	.word	0x00000000
 8002548:	080022cb 	.word	0x080022cb
 800254c:	08002fae 	.word	0x08002fae

08002550 <_printf_common>:
 8002550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002554:	4616      	mov	r6, r2
 8002556:	4699      	mov	r9, r3
 8002558:	688a      	ldr	r2, [r1, #8]
 800255a:	690b      	ldr	r3, [r1, #16]
 800255c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002560:	4293      	cmp	r3, r2
 8002562:	bfb8      	it	lt
 8002564:	4613      	movlt	r3, r2
 8002566:	6033      	str	r3, [r6, #0]
 8002568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800256c:	4607      	mov	r7, r0
 800256e:	460c      	mov	r4, r1
 8002570:	b10a      	cbz	r2, 8002576 <_printf_common+0x26>
 8002572:	3301      	adds	r3, #1
 8002574:	6033      	str	r3, [r6, #0]
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	0699      	lsls	r1, r3, #26
 800257a:	bf42      	ittt	mi
 800257c:	6833      	ldrmi	r3, [r6, #0]
 800257e:	3302      	addmi	r3, #2
 8002580:	6033      	strmi	r3, [r6, #0]
 8002582:	6825      	ldr	r5, [r4, #0]
 8002584:	f015 0506 	ands.w	r5, r5, #6
 8002588:	d106      	bne.n	8002598 <_printf_common+0x48>
 800258a:	f104 0a19 	add.w	sl, r4, #25
 800258e:	68e3      	ldr	r3, [r4, #12]
 8002590:	6832      	ldr	r2, [r6, #0]
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	42ab      	cmp	r3, r5
 8002596:	dc26      	bgt.n	80025e6 <_printf_common+0x96>
 8002598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800259c:	1e13      	subs	r3, r2, #0
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	bf18      	it	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	0692      	lsls	r2, r2, #26
 80025a6:	d42b      	bmi.n	8002600 <_printf_common+0xb0>
 80025a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ac:	4649      	mov	r1, r9
 80025ae:	4638      	mov	r0, r7
 80025b0:	47c0      	blx	r8
 80025b2:	3001      	adds	r0, #1
 80025b4:	d01e      	beq.n	80025f4 <_printf_common+0xa4>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	68e5      	ldr	r5, [r4, #12]
 80025ba:	6832      	ldr	r2, [r6, #0]
 80025bc:	f003 0306 	and.w	r3, r3, #6
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	bf08      	it	eq
 80025c4:	1aad      	subeq	r5, r5, r2
 80025c6:	68a3      	ldr	r3, [r4, #8]
 80025c8:	6922      	ldr	r2, [r4, #16]
 80025ca:	bf0c      	ite	eq
 80025cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025d0:	2500      	movne	r5, #0
 80025d2:	4293      	cmp	r3, r2
 80025d4:	bfc4      	itt	gt
 80025d6:	1a9b      	subgt	r3, r3, r2
 80025d8:	18ed      	addgt	r5, r5, r3
 80025da:	2600      	movs	r6, #0
 80025dc:	341a      	adds	r4, #26
 80025de:	42b5      	cmp	r5, r6
 80025e0:	d11a      	bne.n	8002618 <_printf_common+0xc8>
 80025e2:	2000      	movs	r0, #0
 80025e4:	e008      	b.n	80025f8 <_printf_common+0xa8>
 80025e6:	2301      	movs	r3, #1
 80025e8:	4652      	mov	r2, sl
 80025ea:	4649      	mov	r1, r9
 80025ec:	4638      	mov	r0, r7
 80025ee:	47c0      	blx	r8
 80025f0:	3001      	adds	r0, #1
 80025f2:	d103      	bne.n	80025fc <_printf_common+0xac>
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025fc:	3501      	adds	r5, #1
 80025fe:	e7c6      	b.n	800258e <_printf_common+0x3e>
 8002600:	18e1      	adds	r1, r4, r3
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	2030      	movs	r0, #48	; 0x30
 8002606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800260a:	4422      	add	r2, r4
 800260c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002614:	3302      	adds	r3, #2
 8002616:	e7c7      	b.n	80025a8 <_printf_common+0x58>
 8002618:	2301      	movs	r3, #1
 800261a:	4622      	mov	r2, r4
 800261c:	4649      	mov	r1, r9
 800261e:	4638      	mov	r0, r7
 8002620:	47c0      	blx	r8
 8002622:	3001      	adds	r0, #1
 8002624:	d0e6      	beq.n	80025f4 <_printf_common+0xa4>
 8002626:	3601      	adds	r6, #1
 8002628:	e7d9      	b.n	80025de <_printf_common+0x8e>
	...

0800262c <_printf_i>:
 800262c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002630:	7e0f      	ldrb	r7, [r1, #24]
 8002632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002634:	2f78      	cmp	r7, #120	; 0x78
 8002636:	4691      	mov	r9, r2
 8002638:	4680      	mov	r8, r0
 800263a:	460c      	mov	r4, r1
 800263c:	469a      	mov	sl, r3
 800263e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002642:	d807      	bhi.n	8002654 <_printf_i+0x28>
 8002644:	2f62      	cmp	r7, #98	; 0x62
 8002646:	d80a      	bhi.n	800265e <_printf_i+0x32>
 8002648:	2f00      	cmp	r7, #0
 800264a:	f000 80d8 	beq.w	80027fe <_printf_i+0x1d2>
 800264e:	2f58      	cmp	r7, #88	; 0x58
 8002650:	f000 80a3 	beq.w	800279a <_printf_i+0x16e>
 8002654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800265c:	e03a      	b.n	80026d4 <_printf_i+0xa8>
 800265e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002662:	2b15      	cmp	r3, #21
 8002664:	d8f6      	bhi.n	8002654 <_printf_i+0x28>
 8002666:	a101      	add	r1, pc, #4	; (adr r1, 800266c <_printf_i+0x40>)
 8002668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800266c:	080026c5 	.word	0x080026c5
 8002670:	080026d9 	.word	0x080026d9
 8002674:	08002655 	.word	0x08002655
 8002678:	08002655 	.word	0x08002655
 800267c:	08002655 	.word	0x08002655
 8002680:	08002655 	.word	0x08002655
 8002684:	080026d9 	.word	0x080026d9
 8002688:	08002655 	.word	0x08002655
 800268c:	08002655 	.word	0x08002655
 8002690:	08002655 	.word	0x08002655
 8002694:	08002655 	.word	0x08002655
 8002698:	080027e5 	.word	0x080027e5
 800269c:	08002709 	.word	0x08002709
 80026a0:	080027c7 	.word	0x080027c7
 80026a4:	08002655 	.word	0x08002655
 80026a8:	08002655 	.word	0x08002655
 80026ac:	08002807 	.word	0x08002807
 80026b0:	08002655 	.word	0x08002655
 80026b4:	08002709 	.word	0x08002709
 80026b8:	08002655 	.word	0x08002655
 80026bc:	08002655 	.word	0x08002655
 80026c0:	080027cf 	.word	0x080027cf
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	602a      	str	r2, [r5, #0]
 80026cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0a3      	b.n	8002820 <_printf_i+0x1f4>
 80026d8:	6820      	ldr	r0, [r4, #0]
 80026da:	6829      	ldr	r1, [r5, #0]
 80026dc:	0606      	lsls	r6, r0, #24
 80026de:	f101 0304 	add.w	r3, r1, #4
 80026e2:	d50a      	bpl.n	80026fa <_printf_i+0xce>
 80026e4:	680e      	ldr	r6, [r1, #0]
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	2e00      	cmp	r6, #0
 80026ea:	da03      	bge.n	80026f4 <_printf_i+0xc8>
 80026ec:	232d      	movs	r3, #45	; 0x2d
 80026ee:	4276      	negs	r6, r6
 80026f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026f4:	485e      	ldr	r0, [pc, #376]	; (8002870 <_printf_i+0x244>)
 80026f6:	230a      	movs	r3, #10
 80026f8:	e019      	b.n	800272e <_printf_i+0x102>
 80026fa:	680e      	ldr	r6, [r1, #0]
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002702:	bf18      	it	ne
 8002704:	b236      	sxthne	r6, r6
 8002706:	e7ef      	b.n	80026e8 <_printf_i+0xbc>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	1d19      	adds	r1, r3, #4
 800270e:	6029      	str	r1, [r5, #0]
 8002710:	0601      	lsls	r1, r0, #24
 8002712:	d501      	bpl.n	8002718 <_printf_i+0xec>
 8002714:	681e      	ldr	r6, [r3, #0]
 8002716:	e002      	b.n	800271e <_printf_i+0xf2>
 8002718:	0646      	lsls	r6, r0, #25
 800271a:	d5fb      	bpl.n	8002714 <_printf_i+0xe8>
 800271c:	881e      	ldrh	r6, [r3, #0]
 800271e:	4854      	ldr	r0, [pc, #336]	; (8002870 <_printf_i+0x244>)
 8002720:	2f6f      	cmp	r7, #111	; 0x6f
 8002722:	bf0c      	ite	eq
 8002724:	2308      	moveq	r3, #8
 8002726:	230a      	movne	r3, #10
 8002728:	2100      	movs	r1, #0
 800272a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800272e:	6865      	ldr	r5, [r4, #4]
 8002730:	60a5      	str	r5, [r4, #8]
 8002732:	2d00      	cmp	r5, #0
 8002734:	bfa2      	ittt	ge
 8002736:	6821      	ldrge	r1, [r4, #0]
 8002738:	f021 0104 	bicge.w	r1, r1, #4
 800273c:	6021      	strge	r1, [r4, #0]
 800273e:	b90e      	cbnz	r6, 8002744 <_printf_i+0x118>
 8002740:	2d00      	cmp	r5, #0
 8002742:	d04d      	beq.n	80027e0 <_printf_i+0x1b4>
 8002744:	4615      	mov	r5, r2
 8002746:	fbb6 f1f3 	udiv	r1, r6, r3
 800274a:	fb03 6711 	mls	r7, r3, r1, r6
 800274e:	5dc7      	ldrb	r7, [r0, r7]
 8002750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002754:	4637      	mov	r7, r6
 8002756:	42bb      	cmp	r3, r7
 8002758:	460e      	mov	r6, r1
 800275a:	d9f4      	bls.n	8002746 <_printf_i+0x11a>
 800275c:	2b08      	cmp	r3, #8
 800275e:	d10b      	bne.n	8002778 <_printf_i+0x14c>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	07de      	lsls	r6, r3, #31
 8002764:	d508      	bpl.n	8002778 <_printf_i+0x14c>
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	6861      	ldr	r1, [r4, #4]
 800276a:	4299      	cmp	r1, r3
 800276c:	bfde      	ittt	le
 800276e:	2330      	movle	r3, #48	; 0x30
 8002770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002774:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002778:	1b52      	subs	r2, r2, r5
 800277a:	6122      	str	r2, [r4, #16]
 800277c:	f8cd a000 	str.w	sl, [sp]
 8002780:	464b      	mov	r3, r9
 8002782:	aa03      	add	r2, sp, #12
 8002784:	4621      	mov	r1, r4
 8002786:	4640      	mov	r0, r8
 8002788:	f7ff fee2 	bl	8002550 <_printf_common>
 800278c:	3001      	adds	r0, #1
 800278e:	d14c      	bne.n	800282a <_printf_i+0x1fe>
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	b004      	add	sp, #16
 8002796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279a:	4835      	ldr	r0, [pc, #212]	; (8002870 <_printf_i+0x244>)
 800279c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80027a0:	6829      	ldr	r1, [r5, #0]
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80027a8:	6029      	str	r1, [r5, #0]
 80027aa:	061d      	lsls	r5, r3, #24
 80027ac:	d514      	bpl.n	80027d8 <_printf_i+0x1ac>
 80027ae:	07df      	lsls	r7, r3, #31
 80027b0:	bf44      	itt	mi
 80027b2:	f043 0320 	orrmi.w	r3, r3, #32
 80027b6:	6023      	strmi	r3, [r4, #0]
 80027b8:	b91e      	cbnz	r6, 80027c2 <_printf_i+0x196>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	f023 0320 	bic.w	r3, r3, #32
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	2310      	movs	r3, #16
 80027c4:	e7b0      	b.n	8002728 <_printf_i+0xfc>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	2378      	movs	r3, #120	; 0x78
 80027d0:	4828      	ldr	r0, [pc, #160]	; (8002874 <_printf_i+0x248>)
 80027d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027d6:	e7e3      	b.n	80027a0 <_printf_i+0x174>
 80027d8:	0659      	lsls	r1, r3, #25
 80027da:	bf48      	it	mi
 80027dc:	b2b6      	uxthmi	r6, r6
 80027de:	e7e6      	b.n	80027ae <_printf_i+0x182>
 80027e0:	4615      	mov	r5, r2
 80027e2:	e7bb      	b.n	800275c <_printf_i+0x130>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	6826      	ldr	r6, [r4, #0]
 80027e8:	6961      	ldr	r1, [r4, #20]
 80027ea:	1d18      	adds	r0, r3, #4
 80027ec:	6028      	str	r0, [r5, #0]
 80027ee:	0635      	lsls	r5, r6, #24
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	d501      	bpl.n	80027f8 <_printf_i+0x1cc>
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	e002      	b.n	80027fe <_printf_i+0x1d2>
 80027f8:	0670      	lsls	r0, r6, #25
 80027fa:	d5fb      	bpl.n	80027f4 <_printf_i+0x1c8>
 80027fc:	8019      	strh	r1, [r3, #0]
 80027fe:	2300      	movs	r3, #0
 8002800:	6123      	str	r3, [r4, #16]
 8002802:	4615      	mov	r5, r2
 8002804:	e7ba      	b.n	800277c <_printf_i+0x150>
 8002806:	682b      	ldr	r3, [r5, #0]
 8002808:	1d1a      	adds	r2, r3, #4
 800280a:	602a      	str	r2, [r5, #0]
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	6862      	ldr	r2, [r4, #4]
 8002810:	2100      	movs	r1, #0
 8002812:	4628      	mov	r0, r5
 8002814:	f7fd fcfc 	bl	8000210 <memchr>
 8002818:	b108      	cbz	r0, 800281e <_printf_i+0x1f2>
 800281a:	1b40      	subs	r0, r0, r5
 800281c:	6060      	str	r0, [r4, #4]
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	6123      	str	r3, [r4, #16]
 8002822:	2300      	movs	r3, #0
 8002824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002828:	e7a8      	b.n	800277c <_printf_i+0x150>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	462a      	mov	r2, r5
 800282e:	4649      	mov	r1, r9
 8002830:	4640      	mov	r0, r8
 8002832:	47d0      	blx	sl
 8002834:	3001      	adds	r0, #1
 8002836:	d0ab      	beq.n	8002790 <_printf_i+0x164>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	079b      	lsls	r3, r3, #30
 800283c:	d413      	bmi.n	8002866 <_printf_i+0x23a>
 800283e:	68e0      	ldr	r0, [r4, #12]
 8002840:	9b03      	ldr	r3, [sp, #12]
 8002842:	4298      	cmp	r0, r3
 8002844:	bfb8      	it	lt
 8002846:	4618      	movlt	r0, r3
 8002848:	e7a4      	b.n	8002794 <_printf_i+0x168>
 800284a:	2301      	movs	r3, #1
 800284c:	4632      	mov	r2, r6
 800284e:	4649      	mov	r1, r9
 8002850:	4640      	mov	r0, r8
 8002852:	47d0      	blx	sl
 8002854:	3001      	adds	r0, #1
 8002856:	d09b      	beq.n	8002790 <_printf_i+0x164>
 8002858:	3501      	adds	r5, #1
 800285a:	68e3      	ldr	r3, [r4, #12]
 800285c:	9903      	ldr	r1, [sp, #12]
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	42ab      	cmp	r3, r5
 8002862:	dcf2      	bgt.n	800284a <_printf_i+0x21e>
 8002864:	e7eb      	b.n	800283e <_printf_i+0x212>
 8002866:	2500      	movs	r5, #0
 8002868:	f104 0619 	add.w	r6, r4, #25
 800286c:	e7f5      	b.n	800285a <_printf_i+0x22e>
 800286e:	bf00      	nop
 8002870:	08002fb9 	.word	0x08002fb9
 8002874:	08002fca 	.word	0x08002fca

08002878 <_sbrk_r>:
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4d06      	ldr	r5, [pc, #24]	; (8002894 <_sbrk_r+0x1c>)
 800287c:	2300      	movs	r3, #0
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	f7ff fad4 	bl	8001e30 <_sbrk>
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	d102      	bne.n	8002892 <_sbrk_r+0x1a>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	b103      	cbz	r3, 8002892 <_sbrk_r+0x1a>
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	bd38      	pop	{r3, r4, r5, pc}
 8002894:	2000011c 	.word	0x2000011c

08002898 <__sread>:
 8002898:	b510      	push	{r4, lr}
 800289a:	460c      	mov	r4, r1
 800289c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a0:	f000 fab2 	bl	8002e08 <_read_r>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bfab      	itete	ge
 80028a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028aa:	89a3      	ldrhlt	r3, [r4, #12]
 80028ac:	181b      	addge	r3, r3, r0
 80028ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028b2:	bfac      	ite	ge
 80028b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80028b6:	81a3      	strhlt	r3, [r4, #12]
 80028b8:	bd10      	pop	{r4, pc}

080028ba <__swrite>:
 80028ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028be:	461f      	mov	r7, r3
 80028c0:	898b      	ldrh	r3, [r1, #12]
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	4605      	mov	r5, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	4616      	mov	r6, r2
 80028ca:	d505      	bpl.n	80028d8 <__swrite+0x1e>
 80028cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d0:	2302      	movs	r3, #2
 80028d2:	2200      	movs	r2, #0
 80028d4:	f000 f9c8 	bl	8002c68 <_lseek_r>
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	4632      	mov	r2, r6
 80028e6:	463b      	mov	r3, r7
 80028e8:	4628      	mov	r0, r5
 80028ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ee:	f000 b869 	b.w	80029c4 <_write_r>

080028f2 <__sseek>:
 80028f2:	b510      	push	{r4, lr}
 80028f4:	460c      	mov	r4, r1
 80028f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028fa:	f000 f9b5 	bl	8002c68 <_lseek_r>
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	bf15      	itete	ne
 8002904:	6560      	strne	r0, [r4, #84]	; 0x54
 8002906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800290a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800290e:	81a3      	strheq	r3, [r4, #12]
 8002910:	bf18      	it	ne
 8002912:	81a3      	strhne	r3, [r4, #12]
 8002914:	bd10      	pop	{r4, pc}

08002916 <__sclose>:
 8002916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291a:	f000 b8d3 	b.w	8002ac4 <_close_r>
	...

08002920 <__swbuf_r>:
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002922:	460e      	mov	r6, r1
 8002924:	4614      	mov	r4, r2
 8002926:	4605      	mov	r5, r0
 8002928:	b118      	cbz	r0, 8002932 <__swbuf_r+0x12>
 800292a:	6983      	ldr	r3, [r0, #24]
 800292c:	b90b      	cbnz	r3, 8002932 <__swbuf_r+0x12>
 800292e:	f7ff fb81 	bl	8002034 <__sinit>
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <__swbuf_r+0x98>)
 8002934:	429c      	cmp	r4, r3
 8002936:	d12b      	bne.n	8002990 <__swbuf_r+0x70>
 8002938:	686c      	ldr	r4, [r5, #4]
 800293a:	69a3      	ldr	r3, [r4, #24]
 800293c:	60a3      	str	r3, [r4, #8]
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	071a      	lsls	r2, r3, #28
 8002942:	d52f      	bpl.n	80029a4 <__swbuf_r+0x84>
 8002944:	6923      	ldr	r3, [r4, #16]
 8002946:	b36b      	cbz	r3, 80029a4 <__swbuf_r+0x84>
 8002948:	6923      	ldr	r3, [r4, #16]
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	1ac0      	subs	r0, r0, r3
 800294e:	6963      	ldr	r3, [r4, #20]
 8002950:	b2f6      	uxtb	r6, r6
 8002952:	4283      	cmp	r3, r0
 8002954:	4637      	mov	r7, r6
 8002956:	dc04      	bgt.n	8002962 <__swbuf_r+0x42>
 8002958:	4621      	mov	r1, r4
 800295a:	4628      	mov	r0, r5
 800295c:	f000 f948 	bl	8002bf0 <_fflush_r>
 8002960:	bb30      	cbnz	r0, 80029b0 <__swbuf_r+0x90>
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	3b01      	subs	r3, #1
 8002966:	60a3      	str	r3, [r4, #8]
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	6022      	str	r2, [r4, #0]
 800296e:	701e      	strb	r6, [r3, #0]
 8002970:	6963      	ldr	r3, [r4, #20]
 8002972:	3001      	adds	r0, #1
 8002974:	4283      	cmp	r3, r0
 8002976:	d004      	beq.n	8002982 <__swbuf_r+0x62>
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	07db      	lsls	r3, r3, #31
 800297c:	d506      	bpl.n	800298c <__swbuf_r+0x6c>
 800297e:	2e0a      	cmp	r6, #10
 8002980:	d104      	bne.n	800298c <__swbuf_r+0x6c>
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	f000 f933 	bl	8002bf0 <_fflush_r>
 800298a:	b988      	cbnz	r0, 80029b0 <__swbuf_r+0x90>
 800298c:	4638      	mov	r0, r7
 800298e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <__swbuf_r+0x9c>)
 8002992:	429c      	cmp	r4, r3
 8002994:	d101      	bne.n	800299a <__swbuf_r+0x7a>
 8002996:	68ac      	ldr	r4, [r5, #8]
 8002998:	e7cf      	b.n	800293a <__swbuf_r+0x1a>
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <__swbuf_r+0xa0>)
 800299c:	429c      	cmp	r4, r3
 800299e:	bf08      	it	eq
 80029a0:	68ec      	ldreq	r4, [r5, #12]
 80029a2:	e7ca      	b.n	800293a <__swbuf_r+0x1a>
 80029a4:	4621      	mov	r1, r4
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 f81e 	bl	80029e8 <__swsetup_r>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d0cb      	beq.n	8002948 <__swbuf_r+0x28>
 80029b0:	f04f 37ff 	mov.w	r7, #4294967295
 80029b4:	e7ea      	b.n	800298c <__swbuf_r+0x6c>
 80029b6:	bf00      	nop
 80029b8:	08002f68 	.word	0x08002f68
 80029bc:	08002f88 	.word	0x08002f88
 80029c0:	08002f48 	.word	0x08002f48

080029c4 <_write_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4d07      	ldr	r5, [pc, #28]	; (80029e4 <_write_r+0x20>)
 80029c8:	4604      	mov	r4, r0
 80029ca:	4608      	mov	r0, r1
 80029cc:	4611      	mov	r1, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	602a      	str	r2, [r5, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f7ff f9db 	bl	8001d8e <_write>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d102      	bne.n	80029e2 <_write_r+0x1e>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	b103      	cbz	r3, 80029e2 <_write_r+0x1e>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	2000011c 	.word	0x2000011c

080029e8 <__swsetup_r>:
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <__swsetup_r+0xcc>)
 80029ea:	b570      	push	{r4, r5, r6, lr}
 80029ec:	681d      	ldr	r5, [r3, #0]
 80029ee:	4606      	mov	r6, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	b125      	cbz	r5, 80029fe <__swsetup_r+0x16>
 80029f4:	69ab      	ldr	r3, [r5, #24]
 80029f6:	b913      	cbnz	r3, 80029fe <__swsetup_r+0x16>
 80029f8:	4628      	mov	r0, r5
 80029fa:	f7ff fb1b 	bl	8002034 <__sinit>
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <__swsetup_r+0xd0>)
 8002a00:	429c      	cmp	r4, r3
 8002a02:	d10f      	bne.n	8002a24 <__swsetup_r+0x3c>
 8002a04:	686c      	ldr	r4, [r5, #4]
 8002a06:	89a3      	ldrh	r3, [r4, #12]
 8002a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a0c:	0719      	lsls	r1, r3, #28
 8002a0e:	d42c      	bmi.n	8002a6a <__swsetup_r+0x82>
 8002a10:	06dd      	lsls	r5, r3, #27
 8002a12:	d411      	bmi.n	8002a38 <__swsetup_r+0x50>
 8002a14:	2309      	movs	r3, #9
 8002a16:	6033      	str	r3, [r6, #0]
 8002a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a22:	e03e      	b.n	8002aa2 <__swsetup_r+0xba>
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <__swsetup_r+0xd4>)
 8002a26:	429c      	cmp	r4, r3
 8002a28:	d101      	bne.n	8002a2e <__swsetup_r+0x46>
 8002a2a:	68ac      	ldr	r4, [r5, #8]
 8002a2c:	e7eb      	b.n	8002a06 <__swsetup_r+0x1e>
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <__swsetup_r+0xd8>)
 8002a30:	429c      	cmp	r4, r3
 8002a32:	bf08      	it	eq
 8002a34:	68ec      	ldreq	r4, [r5, #12]
 8002a36:	e7e6      	b.n	8002a06 <__swsetup_r+0x1e>
 8002a38:	0758      	lsls	r0, r3, #29
 8002a3a:	d512      	bpl.n	8002a62 <__swsetup_r+0x7a>
 8002a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a3e:	b141      	cbz	r1, 8002a52 <__swsetup_r+0x6a>
 8002a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a44:	4299      	cmp	r1, r3
 8002a46:	d002      	beq.n	8002a4e <__swsetup_r+0x66>
 8002a48:	4630      	mov	r0, r6
 8002a4a:	f000 f991 	bl	8002d70 <_free_r>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6363      	str	r3, [r4, #52]	; 0x34
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6063      	str	r3, [r4, #4]
 8002a5e:	6923      	ldr	r3, [r4, #16]
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	81a3      	strh	r3, [r4, #12]
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	b94b      	cbnz	r3, 8002a82 <__swsetup_r+0x9a>
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a78:	d003      	beq.n	8002a82 <__swsetup_r+0x9a>
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f000 f92b 	bl	8002cd8 <__smakebuf_r>
 8002a82:	89a0      	ldrh	r0, [r4, #12]
 8002a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a88:	f010 0301 	ands.w	r3, r0, #1
 8002a8c:	d00a      	beq.n	8002aa4 <__swsetup_r+0xbc>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60a3      	str	r3, [r4, #8]
 8002a92:	6963      	ldr	r3, [r4, #20]
 8002a94:	425b      	negs	r3, r3
 8002a96:	61a3      	str	r3, [r4, #24]
 8002a98:	6923      	ldr	r3, [r4, #16]
 8002a9a:	b943      	cbnz	r3, 8002aae <__swsetup_r+0xc6>
 8002a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002aa0:	d1ba      	bne.n	8002a18 <__swsetup_r+0x30>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	0781      	lsls	r1, r0, #30
 8002aa6:	bf58      	it	pl
 8002aa8:	6963      	ldrpl	r3, [r4, #20]
 8002aaa:	60a3      	str	r3, [r4, #8]
 8002aac:	e7f4      	b.n	8002a98 <__swsetup_r+0xb0>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e7f7      	b.n	8002aa2 <__swsetup_r+0xba>
 8002ab2:	bf00      	nop
 8002ab4:	20000034 	.word	0x20000034
 8002ab8:	08002f68 	.word	0x08002f68
 8002abc:	08002f88 	.word	0x08002f88
 8002ac0:	08002f48 	.word	0x08002f48

08002ac4 <_close_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4d06      	ldr	r5, [pc, #24]	; (8002ae0 <_close_r+0x1c>)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	4604      	mov	r4, r0
 8002acc:	4608      	mov	r0, r1
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	f7ff f979 	bl	8001dc6 <_close>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_close_r+0x1a>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_close_r+0x1a>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	2000011c 	.word	0x2000011c

08002ae4 <__sflush_r>:
 8002ae4:	898a      	ldrh	r2, [r1, #12]
 8002ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aea:	4605      	mov	r5, r0
 8002aec:	0710      	lsls	r0, r2, #28
 8002aee:	460c      	mov	r4, r1
 8002af0:	d458      	bmi.n	8002ba4 <__sflush_r+0xc0>
 8002af2:	684b      	ldr	r3, [r1, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	dc05      	bgt.n	8002b04 <__sflush_r+0x20>
 8002af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	dc02      	bgt.n	8002b04 <__sflush_r+0x20>
 8002afe:	2000      	movs	r0, #0
 8002b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b06:	2e00      	cmp	r6, #0
 8002b08:	d0f9      	beq.n	8002afe <__sflush_r+0x1a>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b10:	682f      	ldr	r7, [r5, #0]
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	d032      	beq.n	8002b7c <__sflush_r+0x98>
 8002b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b18:	89a3      	ldrh	r3, [r4, #12]
 8002b1a:	075a      	lsls	r2, r3, #29
 8002b1c:	d505      	bpl.n	8002b2a <__sflush_r+0x46>
 8002b1e:	6863      	ldr	r3, [r4, #4]
 8002b20:	1ac0      	subs	r0, r0, r3
 8002b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b24:	b10b      	cbz	r3, 8002b2a <__sflush_r+0x46>
 8002b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b28:	1ac0      	subs	r0, r0, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b30:	6a21      	ldr	r1, [r4, #32]
 8002b32:	4628      	mov	r0, r5
 8002b34:	47b0      	blx	r6
 8002b36:	1c43      	adds	r3, r0, #1
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	d106      	bne.n	8002b4a <__sflush_r+0x66>
 8002b3c:	6829      	ldr	r1, [r5, #0]
 8002b3e:	291d      	cmp	r1, #29
 8002b40:	d82c      	bhi.n	8002b9c <__sflush_r+0xb8>
 8002b42:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <__sflush_r+0x108>)
 8002b44:	40ca      	lsrs	r2, r1
 8002b46:	07d6      	lsls	r6, r2, #31
 8002b48:	d528      	bpl.n	8002b9c <__sflush_r+0xb8>
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	6062      	str	r2, [r4, #4]
 8002b4e:	04d9      	lsls	r1, r3, #19
 8002b50:	6922      	ldr	r2, [r4, #16]
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	d504      	bpl.n	8002b60 <__sflush_r+0x7c>
 8002b56:	1c42      	adds	r2, r0, #1
 8002b58:	d101      	bne.n	8002b5e <__sflush_r+0x7a>
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	b903      	cbnz	r3, 8002b60 <__sflush_r+0x7c>
 8002b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8002b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b62:	602f      	str	r7, [r5, #0]
 8002b64:	2900      	cmp	r1, #0
 8002b66:	d0ca      	beq.n	8002afe <__sflush_r+0x1a>
 8002b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b6c:	4299      	cmp	r1, r3
 8002b6e:	d002      	beq.n	8002b76 <__sflush_r+0x92>
 8002b70:	4628      	mov	r0, r5
 8002b72:	f000 f8fd 	bl	8002d70 <_free_r>
 8002b76:	2000      	movs	r0, #0
 8002b78:	6360      	str	r0, [r4, #52]	; 0x34
 8002b7a:	e7c1      	b.n	8002b00 <__sflush_r+0x1c>
 8002b7c:	6a21      	ldr	r1, [r4, #32]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4628      	mov	r0, r5
 8002b82:	47b0      	blx	r6
 8002b84:	1c41      	adds	r1, r0, #1
 8002b86:	d1c7      	bne.n	8002b18 <__sflush_r+0x34>
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0c4      	beq.n	8002b18 <__sflush_r+0x34>
 8002b8e:	2b1d      	cmp	r3, #29
 8002b90:	d001      	beq.n	8002b96 <__sflush_r+0xb2>
 8002b92:	2b16      	cmp	r3, #22
 8002b94:	d101      	bne.n	8002b9a <__sflush_r+0xb6>
 8002b96:	602f      	str	r7, [r5, #0]
 8002b98:	e7b1      	b.n	8002afe <__sflush_r+0x1a>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	e7ad      	b.n	8002b00 <__sflush_r+0x1c>
 8002ba4:	690f      	ldr	r7, [r1, #16]
 8002ba6:	2f00      	cmp	r7, #0
 8002ba8:	d0a9      	beq.n	8002afe <__sflush_r+0x1a>
 8002baa:	0793      	lsls	r3, r2, #30
 8002bac:	680e      	ldr	r6, [r1, #0]
 8002bae:	bf08      	it	eq
 8002bb0:	694b      	ldreq	r3, [r1, #20]
 8002bb2:	600f      	str	r7, [r1, #0]
 8002bb4:	bf18      	it	ne
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	eba6 0807 	sub.w	r8, r6, r7
 8002bbc:	608b      	str	r3, [r1, #8]
 8002bbe:	f1b8 0f00 	cmp.w	r8, #0
 8002bc2:	dd9c      	ble.n	8002afe <__sflush_r+0x1a>
 8002bc4:	6a21      	ldr	r1, [r4, #32]
 8002bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bc8:	4643      	mov	r3, r8
 8002bca:	463a      	mov	r2, r7
 8002bcc:	4628      	mov	r0, r5
 8002bce:	47b0      	blx	r6
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	dc06      	bgt.n	8002be2 <__sflush_r+0xfe>
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002be0:	e78e      	b.n	8002b00 <__sflush_r+0x1c>
 8002be2:	4407      	add	r7, r0
 8002be4:	eba8 0800 	sub.w	r8, r8, r0
 8002be8:	e7e9      	b.n	8002bbe <__sflush_r+0xda>
 8002bea:	bf00      	nop
 8002bec:	20400001 	.word	0x20400001

08002bf0 <_fflush_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	690b      	ldr	r3, [r1, #16]
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	b913      	cbnz	r3, 8002c00 <_fflush_r+0x10>
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
 8002c00:	b118      	cbz	r0, 8002c0a <_fflush_r+0x1a>
 8002c02:	6983      	ldr	r3, [r0, #24]
 8002c04:	b90b      	cbnz	r3, 8002c0a <_fflush_r+0x1a>
 8002c06:	f7ff fa15 	bl	8002034 <__sinit>
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <_fflush_r+0x6c>)
 8002c0c:	429c      	cmp	r4, r3
 8002c0e:	d11b      	bne.n	8002c48 <_fflush_r+0x58>
 8002c10:	686c      	ldr	r4, [r5, #4]
 8002c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ef      	beq.n	8002bfa <_fflush_r+0xa>
 8002c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c1c:	07d0      	lsls	r0, r2, #31
 8002c1e:	d404      	bmi.n	8002c2a <_fflush_r+0x3a>
 8002c20:	0599      	lsls	r1, r3, #22
 8002c22:	d402      	bmi.n	8002c2a <_fflush_r+0x3a>
 8002c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c26:	f7ff faa3 	bl	8002170 <__retarget_lock_acquire_recursive>
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	f7ff ff59 	bl	8002ae4 <__sflush_r>
 8002c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c34:	07da      	lsls	r2, r3, #31
 8002c36:	4605      	mov	r5, r0
 8002c38:	d4e0      	bmi.n	8002bfc <_fflush_r+0xc>
 8002c3a:	89a3      	ldrh	r3, [r4, #12]
 8002c3c:	059b      	lsls	r3, r3, #22
 8002c3e:	d4dd      	bmi.n	8002bfc <_fflush_r+0xc>
 8002c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c42:	f7ff fa96 	bl	8002172 <__retarget_lock_release_recursive>
 8002c46:	e7d9      	b.n	8002bfc <_fflush_r+0xc>
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <_fflush_r+0x70>)
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d101      	bne.n	8002c52 <_fflush_r+0x62>
 8002c4e:	68ac      	ldr	r4, [r5, #8]
 8002c50:	e7df      	b.n	8002c12 <_fflush_r+0x22>
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <_fflush_r+0x74>)
 8002c54:	429c      	cmp	r4, r3
 8002c56:	bf08      	it	eq
 8002c58:	68ec      	ldreq	r4, [r5, #12]
 8002c5a:	e7da      	b.n	8002c12 <_fflush_r+0x22>
 8002c5c:	08002f68 	.word	0x08002f68
 8002c60:	08002f88 	.word	0x08002f88
 8002c64:	08002f48 	.word	0x08002f48

08002c68 <_lseek_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4d07      	ldr	r5, [pc, #28]	; (8002c88 <_lseek_r+0x20>)
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	602a      	str	r2, [r5, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff f8cc 	bl	8001e14 <_lseek>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_lseek_r+0x1e>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_lseek_r+0x1e>
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	2000011c 	.word	0x2000011c

08002c8c <__swhatbuf_r>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	460e      	mov	r6, r1
 8002c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c94:	2900      	cmp	r1, #0
 8002c96:	b096      	sub	sp, #88	; 0x58
 8002c98:	4614      	mov	r4, r2
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	da08      	bge.n	8002cb0 <__swhatbuf_r+0x24>
 8002c9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	602a      	str	r2, [r5, #0]
 8002ca6:	061a      	lsls	r2, r3, #24
 8002ca8:	d410      	bmi.n	8002ccc <__swhatbuf_r+0x40>
 8002caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cae:	e00e      	b.n	8002cce <__swhatbuf_r+0x42>
 8002cb0:	466a      	mov	r2, sp
 8002cb2:	f000 f8bb 	bl	8002e2c <_fstat_r>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	dbf1      	blt.n	8002c9e <__swhatbuf_r+0x12>
 8002cba:	9a01      	ldr	r2, [sp, #4]
 8002cbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cc4:	425a      	negs	r2, r3
 8002cc6:	415a      	adcs	r2, r3
 8002cc8:	602a      	str	r2, [r5, #0]
 8002cca:	e7ee      	b.n	8002caa <__swhatbuf_r+0x1e>
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	2000      	movs	r0, #0
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	b016      	add	sp, #88	; 0x58
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cd8 <__smakebuf_r>:
 8002cd8:	898b      	ldrh	r3, [r1, #12]
 8002cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cdc:	079d      	lsls	r5, r3, #30
 8002cde:	4606      	mov	r6, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	d507      	bpl.n	8002cf4 <__smakebuf_r+0x1c>
 8002ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	2301      	movs	r3, #1
 8002cee:	6163      	str	r3, [r4, #20]
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	ab01      	add	r3, sp, #4
 8002cf6:	466a      	mov	r2, sp
 8002cf8:	f7ff ffc8 	bl	8002c8c <__swhatbuf_r>
 8002cfc:	9900      	ldr	r1, [sp, #0]
 8002cfe:	4605      	mov	r5, r0
 8002d00:	4630      	mov	r0, r6
 8002d02:	f7ff fa57 	bl	80021b4 <_malloc_r>
 8002d06:	b948      	cbnz	r0, 8002d1c <__smakebuf_r+0x44>
 8002d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d0c:	059a      	lsls	r2, r3, #22
 8002d0e:	d4ef      	bmi.n	8002cf0 <__smakebuf_r+0x18>
 8002d10:	f023 0303 	bic.w	r3, r3, #3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	81a3      	strh	r3, [r4, #12]
 8002d1a:	e7e3      	b.n	8002ce4 <__smakebuf_r+0xc>
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <__smakebuf_r+0x7c>)
 8002d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	6020      	str	r0, [r4, #0]
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	9b00      	ldr	r3, [sp, #0]
 8002d2c:	6163      	str	r3, [r4, #20]
 8002d2e:	9b01      	ldr	r3, [sp, #4]
 8002d30:	6120      	str	r0, [r4, #16]
 8002d32:	b15b      	cbz	r3, 8002d4c <__smakebuf_r+0x74>
 8002d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f000 f889 	bl	8002e50 <_isatty_r>
 8002d3e:	b128      	cbz	r0, 8002d4c <__smakebuf_r+0x74>
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	81a3      	strh	r3, [r4, #12]
 8002d4c:	89a0      	ldrh	r0, [r4, #12]
 8002d4e:	4305      	orrs	r5, r0
 8002d50:	81a5      	strh	r5, [r4, #12]
 8002d52:	e7cd      	b.n	8002cf0 <__smakebuf_r+0x18>
 8002d54:	08001fcd 	.word	0x08001fcd

08002d58 <__malloc_lock>:
 8002d58:	4801      	ldr	r0, [pc, #4]	; (8002d60 <__malloc_lock+0x8>)
 8002d5a:	f7ff ba09 	b.w	8002170 <__retarget_lock_acquire_recursive>
 8002d5e:	bf00      	nop
 8002d60:	20000110 	.word	0x20000110

08002d64 <__malloc_unlock>:
 8002d64:	4801      	ldr	r0, [pc, #4]	; (8002d6c <__malloc_unlock+0x8>)
 8002d66:	f7ff ba04 	b.w	8002172 <__retarget_lock_release_recursive>
 8002d6a:	bf00      	nop
 8002d6c:	20000110 	.word	0x20000110

08002d70 <_free_r>:
 8002d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d72:	2900      	cmp	r1, #0
 8002d74:	d044      	beq.n	8002e00 <_free_r+0x90>
 8002d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d7a:	9001      	str	r0, [sp, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d82:	bfb8      	it	lt
 8002d84:	18e4      	addlt	r4, r4, r3
 8002d86:	f7ff ffe7 	bl	8002d58 <__malloc_lock>
 8002d8a:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <_free_r+0x94>)
 8002d8c:	9801      	ldr	r0, [sp, #4]
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	b933      	cbnz	r3, 8002da0 <_free_r+0x30>
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	6014      	str	r4, [r2, #0]
 8002d96:	b003      	add	sp, #12
 8002d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d9c:	f7ff bfe2 	b.w	8002d64 <__malloc_unlock>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d908      	bls.n	8002db6 <_free_r+0x46>
 8002da4:	6825      	ldr	r5, [r4, #0]
 8002da6:	1961      	adds	r1, r4, r5
 8002da8:	428b      	cmp	r3, r1
 8002daa:	bf01      	itttt	eq
 8002dac:	6819      	ldreq	r1, [r3, #0]
 8002dae:	685b      	ldreq	r3, [r3, #4]
 8002db0:	1949      	addeq	r1, r1, r5
 8002db2:	6021      	streq	r1, [r4, #0]
 8002db4:	e7ed      	b.n	8002d92 <_free_r+0x22>
 8002db6:	461a      	mov	r2, r3
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b10b      	cbz	r3, 8002dc0 <_free_r+0x50>
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	d9fa      	bls.n	8002db6 <_free_r+0x46>
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	1855      	adds	r5, r2, r1
 8002dc4:	42a5      	cmp	r5, r4
 8002dc6:	d10b      	bne.n	8002de0 <_free_r+0x70>
 8002dc8:	6824      	ldr	r4, [r4, #0]
 8002dca:	4421      	add	r1, r4
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	42a3      	cmp	r3, r4
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	d1e0      	bne.n	8002d96 <_free_r+0x26>
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	6053      	str	r3, [r2, #4]
 8002dda:	4421      	add	r1, r4
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	e7da      	b.n	8002d96 <_free_r+0x26>
 8002de0:	d902      	bls.n	8002de8 <_free_r+0x78>
 8002de2:	230c      	movs	r3, #12
 8002de4:	6003      	str	r3, [r0, #0]
 8002de6:	e7d6      	b.n	8002d96 <_free_r+0x26>
 8002de8:	6825      	ldr	r5, [r4, #0]
 8002dea:	1961      	adds	r1, r4, r5
 8002dec:	428b      	cmp	r3, r1
 8002dee:	bf04      	itt	eq
 8002df0:	6819      	ldreq	r1, [r3, #0]
 8002df2:	685b      	ldreq	r3, [r3, #4]
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	bf04      	itt	eq
 8002df8:	1949      	addeq	r1, r1, r5
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6054      	str	r4, [r2, #4]
 8002dfe:	e7ca      	b.n	8002d96 <_free_r+0x26>
 8002e00:	b003      	add	sp, #12
 8002e02:	bd30      	pop	{r4, r5, pc}
 8002e04:	20000114 	.word	0x20000114

08002e08 <_read_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d07      	ldr	r5, [pc, #28]	; (8002e28 <_read_r+0x20>)
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4608      	mov	r0, r1
 8002e10:	4611      	mov	r1, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7fe ff9c 	bl	8001d54 <_read>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_read_r+0x1e>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_read_r+0x1e>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	2000011c 	.word	0x2000011c

08002e2c <_fstat_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4d07      	ldr	r5, [pc, #28]	; (8002e4c <_fstat_r+0x20>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	602b      	str	r3, [r5, #0]
 8002e3a:	f7fe ffd0 	bl	8001dde <_fstat>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	d102      	bne.n	8002e48 <_fstat_r+0x1c>
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	b103      	cbz	r3, 8002e48 <_fstat_r+0x1c>
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000011c 	.word	0x2000011c

08002e50 <_isatty_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d06      	ldr	r5, [pc, #24]	; (8002e6c <_isatty_r+0x1c>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	f7fe ffcf 	bl	8001dfe <_isatty>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_isatty_r+0x1a>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_isatty_r+0x1a>
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	2000011c 	.word	0x2000011c

08002e70 <_init>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr

08002e7c <_fini>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	bf00      	nop
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr
