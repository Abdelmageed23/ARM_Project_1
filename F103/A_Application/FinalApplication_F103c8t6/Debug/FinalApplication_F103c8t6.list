
FinalApplication_F103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000176c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001938  08001938  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001938  08001938  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001938  08001938  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001938  08001938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000050  08001990  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08001990  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f67  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c6b  00000000  00000000  00023fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00024c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00025030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000be8  00000000  00000000  00025368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000402e  00000000  00000000  00025f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007556  00000000  00000000  00029f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000314d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d14  00000000  00000000  00031524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	08001884 	.word	0x08001884

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	08001884 	.word	0x08001884

08000170 <DMA1_Channel1_IRQHandler>:

}


void DMA1_Channel1_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL1_SHIFT;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <DMA1_Channel1_IRQHandler+0x14>)
 8000176:	2207      	movs	r2, #7
 8000178:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL1]();
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <DMA1_Channel1_IRQHandler+0x18>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4798      	blx	r3
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40020000 	.word	0x40020000
 8000188:	2000006c 	.word	0x2000006c

0800018c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL2_SHIFT;
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <DMA1_Channel2_IRQHandler+0x14>)
 8000192:	2270      	movs	r2, #112	; 0x70
 8000194:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL2]();
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <DMA1_Channel2_IRQHandler+0x18>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	4798      	blx	r3

}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40020000 	.word	0x40020000
 80001a4:	2000006c 	.word	0x2000006c

080001a8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL3_SHIFT;
 80001ac:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <DMA1_Channel3_IRQHandler+0x18>)
 80001ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80001b2:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL3]();
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <DMA1_Channel3_IRQHandler+0x1c>)
 80001b6:	689b      	ldr	r3, [r3, #8]
 80001b8:	4798      	blx	r3

}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40020000 	.word	0x40020000
 80001c4:	2000006c 	.word	0x2000006c

080001c8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL4_SHIFT;
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <DMA1_Channel4_IRQHandler+0x18>)
 80001ce:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80001d2:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL4]();
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <DMA1_Channel4_IRQHandler+0x1c>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	4798      	blx	r3
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40020000 	.word	0x40020000
 80001e4:	2000006c 	.word	0x2000006c

080001e8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL5_SHIFT;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <DMA1_Channel5_IRQHandler+0x18>)
 80001ee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80001f2:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL5]();
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <DMA1_Channel5_IRQHandler+0x1c>)
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	4798      	blx	r3
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40020000 	.word	0x40020000
 8000204:	2000006c 	.word	0x2000006c

08000208 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL6_SHIFT;
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <DMA1_Channel6_IRQHandler+0x18>)
 800020e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000212:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL6]();
 8000214:	4b03      	ldr	r3, [pc, #12]	; (8000224 <DMA1_Channel6_IRQHandler+0x1c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4798      	blx	r3
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000
 8000224:	2000006c 	.word	0x2000006c

08000228 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	DMA1->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL7_SHIFT;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <DMA1_Channel7_IRQHandler+0x18>)
 800022e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000232:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL7]();
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <DMA1_Channel7_IRQHandler+0x1c>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4798      	blx	r3
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020000 	.word	0x40020000
 8000244:	2000006c 	.word	0x2000006c

08000248 <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL1_SHIFT;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <DMA2_Channel1_IRQHandler+0x14>)
 800024e:	2207      	movs	r2, #7
 8000250:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL1+DMA1_IRQ_NUM]();
 8000252:	4b03      	ldr	r3, [pc, #12]	; (8000260 <DMA2_Channel1_IRQHandler+0x18>)
 8000254:	69db      	ldr	r3, [r3, #28]
 8000256:	4798      	blx	r3
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40020400 	.word	0x40020400
 8000260:	2000006c 	.word	0x2000006c

08000264 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL2_SHIFT;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <DMA2_Channel2_IRQHandler+0x14>)
 800026a:	2270      	movs	r2, #112	; 0x70
 800026c:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL2+DMA1_IRQ_NUM]();
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <DMA2_Channel2_IRQHandler+0x18>)
 8000270:	6a1b      	ldr	r3, [r3, #32]
 8000272:	4798      	blx	r3
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40020400 	.word	0x40020400
 800027c:	2000006c 	.word	0x2000006c

08000280 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL3_SHIFT;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <DMA2_Channel3_IRQHandler+0x18>)
 8000286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800028a:	605a      	str	r2, [r3, #4]

	GeneralCallBackFun[CHANNEL3+DMA1_IRQ_NUM]();
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <DMA2_Channel3_IRQHandler+0x1c>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000290:	4798      	blx	r3
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020400 	.word	0x40020400
 800029c:	2000006c 	.word	0x2000006c

080002a0 <DMA2_Channel4_5_IRQHandler>:
void DMA2_Channel4_5_IRQHandler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if(((DMA2->ISR >> DMA_GIF5_SHIFT)&1) == DMA_FLAG_RISED)
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <DMA2_Channel4_5_IRQHandler+0x34>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	095b      	lsrs	r3, r3, #5
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d107      	bne.n	80002c2 <DMA2_Channel4_5_IRQHandler+0x22>
	{
		DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL4_SHIFT;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <DMA2_Channel4_5_IRQHandler+0x34>)
 80002b4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80002b8:	605a      	str	r2, [r3, #4]

		GeneralCallBackFun[CHANNEL4+DMA1_IRQ_NUM]();
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <DMA2_Channel4_5_IRQHandler+0x38>)
 80002bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002be:	4798      	blx	r3
		DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL5_SHIFT;

		GeneralCallBackFun[CHANNEL5+DMA1_IRQ_NUM]();
	}

}
 80002c0:	e006      	b.n	80002d0 <DMA2_Channel4_5_IRQHandler+0x30>
		DMA2->IFCR = DMA_ICF_MASK << DMA_ICF_CHANNEL5_SHIFT;
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <DMA2_Channel4_5_IRQHandler+0x34>)
 80002c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80002c8:	605a      	str	r2, [r3, #4]
		GeneralCallBackFun[CHANNEL5+DMA1_IRQ_NUM]();
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <DMA2_Channel4_5_IRQHandler+0x38>)
 80002cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ce:	4798      	blx	r3
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40020400 	.word	0x40020400
 80002d8:	2000006c 	.word	0x2000006c

080002dc <EXTI_u8Init>:

#include "EXTI_interface.h"
#include "EXTI_prv.h"

uint8_t EXTI_u8Init(EXTI_CONFIG_ty *Config)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK;
 80002e4:	2301      	movs	r3, #1
 80002e6:	73fb      	strb	r3, [r7, #15]
	if((Config != NULL)&&(NULL!=(Config->Copy_pvUserFunc)))
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f000 808b 	beq.w	8000406 <EXTI_u8Init+0x12a>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	f000 8086 	beq.w	8000406 <EXTI_u8Init+0x12a>
	{
		if(((Config->Port) <= EXTI_PORTG)&&((Config->Line) <= EXTI_PIN15)&&((Config->InterruptState)<=EXTI_ENABLE))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b06      	cmp	r3, #6
 8000300:	d87e      	bhi.n	8000400 <EXTI_u8Init+0x124>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	2b0f      	cmp	r3, #15
 8000308:	d87a      	bhi.n	8000400 <EXTI_u8Init+0x124>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d876      	bhi.n	8000400 <EXTI_u8Init+0x124>
		{
			switch ((Config->Trig_Src))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d036      	beq.n	8000388 <EXTI_u8Init+0xac>
 800031a:	2b02      	cmp	r3, #2
 800031c:	dc4b      	bgt.n	80003b6 <EXTI_u8Init+0xda>
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <EXTI_u8Init+0x4c>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d018      	beq.n	8000358 <EXTI_u8Init+0x7c>
 8000326:	e046      	b.n	80003b6 <EXTI_u8Init+0xda>
			{
			case EXTI_RISING_TRIG:
				EXTI->EXTI_RTSR |= (1<<(Config->Line));
 8000328:	4b3b      	ldr	r3, [pc, #236]	; (8000418 <EXTI_u8Init+0x13c>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	7852      	ldrb	r2, [r2, #1]
 8000330:	4611      	mov	r1, r2
 8000332:	2201      	movs	r2, #1
 8000334:	408a      	lsls	r2, r1
 8000336:	4611      	mov	r1, r2
 8000338:	4a37      	ldr	r2, [pc, #220]	; (8000418 <EXTI_u8Init+0x13c>)
 800033a:	430b      	orrs	r3, r1
 800033c:	6093      	str	r3, [r2, #8]
				EXTI->EXTI_FTSR &=~(1<<(Config->Line));
 800033e:	4b36      	ldr	r3, [pc, #216]	; (8000418 <EXTI_u8Init+0x13c>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7852      	ldrb	r2, [r2, #1]
 8000346:	4611      	mov	r1, r2
 8000348:	2201      	movs	r2, #1
 800034a:	408a      	lsls	r2, r1
 800034c:	43d2      	mvns	r2, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a31      	ldr	r2, [pc, #196]	; (8000418 <EXTI_u8Init+0x13c>)
 8000352:	400b      	ands	r3, r1
 8000354:	60d3      	str	r3, [r2, #12]
				break;
 8000356:	e031      	b.n	80003bc <EXTI_u8Init+0xe0>
			case EXTI_FALLING_TRIG:
				EXTI->EXTI_RTSR &=~(1<<(Config->Line));
 8000358:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <EXTI_u8Init+0x13c>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	7852      	ldrb	r2, [r2, #1]
 8000360:	4611      	mov	r1, r2
 8000362:	2201      	movs	r2, #1
 8000364:	408a      	lsls	r2, r1
 8000366:	43d2      	mvns	r2, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a2b      	ldr	r2, [pc, #172]	; (8000418 <EXTI_u8Init+0x13c>)
 800036c:	400b      	ands	r3, r1
 800036e:	6093      	str	r3, [r2, #8]
				EXTI->EXTI_FTSR |= (1<<(Config->Line));
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <EXTI_u8Init+0x13c>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7852      	ldrb	r2, [r2, #1]
 8000378:	4611      	mov	r1, r2
 800037a:	2201      	movs	r2, #1
 800037c:	408a      	lsls	r2, r1
 800037e:	4611      	mov	r1, r2
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <EXTI_u8Init+0x13c>)
 8000382:	430b      	orrs	r3, r1
 8000384:	60d3      	str	r3, [r2, #12]
				break;
 8000386:	e019      	b.n	80003bc <EXTI_u8Init+0xe0>
			case EXTI_FALLING_RISING_TRIG:
				EXTI->EXTI_RTSR |= (1<<(Config->Line));
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <EXTI_u8Init+0x13c>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	7852      	ldrb	r2, [r2, #1]
 8000390:	4611      	mov	r1, r2
 8000392:	2201      	movs	r2, #1
 8000394:	408a      	lsls	r2, r1
 8000396:	4611      	mov	r1, r2
 8000398:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <EXTI_u8Init+0x13c>)
 800039a:	430b      	orrs	r3, r1
 800039c:	6093      	str	r3, [r2, #8]
				EXTI->EXTI_FTSR |= (1<<(Config->Line));
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <EXTI_u8Init+0x13c>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	7852      	ldrb	r2, [r2, #1]
 80003a6:	4611      	mov	r1, r2
 80003a8:	2201      	movs	r2, #1
 80003aa:	408a      	lsls	r2, r1
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <EXTI_u8Init+0x13c>)
 80003b0:	430b      	orrs	r3, r1
 80003b2:	60d3      	str	r3, [r2, #12]
				break;
 80003b4:	e002      	b.n	80003bc <EXTI_u8Init+0xe0>
			
			default:
				Local_u8ErrorState = NOK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	73fb      	strb	r3, [r7, #15]
				break;
 80003ba:	bf00      	nop
			}
			EXTI_pvGlobCallBackLine[Config->Line] = (Config->Copy_pvUserFunc);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	4619      	mov	r1, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <EXTI_u8Init+0x140>)
 80003c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			/*Interrupt set*/
			EXTI->EXTI_IMR &=~(1<<(Config->Line));/*Bit Masking*/
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <EXTI_u8Init+0x13c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7852      	ldrb	r2, [r2, #1]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <EXTI_u8Init+0x13c>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6013      	str	r3, [r2, #0]
			EXTI->EXTI_IMR |=((Config->InterruptState)<<(Config->Line));
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <EXTI_u8Init+0x13c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7892      	ldrb	r2, [r2, #2]
 80003ec:	4611      	mov	r1, r2
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	7852      	ldrb	r2, [r2, #1]
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <EXTI_u8Init+0x13c>)
 80003fa:	430b      	orrs	r3, r1
 80003fc:	6013      	str	r3, [r2, #0]
		if(((Config->Port) <= EXTI_PORTG)&&((Config->Line) <= EXTI_PIN15)&&((Config->InterruptState)<=EXTI_ENABLE))
 80003fe:	e004      	b.n	800040a <EXTI_u8Init+0x12e>
			EXTI->EXTI_EMR |=((Config->EventState)<<(Config->Line));
			*/
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
		if(((Config->Port) <= EXTI_PORTG)&&((Config->Line) <= EXTI_PIN15)&&((Config->InterruptState)<=EXTI_ENABLE))
 8000404:	e001      	b.n	800040a <EXTI_u8Init+0x12e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000406:	2302      	movs	r3, #2
 8000408:	73fb      	strb	r3, [r7, #15]
	}
	return  Local_u8ErrorState ;
 800040a:	7bfb      	ldrb	r3, [r7, #15]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	20000098 	.word	0x20000098

08000420 <EXTI0_IRQHandler>:
{
	*RegisterValue = (EXTI->EXTI_PR);
}
/*ISR Functions*/
void EXTI0_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[0])
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <EXTI0_IRQHandler+0x24>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d008      	beq.n	800043e <EXTI0_IRQHandler+0x1e>
	{
		EXTI->EXTI_PR |=(1<<0);
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <EXTI0_IRQHandler+0x28>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <EXTI0_IRQHandler+0x28>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6153      	str	r3, [r2, #20]
		EXTI_pvGlobCallBackLine[0]();
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <EXTI0_IRQHandler+0x24>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4798      	blx	r3
	}
	
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000098 	.word	0x20000098
 8000448:	40010400 	.word	0x40010400

0800044c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[1])
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <EXTI1_IRQHandler+0x18>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d002      	beq.n	800045e <EXTI1_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[1]();
 8000458:	4b02      	ldr	r3, [pc, #8]	; (8000464 <EXTI1_IRQHandler+0x18>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4798      	blx	r3
	}
	
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000098 	.word	0x20000098

08000468 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[2])
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <EXTI2_IRQHandler+0x18>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <EXTI2_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[2]();
 8000474:	4b02      	ldr	r3, [pc, #8]	; (8000480 <EXTI2_IRQHandler+0x18>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4798      	blx	r3
	}
	
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000098 	.word	0x20000098

08000484 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[3])
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <EXTI3_IRQHandler+0x18>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d002      	beq.n	8000496 <EXTI3_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[3]();
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <EXTI3_IRQHandler+0x18>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4798      	blx	r3
	}
	
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000098 	.word	0x20000098

080004a0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if (NULL!=EXTI_pvGlobCallBackLine[4])
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <EXTI4_IRQHandler+0x18>)
 80004a6:	691b      	ldr	r3, [r3, #16]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <EXTI4_IRQHandler+0x12>
	{
		EXTI_pvGlobCallBackLine[4]();
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <EXTI4_IRQHandler+0x18>)
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	4798      	blx	r3
	}
	
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000098 	.word	0x20000098

080004bc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if(((EXTI->EXTI_PR)>>5)& 1)
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <EXTI9_5_IRQHandler+0x94>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	095b      	lsrs	r3, r3, #5
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d006      	beq.n	80004dc <EXTI9_5_IRQHandler+0x20>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[5])
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <EXTI9_5_IRQHandler+0x20>
		{
			EXTI_pvGlobCallBackLine[5]();
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>6)& 1)
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <EXTI9_5_IRQHandler+0x94>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	099b      	lsrs	r3, r3, #6
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <EXTI9_5_IRQHandler+0x3c>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[6])
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d002      	beq.n	80004f8 <EXTI9_5_IRQHandler+0x3c>
		{
			EXTI_pvGlobCallBackLine[6]();
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>7)& 1)
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <EXTI9_5_IRQHandler+0x94>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	09db      	lsrs	r3, r3, #7
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <EXTI9_5_IRQHandler+0x58>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[7])
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <EXTI9_5_IRQHandler+0x58>
		{
			EXTI_pvGlobCallBackLine[7]();
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>8)& 1)
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <EXTI9_5_IRQHandler+0x94>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <EXTI9_5_IRQHandler+0x74>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[8])
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 8000524:	6a1b      	ldr	r3, [r3, #32]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <EXTI9_5_IRQHandler+0x74>
		{
			EXTI_pvGlobCallBackLine[8]();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 800052c:	6a1b      	ldr	r3, [r3, #32]
 800052e:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>9)& 1)
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <EXTI9_5_IRQHandler+0x94>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	0a5b      	lsrs	r3, r3, #9
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <EXTI9_5_IRQHandler+0x90>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[9])
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 8000540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <EXTI9_5_IRQHandler+0x90>
		{
			EXTI_pvGlobCallBackLine[9]();
 8000546:	4b03      	ldr	r3, [pc, #12]	; (8000554 <EXTI9_5_IRQHandler+0x98>)
 8000548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054a:	4798      	blx	r3
		}
	}
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010400 	.word	0x40010400
 8000554:	20000098 	.word	0x20000098

08000558 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if(((EXTI->EXTI_PR)>>10)& 1)
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	0a9b      	lsrs	r3, r3, #10
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <EXTI15_10_IRQHandler+0x20>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[10])
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 800056c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <EXTI15_10_IRQHandler+0x20>
		{
			EXTI_pvGlobCallBackLine[10]();
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 8000574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000576:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>11)& 1)
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	0adb      	lsrs	r3, r3, #11
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d006      	beq.n	8000594 <EXTI15_10_IRQHandler+0x3c>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[11])
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 8000588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <EXTI15_10_IRQHandler+0x3c>
		{
			EXTI_pvGlobCallBackLine[11]();
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 8000590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000592:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>12)& 1)
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	0b1b      	lsrs	r3, r3, #12
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x58>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[12])
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <EXTI15_10_IRQHandler+0x58>
		{
			EXTI_pvGlobCallBackLine[12]();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>13)& 1)
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	0b5b      	lsrs	r3, r3, #13
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <EXTI15_10_IRQHandler+0x74>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[13])
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <EXTI15_10_IRQHandler+0x74>
		{
			EXTI_pvGlobCallBackLine[13]();
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ca:	4798      	blx	r3
		}
	}
	if(((EXTI->EXTI_PR)>>14)& 1)
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	0b9b      	lsrs	r3, r3, #14
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <EXTI15_10_IRQHandler+0x90>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[14])
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <EXTI15_10_IRQHandler+0x90>
		{
			EXTI_pvGlobCallBackLine[14]();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e6:	4798      	blx	r3
		}
	}if(((EXTI->EXTI_PR)>>15)& 1)
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <EXTI15_10_IRQHandler+0xb0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	0bdb      	lsrs	r3, r3, #15
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <EXTI15_10_IRQHandler+0xac>
	{
		if (NULL!=EXTI_pvGlobCallBackLine[15])
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 80005f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <EXTI15_10_IRQHandler+0xac>
		{
			EXTI_pvGlobCallBackLine[15]();
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <EXTI15_10_IRQHandler+0xb4>)
 8000600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000602:	4798      	blx	r3
		}
	}
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010400 	.word	0x40010400
 800060c:	20000098 	.word	0x20000098

08000610 <GPIO_u8PinInit>:
 * @brief 		the function initializes the GPIO pin according to the input parameters
 * @param[in]	PinConfig : the initialization values of the pin
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_T *PinConfig)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK,
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
			Local_u8RegNum,
			Local_u8ModeBitNum,
			Local_u8ConfBitNum;

	/*Check pointer is not NULL*/
	if(PinConfig != NULL)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 80ab 	beq.w	800077a <GPIO_u8PinInit+0x16a>
	{


		/*1. Set Pin Mode : Input , Output, Speed : 2MHZ,10MHZ,50MHZ*/
		Local_u8RegNum = (PinConfig->PinNum)/CLR_DIV_REM;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	73bb      	strb	r3, [r7, #14]
		Local_u8ModeBitNum = ((PinConfig->PinNum)%CLR_DIV_REM)*CLR_MODE_PIN_ACCESS;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	b2db      	uxtb	r3, r3
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	737b      	strb	r3, [r7, #13]

		GPIOPort[PinConfig->Port]->CR[Local_u8RegNum] &= ~(CLR_MODE_SHIFT << Local_u8ModeBitNum);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000646:	7bba      	ldrb	r2, [r7, #14]
 8000648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800064c:	7b7b      	ldrb	r3, [r7, #13]
 800064e:	2203      	movs	r2, #3
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000664:	7bba      	ldrb	r2, [r7, #14]
 8000666:	4001      	ands	r1, r0
 8000668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOPort[PinConfig->Port]->CR[Local_u8RegNum] |=  (PinConfig->Mode << Local_u8ModeBitNum);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000678:	7bba      	ldrb	r2, [r7, #14]
 800067a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	461a      	mov	r2, r3
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b3e      	ldr	r3, [pc, #248]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000698:	7bba      	ldrb	r2, [r7, #14]
 800069a:	4301      	orrs	r1, r0
 800069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/*2. Set Configuration Of Pin : Input : Analog,Floating,Input with PullUp/DN
		 * 								Output: GO PushPull , GO Open Drain , AF PushPull , AF Open Drain*/
		Local_u8ConfBitNum = ((PinConfig->PinNum)%CLR_DIV_REM)*CLR_MODE_PIN_ACCESS+CLR_CNF_PIN_ACCESS;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	f003 0307 	and.w	r3, r3, #7
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	3302      	adds	r3, #2
 80006b0:	733b      	strb	r3, [r7, #12]
		GPIOPort[PinConfig->Port]->CR[Local_u8RegNum] &= ~(CLR_MODE_SHIFT << Local_u8ConfBitNum);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <GPIO_u8PinInit+0x17c>)
 80006ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006be:	7bba      	ldrb	r2, [r7, #14]
 80006c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c4:	7b3b      	ldrb	r3, [r7, #12]
 80006c6:	2203      	movs	r2, #3
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <GPIO_u8PinInit+0x17c>)
 80006d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006dc:	7bba      	ldrb	r2, [r7, #14]
 80006de:	4001      	ands	r1, r0
 80006e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOPort[PinConfig->Port]->CR[Local_u8RegNum] |= (PinConfig->InputOutConfig << Local_u8ConfBitNum);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <GPIO_u8PinInit+0x17c>)
 80006ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f0:	7bba      	ldrb	r2, [r7, #14]
 80006f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	461a      	mov	r2, r3
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <GPIO_u8PinInit+0x17c>)
 800070c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000710:	7bba      	ldrb	r2, [r7, #14]
 8000712:	4301      	orrs	r1, r0
 8000714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/*3. Set PullUp & PullDn*/
		if(PinConfig->Mode == INPUT)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d12e      	bne.n	800077e <GPIO_u8PinInit+0x16e>
		{
			GPIOPort[PinConfig->Port]->ODR &= ~(ODR_MASK << PinConfig->PinNum  );
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800072c:	68d9      	ldr	r1, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	461a      	mov	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	4093      	lsls	r3, r2
 8000738:	43da      	mvns	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000742:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000746:	400a      	ands	r2, r1
 8000748:	60da      	str	r2, [r3, #12]
			GPIOPort[PinConfig->Port]->ODR |=  (PinConfig->PullType << PinConfig->PinNum  );
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	785b      	ldrb	r3, [r3, #1]
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <GPIO_u8PinInit+0x17c>)
 8000770:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	e001      	b.n	800077e <GPIO_u8PinInit+0x16e>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
 800077a:	2302      	movs	r3, #2
 800077c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800077e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000780:	4618      	mov	r0, r3
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000

08000790 <GPIO_u8SetPinValue>:
 * @param[in]	PinNum : the pin number ,get options @Pin_T enum
 * @param[in]	PinValue : the output value ,get options @PinVal_T
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8SetPinValue(Port_T Port , Pin_T PinNum , PinVal_T PinValue)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	460b      	mov	r3, r1
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	4613      	mov	r3, r2
 80007a0:	717b      	strb	r3, [r7, #5]
	uint8_t  Local_u8ErrorState = OK;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]

	/*Check Valid Inputs Configuration*/
	if((Port <= PORTG) && (PinNum <= PIN15)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d826      	bhi.n	80007fa <GPIO_u8SetPinValue+0x6a>
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	d823      	bhi.n	80007fa <GPIO_u8SetPinValue+0x6a>
			&& (PinValue <= PIN_HIGH))
 80007b2:	797b      	ldrb	r3, [r7, #5]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d820      	bhi.n	80007fa <GPIO_u8SetPinValue+0x6a>
	{
		(GPIOPort[Port])->ODR &= ~(ODR_MASK << PinNum);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <GPIO_u8SetPinValue+0x7c>)
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	68d9      	ldr	r1, [r3, #12]
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	2201      	movs	r2, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <GPIO_u8SetPinValue+0x7c>)
 80007d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80007d4:	400a      	ands	r2, r1
 80007d6:	60da      	str	r2, [r3, #12]
		(GPIOPort[Port])->ODR |= (PinValue << PinNum);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <GPIO_u8SetPinValue+0x7c>)
 80007dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	7979      	ldrb	r1, [r7, #5]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <GPIO_u8SetPinValue+0x7c>)
 80007f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f4:	4302      	orrs	r2, r0
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	e001      	b.n	80007fe <GPIO_u8SetPinValue+0x6e>
	}
	else
	{
		Local_u8ErrorState = NOK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000

08000810 <HLCD_voidInit>:

/*************************************************************************************************************************************/
/********************************************************* Functions implementations *************************************************/
/*************************************************************************************************************************************/
void HLCD_voidInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  MSTK_u8ClockConfig(STK_AHB_DIV_8);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fcf8 	bl	800120c <MSTK_u8ClockConfig>
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
	 HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
  #elif   LCD_u8_MODE == LCD_u8_MODE_4_BIT

	 GPIO_PinConfig_T LCD_PIN0 ={LCD_u8_DATA_PORT , LCD_u8_DATA_PIN0 , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 800081c:	4a39      	ldr	r2, [pc, #228]	; (8000904 <HLCD_voidInit+0xf4>)
 800081e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000826:	6018      	str	r0, [r3, #0]
 8000828:	3304      	adds	r3, #4
 800082a:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_PIN0);
 800082c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff feed 	bl	8000610 <GPIO_u8PinInit>
	 GPIO_PinConfig_T LCD_PIN1 ={LCD_u8_DATA_PORT , LCD_u8_DATA_PIN1 , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <HLCD_voidInit+0xf8>)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000840:	6018      	str	r0, [r3, #0]
 8000842:	3304      	adds	r3, #4
 8000844:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_PIN1);
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fee0 	bl	8000610 <GPIO_u8PinInit>
	 GPIO_PinConfig_T LCD_PIN2 ={LCD_u8_DATA_PORT , LCD_u8_DATA_PIN2 , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 8000850:	4a2e      	ldr	r2, [pc, #184]	; (800090c <HLCD_voidInit+0xfc>)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085a:	6018      	str	r0, [r3, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_PIN2);
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fed3 	bl	8000610 <GPIO_u8PinInit>
	 GPIO_PinConfig_T LCD_PIN3 ={LCD_u8_DATA_PORT , LCD_u8_DATA_PIN3 , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 800086a:	4a29      	ldr	r2, [pc, #164]	; (8000910 <HLCD_voidInit+0x100>)
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000874:	6018      	str	r0, [r3, #0]
 8000876:	3304      	adds	r3, #4
 8000878:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_PIN3);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fec6 	bl	8000610 <GPIO_u8PinInit>

	 GPIO_PinConfig_T LCD_RS ={LCD_u8_CONTRAL_PORT , LCD_u8_RS_PIN , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 8000884:	4a23      	ldr	r2, [pc, #140]	; (8000914 <HLCD_voidInit+0x104>)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088e:	6018      	str	r0, [r3, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_RS);
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff feb9 	bl	8000610 <GPIO_u8PinInit>
	 //GPIO_PinConfig_T LCD_RW ={LCD_u8_CONTRAL_PORT , LCD_u8_RW_PIN , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
	 //GPIO_u8PinInit (&LCD_RW);
	 GPIO_PinConfig_T LCD_E ={LCD_u8_CONTRAL_PORT , LCD_u8_E_PIN , OUTPUT_2MHZ ,GPO_PUSHPULL , PULL_DN };
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HLCD_voidInit+0x108>)
 80008a0:	463b      	mov	r3, r7
 80008a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	3304      	adds	r3, #4
 80008aa:	7019      	strb	r1, [r3, #0]
	 GPIO_u8PinInit (&LCD_E);
 80008ac:	463b      	mov	r3, r7
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff feae 	bl	8000610 <GPIO_u8PinInit>
	 MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,OUTPUT_SPEED_2MHZ_PP);
	 MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,OUTPUT_SPEED_2MHZ_PP);
	 MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN, OUTPUT_SPEED_2MHZ_PP);
	 */
	 /**********************************************************/
	 MSTK_u8BusyWait(LCD_u8_WAIT_VOLT);
 80008b4:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80008b8:	f000 fce0 	bl	800127c <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_FUN_SIT_1);
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 f838 	bl	8000932 <HLCD_voidSendCmnd>
	 HLCD_voidSendCmnd(LCD_FUN_SIT_2);
 80008c2:	2028      	movs	r0, #40	; 0x28
 80008c4:	f000 f835 	bl	8000932 <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
 80008c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008cc:	f000 fcd6 	bl	800127c <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_DISPLAY_ON);
 80008d0:	200c      	movs	r0, #12
 80008d2:	f000 f82e 	bl	8000932 <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f000 fccf 	bl	800127c <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 f827 	bl	8000932 <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e8:	f000 fcc8 	bl	800127c <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_ENTRY_MODE);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f000 f820 	bl	8000932 <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
 80008f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f6:	f000 fcc1 	bl	800127c <MSTK_u8BusyWait>
  #endif
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	0800189c 	.word	0x0800189c
 8000908:	080018a4 	.word	0x080018a4
 800090c:	080018ac 	.word	0x080018ac
 8000910:	080018b4 	.word	0x080018b4
 8000914:	080018bc 	.word	0x080018bc
 8000918:	080018c4 	.word	0x080018c4

0800091c <HLCD_voidClearLCD>:
void HLCD_voidClearLCD(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 f806 	bl	8000932 <HLCD_voidSendCmnd>
	MSTK_u8BusyWait(3000);
 8000926:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800092a:	f000 fca7 	bl	800127c <MSTK_u8BusyWait>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <HLCD_voidSendCmnd>:
{
	HLCD_voidSendCmnd(LCD_HIDDEN_CURSOR);
	MSTK_u8BusyWait(2000);
}
static void HLCD_voidSendCmnd(uint8_t Copy_u8Comnd)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
	MGPIO_u8SetPortValue(LCD_u8_DATA_PORT,LCD_u8_DATA_Position,Copy_u8Comnd);
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
	MSTK_u8BusyWait(1);;
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
  #elif   LCD_u8_MODE  ==  LCD_u8_MODE_4_BIT
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,PIN_LOW);
 800093c:	2200      	movs	r2, #0
 800093e:	210b      	movs	r1, #11
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff ff25 	bl	8000790 <GPIO_u8SetPinValue>
	//GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,PIN_LOW);
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Comnd,4));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	210f      	movs	r1, #15
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff1a 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Comnd,5));
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	210e      	movs	r1, #14
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff0f 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Comnd,6));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	099b      	lsrs	r3, r3, #6
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	210d      	movs	r1, #13
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff ff04 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Comnd,7));
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	09db      	lsrs	r3, r3, #7
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	210c      	movs	r1, #12
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fefc 	bl	8000790 <GPIO_u8SetPinValue>
	/********************************************************************/
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
 8000998:	2201      	movs	r2, #1
 800099a:	2108      	movs	r1, #8
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fef7 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 fc6a 	bl	800127c <MSTK_u8BusyWait>
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2108      	movs	r1, #8
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff feef 	bl	8000790 <GPIO_u8SetPinValue>
	/************************/
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 80009b2:	2004      	movs	r0, #4
 80009b4:	f000 fc62 	bl	800127c <MSTK_u8BusyWait>
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Comnd,0));
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	210f      	movs	r1, #15
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fee3 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Comnd,1));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	210e      	movs	r1, #14
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fed8 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Comnd,2));
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	210d      	movs	r1, #13
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fecd 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Comnd,3));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	210c      	movs	r1, #12
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fec2 	bl	8000790 <GPIO_u8SetPinValue>
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2108      	movs	r1, #8
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff febd 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f000 fc30 	bl	800127c <MSTK_u8BusyWait>
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2108      	movs	r1, #8
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff feb5 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000a26:	2004      	movs	r0, #4
 8000a28:	f000 fc28 	bl	800127c <MSTK_u8BusyWait>
  #endif
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HLCD_voidSendChar>:
void HLCD_voidSendChar(uint8_t Copy_u8Char)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	MGPIO_u8SetPortValue(LCD_u8_DATA_PORT,LCD_u8_DATA_Position,Copy_u8Char);
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
	MSTK_u8BusyWait(1);
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
  #elif   LCD_u8_MODE  ==  LCD_u8_MODE_4_BIT
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,PIN_HIGH);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	210b      	movs	r1, #11
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fea4 	bl	8000790 <GPIO_u8SetPinValue>
	//GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,PIN_LOW);
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Char,4));
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	210f      	movs	r1, #15
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fe99 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Char,5));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	210e      	movs	r1, #14
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fe8e 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Char,6));
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	099b      	lsrs	r3, r3, #6
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	210d      	movs	r1, #13
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fe83 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Char,7));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	09db      	lsrs	r3, r3, #7
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	210c      	movs	r1, #12
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff fe7b 	bl	8000790 <GPIO_u8SetPinValue>
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fe76 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 fbe9 	bl	800127c <MSTK_u8BusyWait>
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe6e 	bl	8000790 <GPIO_u8SetPinValue>
    /************************/
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f000 fbe1 	bl	800127c <MSTK_u8BusyWait>
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Char,0));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fe62 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Char,1));
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	210e      	movs	r1, #14
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fe57 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Char,2));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	210d      	movs	r1, #13
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe4c 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Char,3));
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	210c      	movs	r1, #12
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe41 	bl	8000790 <GPIO_u8SetPinValue>
	/*******************************************************************/
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_HIGH);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2108      	movs	r1, #8
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fe3c 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 fbaf 	bl	800127c <MSTK_u8BusyWait>
	GPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,PIN_LOW);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe34 	bl	8000790 <GPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f000 fba7 	bl	800127c <MSTK_u8BusyWait>
  #endif
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HLCD_voidSendString>:
void HLCD_voidSendString(uint8_t *Copy_pu8String)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	for(uint8_t Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e009      	b.n	8000b58 <HLCD_voidSendString+0x22>
	{
		  HLCD_voidSendChar(Copy_pu8String[Local_u8Counter]);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff71 	bl	8000a34 <HLCD_voidSendChar>
	for(uint8_t Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	3301      	adds	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1ef      	bne.n	8000b44 <HLCD_voidSendString+0xe>
	}
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HLCD_voidSetCursor>:
	}

}

void HLCD_voidSetCursor           ( LCDlocation Copy_Location      , LCDLineNum  Copy_LineNum  )
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	460a      	mov	r2, r1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	71bb      	strb	r3, [r7, #6]
    switch (Copy_LineNum)
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <HLCD_voidSetCursor+0x1c>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d007      	beq.n	8000b98 <HLCD_voidSetCursor+0x2a>
    {
          case LCD_LINE0 : HLCD_voidSendCmnd((0x80+Copy_Location)); break;
          case LCD_LINE1 : HLCD_voidSendCmnd((0xC0+Copy_Location)); break;
    }
}
 8000b88:	e00d      	b.n	8000ba6 <HLCD_voidSetCursor+0x38>
          case LCD_LINE0 : HLCD_voidSendCmnd((0x80+Copy_Location)); break;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	3b80      	subs	r3, #128	; 0x80
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fece 	bl	8000932 <HLCD_voidSendCmnd>
 8000b96:	e006      	b.n	8000ba6 <HLCD_voidSetCursor+0x38>
          case LCD_LINE1 : HLCD_voidSendCmnd((0xC0+Copy_Location)); break;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3b40      	subs	r3, #64	; 0x40
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fec7 	bl	8000932 <HLCD_voidSendCmnd>
 8000ba4:	bf00      	nop
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MNVIC_u8EnableInterrupt>:
 *
 ******************************************************************************
 */

uint8_t   MNVIC_u8EnableInterrupt    ( IntNumber_t Copy_IntNumber )
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
	if ( Copy_IntNumber <= NVIC_DMA2_Channel4_5 )
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b3b      	cmp	r3, #59	; 0x3b
 8000bc4:	dc1b      	bgt.n	8000bfe <MNVIC_u8EnableInterrupt+0x4e>
	{
		uint8_t Local_u8Reg = Copy_IntNumber/NVIC_BIT_REG_ACCESS;
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da00      	bge.n	8000bd0 <MNVIC_u8EnableInterrupt+0x20>
 8000bce:	331f      	adds	r3, #31
 8000bd0:	115b      	asrs	r3, r3, #5
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Bit = Copy_IntNumber%NVIC_BIT_REG_ACCESS;
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	425a      	negs	r2, r3
 8000bdc:	f003 031f 	and.w	r3, r3, #31
 8000be0:	f002 021f 	and.w	r2, r2, #31
 8000be4:	bf58      	it	pl
 8000be6:	4253      	negpl	r3, r2
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	737b      	strb	r3, [r7, #13]
		NVIC -> ISER[Local_u8Reg] = ( NVIC_BIT_MASK << Local_u8Bit );
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	fa02 f103 	lsl.w	r1, r2, r3
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <MNVIC_u8EnableInterrupt+0x60>)
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bfc:	e001      	b.n	8000c02 <MNVIC_u8EnableInterrupt+0x52>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <RCC_SetClksts>:
 * @param[in]  ClkType  : the clock what it is want to change his state
 * @param[in]  State : the state which the user wants the clock to be OFForON
 * @retval ErrorStatus
 */
uint8_t RCC_SetClksts(SET_CLK_type_ty ClkType,STATE_ty State)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_State_Error = OK;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
    uint32_t Polling=0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
	switch (State)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d025      	beq.n	8000c7e <RCC_SetClksts+0x6a>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d12e      	bne.n	8000c94 <RCC_SetClksts+0x80>
	{
	case STATE_ON:
		RCC->RCC_CR |=(ONE_BIT_MASKING<<ClkType);
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <RCC_SetClksts+0x94>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <RCC_SetClksts+0x94>)
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
		while ((((RCC->RCC_CR>>ClkType)&1)!=State)||(Polling==CLKYYPE_TIMEOUT))
 8000c48:	e002      	b.n	8000c50 <RCC_SetClksts+0x3c>
        {
            Polling++;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
		while ((((RCC->RCC_CR>>ClkType)&1)!=State)||(Polling==CLKYYPE_TIMEOUT))
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <RCC_SetClksts+0x94>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d1f2      	bne.n	8000c4a <RCC_SetClksts+0x36>
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d0ed      	beq.n	8000c4a <RCC_SetClksts+0x36>
        }
		if (Polling == CLKYYPE_TIMEOUT)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d110      	bne.n	8000c9a <RCC_SetClksts+0x86>
		{
			Local_State_Error=NOK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000c7c:	e00d      	b.n	8000c9a <RCC_SetClksts+0x86>
	case STATE_OFF:
		RCC->RCC_CR &=~(ONE_BIT_MASKING<<ClkType);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <RCC_SetClksts+0x94>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <RCC_SetClksts+0x94>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	600b      	str	r3, [r1, #0]
		/*No need for polling*/
		break;
 8000c92:	e003      	b.n	8000c9c <RCC_SetClksts+0x88>
	
	default:
		Local_State_Error=NOK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
		break;
 8000c98:	e000      	b.n	8000c9c <RCC_SetClksts+0x88>
		break;
 8000c9a:	bf00      	nop
	}
	return Local_State_Error;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000

08000cac <RCC_SetSysClk>:

uint8_t RCC_SetSysClk(SYS_CLK_type_ty ClkType)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t Local_State_Error = OK;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
	if (ClkType<=SYS_PLL)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d80c      	bhi.n	8000cda <RCC_SetSysClk+0x2e>
	{
		RCC->RCC_CFGR &=~(TWO_BITS_MASKING<<RCC_CFGR_SW_0);
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <RCC_SetSysClk+0x40>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <RCC_SetSysClk+0x40>)
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR |=(ClkType<<RCC_CFGR_SW_0);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <RCC_SetSysClk+0x40>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4906      	ldr	r1, [pc, #24]	; (8000cec <RCC_SetSysClk+0x40>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
 8000cd8:	e001      	b.n	8000cde <RCC_SetSysClk+0x32>
	}
	else
	{
		Local_State_Error = NOK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_State_Error;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <RCC_APB2EnableClock>:
{
    RCC->RCC_APB1ENR &=~(ONE_BIT_MASKING<<peripheral);
}
//APB2
void RCC_APB2EnableClock(APB2peripheral_ty peripheral)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB2ENR |=(ONE_BIT_MASKING<<peripheral);
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <RCC_APB2EnableClock+0x28>)
 8000cfc:	699a      	ldr	r2, [r3, #24]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <RCC_APB2EnableClock+0x28>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	618b      	str	r3, [r1, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <MSPI_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SetConfiguration ( const SPIconfig_t* SPIconfig )
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8000d24:	2301      	movs	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
	if (  SPIconfig !=NULL )
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8201 	beq.w	8001132 <MSPI_u8SetConfiguration+0x416>
	{
		uint32_t Local_u32CR1Temp =0 ;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
		uint32_t Local_u32CR2Temp =0 ;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ ( SPI_CPHA_MASK         << SPI_CR1_CPHA );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4ba8      	ldr	r3, [pc, #672]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4ba4      	ldr	r3, [pc, #656]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  ( SPIconfig->ClockPhase << SPI_CR1_CPHA );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4ba0      	ldr	r3, [pc, #640]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	4b9b      	ldr	r3, [pc, #620]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ ( SPI_CPOL_MASK            << SPI_CR1_CPOL );
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b97      	ldr	r3, [pc, #604]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000d92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d96:	f022 0202 	bic.w	r2, r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  ( SPIconfig->ClockPolarity << SPI_CR1_CPOL );
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b8f      	ldr	r3, [pc, #572]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000dba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ ( SPI_MSTR_MASK           << SPI_CR1_MSTR );
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b85      	ldr	r3, [pc, #532]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4b82      	ldr	r3, [pc, #520]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ddc:	f022 0204 	bic.w	r2, r2, #4
 8000de0:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  ( SPIconfig->SPI_MCUstate << SPI_CR1_MSTR );
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	78db      	ldrb	r3, [r3, #3]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	4b78      	ldr	r3, [pc, #480]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ ( SPI_BR_MASK         << SPI_CR1_BR );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b74      	ldr	r3, [pc, #464]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4b70      	ldr	r3, [pc, #448]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e22:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000e26:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  ( SPIconfig->BaudRate << SPI_CR1_BR );
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b6c      	ldr	r3, [pc, #432]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ (SPI_LSBFIRST_MASK      << (SPI_CR1_LSBFIRST));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b62      	ldr	r3, [pc, #392]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e6c:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  (SPIconfig->FrameFormat << (SPI_CR1_LSBFIRST));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	4619      	mov	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ (SPI_SSI_MASK                   << (SPI_CR1_SSI));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb2:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  (SPIconfig->InternalSlaveSelect << (SPI_CR1_SSI));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	799b      	ldrb	r3, [r3, #6]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000ed2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ (SPI_SSM_MASK                      << (SPI_CR1_SSM));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ef8:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  (SPIconfig->SoftwareSlaveManagment << (SPI_CR1_SSM));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	79db      	ldrb	r3, [r3, #7]
 8000f0c:	025b      	lsls	r3, r3, #9
 8000f0e:	4619      	mov	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ (SPI_RXONLY_MASK        << (SPI_CR1_RXONLY));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f3e:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  (SPIconfig->ReceiveOnly << (SPI_CR1_RXONLY));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7a1b      	ldrb	r3, [r3, #8]
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	4619      	mov	r1, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

		SPI_Index[SPIconfig->SPIindex] -> CR1 &=~ (SPI_DFF_MASK         << (SPI_CR1_DFF));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f84:	601a      	str	r2, [r3, #0]
		SPI_Index[SPIconfig->SPIindex] -> CR1 |=  (SPIconfig->DataFrame << (SPI_CR1_DFF));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	02db      	lsls	r3, r3, #11
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000fa4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
/****************************************************************************************************/

		SPI_Index[SPIconfig->SPIindex] -> CR2 &=~ (SPI_RXDMAEN_MASK << (SPI_CR2_RXDMAEN));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR2 |=  (SPIconfig->RXDMA << (SPI_CR2_RXDMAEN));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <MSPI_u8SetConfiguration+0x2c4>)
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e002      	b.n	8000fe4 <MSPI_u8SetConfiguration+0x2c8>
 8000fde:	bf00      	nop
 8000fe0:	2000001c 	.word	0x2000001c
 8000fe4:	7a9b      	ldrb	r3, [r3, #10]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8000ff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]
	
		SPI_Index[SPIconfig->SPIindex] -> CR2 &=~ (SPI_TXDMAEN_MASK << (SPI_CR2_TXDMAEN));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b51      	ldr	r3, [pc, #324]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 800100e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001012:	f022 0202 	bic.w	r2, r2, #2
 8001016:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR2 |=  (SPIconfig->TXDMA << (SPI_CR2_TXDMAEN));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7adb      	ldrb	r3, [r3, #11]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4619      	mov	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800103a:	430a      	orrs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]
	
		SPI_Index[SPIconfig->SPIindex] -> CR2 &=~ (SPI_SSOE_MASK       << (SPI_CR2_SSOE));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001058:	f022 0204 	bic.w	r2, r2, #4
 800105c:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR2 |=  (SPIconfig->SSoutput << (SPI_CR2_SSOE));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7b1b      	ldrb	r3, [r3, #12]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4619      	mov	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 800107c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]

		SPI_Index[SPIconfig->SPIindex] -> CR2 &=~ (SPI_RXNEIE_MASK        << (SPI_CR2_RXNEIE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 800109a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800109e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a2:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR2 |=  (SPIconfig->RXinterrupt << (SPI_CR2_RXNEIE));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7b5b      	ldrb	r3, [r3, #13]
 80010b6:	019b      	lsls	r3, r3, #6
 80010b8:	4619      	mov	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 80010c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]

		SPI_Index[SPIconfig->SPIindex] -> CR2 &=~ (SPI_TXEIE_MASK         << (SPI_CR2_TXEIE));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 80010e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e8:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR2 |=  (SPIconfig->TXinterrupt << (SPI_CR2_TXEIE));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b9b      	ldrb	r3, [r3, #14]
 80010fc:	01db      	lsls	r3, r3, #7
 80010fe:	4619      	mov	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001108:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]

		SET_BIT( SPI_Index[SPIconfig->SPIindex] -> CR1 , SPI_CR1_SPE );
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MSPI_u8SetConfiguration+0x428>)
 8001126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800112a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e001      	b.n	8001136 <MSPI_u8SetConfiguration+0x41a>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 8001136:	7dfb      	ldrb	r3, [r7, #23]

}
 8001138:	4618      	mov	r0, r3
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000001c 	.word	0x2000001c

08001148 <MSPI_u8SendReceiveAsynch>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SendReceiveAsynch ( SPIindex_t Copy_SPIindex , uint8_t Copy_u8DataToTransmit , void (*Copy_pFunNotification) (uint8_t) )
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	603a      	str	r2, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	460b      	mov	r3, r1
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
	if (  Copy_pFunNotification != NULL  )
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <MSPI_u8SendReceiveAsynch+0x32>
	{
		SPI_ApFunCallBack[Copy_SPIindex]=Copy_pFunNotification;
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4909      	ldr	r1, [pc, #36]	; (800118c <MSPI_u8SendReceiveAsynch+0x44>)
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SPI_Index[Copy_SPIindex] -> DR = Copy_u8DataToTransmit ;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <MSPI_u8SendReceiveAsynch+0x48>)
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	e001      	b.n	800117e <MSPI_u8SendReceiveAsynch+0x36>

	}
	else 
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200000e8 	.word	0x200000e8
 8001190:	2000001c 	.word	0x2000001c

08001194 <SPI1_IRQHandler>:
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void SPI1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_1] != NULL )
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SPI1_IRQHandler+0x20>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <SPI1_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_1]( SPI_Index[SPI_1] -> DR );
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SPI1_IRQHandler+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <SPI1_IRQHandler+0x24>)
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	68d2      	ldr	r2, [r2, #12]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
	}
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000e8 	.word	0x200000e8
 80011b8:	2000001c 	.word	0x2000001c

080011bc <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_2] != NULL )
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SPI2_IRQHandler+0x20>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <SPI2_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_2]( SPI_Index[SPI_2] -> DR );
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SPI2_IRQHandler+0x20>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <SPI2_IRQHandler+0x24>)
 80011ce:	6852      	ldr	r2, [r2, #4]
 80011d0:	68d2      	ldr	r2, [r2, #12]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	4610      	mov	r0, r2
 80011d6:	4798      	blx	r3
	}
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000e8 	.word	0x200000e8
 80011e0:	2000001c 	.word	0x2000001c

080011e4 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_3] != NULL )
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SPI3_IRQHandler+0x20>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <SPI3_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_3]( SPI_Index[SPI_3] -> DR );
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SPI3_IRQHandler+0x20>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <SPI3_IRQHandler+0x24>)
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	68d2      	ldr	r2, [r2, #12]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	4610      	mov	r0, r2
 80011fe:	4798      	blx	r3
	}
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000e8 	.word	0x200000e8
 8001208:	2000001c 	.word	0x2000001c

0800120c <MSTK_u8ClockConfig>:
 *
 *
 ******************************************************************************
 */
uint8_t MSTK_u8ClockConfig              ( STKclock_t Copy_ClockType )
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState=ERROR_STATE_OK;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ClockType <= STK_AHB )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d80e      	bhi.n	800123e <MSTK_u8ClockConfig+0x32>
	{
		STK->CTRL &=~(STK_CLKSOURCE_MASK << STK_CTRL_CLKSOURCE );
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MSTK_u8ClockConfig+0x44>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <MSTK_u8ClockConfig+0x44>)
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	6013      	str	r3, [r2, #0]
		STK->CTRL |= (Copy_ClockType << STK_CTRL_CLKSOURCE );
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MSTK_u8ClockConfig+0x44>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4611      	mov	r1, r2
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <MSTK_u8ClockConfig+0x44>)
 8001238:	430b      	orrs	r3, r1
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e001      	b.n	8001242 <MSTK_u8ClockConfig+0x36>
	}
	else
	{
		Local_u8ErrorState=ERROR_STATE_NOK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001242:	7bfb      	ldrb	r3, [r7, #15]

}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MSTK_voidStopTimer+0x24>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <MSTK_voidStopTimer+0x24>)
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <MSTK_voidStopTimer+0x24>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <MSTK_voidStopTimer+0x24>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	e000e010 	.word	0xe000e010

0800127c <MSTK_u8BusyWait>:
 *
 *
 ******************************************************************************
 */
uint8_t   MSTK_u8BusyWait            ( uint32_t Copy_u32Ticks )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	 uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
	 if ( Copy_u32Ticks <= STK_MAX_TICKS)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800128e:	d813      	bhi.n	80012b8 <MSTK_u8BusyWait+0x3c>
	 {
	     STK->LOAD = Copy_u32Ticks ;
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <MSTK_u8BusyWait+0x4c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6053      	str	r3, [r2, #4]
	     STK->CTRL |= (STK_ENABLE_MASK << STK_CTRL_ENABLE );
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MSTK_u8BusyWait+0x4c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <MSTK_u8BusyWait+0x4c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6013      	str	r3, [r2, #0]
	     while ( STK_LOW_FLAG == GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ));
 80012a2:	bf00      	nop
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MSTK_u8BusyWait+0x4c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f8      	beq.n	80012a4 <MSTK_u8BusyWait+0x28>
	     MSTK_voidStopTimer();
 80012b2:	f7ff ffcf 	bl	8001254 <MSTK_voidStopTimer>
 80012b6:	e001      	b.n	80012bc <MSTK_u8BusyWait+0x40>
	 }
	 else
	 {
		 Local_u8ErrorState = ERROR_STATE_NOK ;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
	 }
	 return Local_u8ErrorState ;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <MSTK_u8SetInterval>:
 *
 *
 ******************************************************************************
 */
uint8_t   MSTK_u8SetInterval   ( uint32_t Copy_u32Ticks , Interval_t Copy_IntervalType ,void (* Copy_pFun)(void) )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	460b      	mov	r3, r1
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	72fb      	strb	r3, [r7, #11]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
	 if ( Copy_u32Ticks <= STK_MAX_TICKS && Copy_pFun != NULL && Copy_IntervalType<= PERIODIC )
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80012e4:	d824      	bhi.n	8001330 <MSTK_u8SetInterval+0x64>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d021      	beq.n	8001330 <MSTK_u8SetInterval+0x64>
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d81e      	bhi.n	8001330 <MSTK_u8SetInterval+0x64>
	 {
		 STK->CTRL &=~ (STK_ENABLE_MASK << STK_CTRL_ENABLE );
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MSTK_u8SetInterval+0x74>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MSTK_u8SetInterval+0x74>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
		 STK->VAL =STK_RESET_COUNTER ;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MSTK_u8SetInterval+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]

		 STK_u8IntervalType = Copy_IntervalType ;
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <MSTK_u8SetInterval+0x78>)
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	7013      	strb	r3, [r2, #0]
	     STK->LOAD = Copy_u32Ticks ;
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <MSTK_u8SetInterval+0x74>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6053      	str	r3, [r2, #4]
	     STK->CTRL |=  (STK_ENABLE_MASK << STK_CTRL_ENABLE );
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MSTK_u8SetInterval+0x74>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <MSTK_u8SetInterval+0x74>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]
	     SysTick_CallBack = Copy_pFun ;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <MSTK_u8SetInterval+0x7c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
	     STK->CTRL |=  (STK_INT_MASK << STK_CTRL_TICKINT );
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MSTK_u8SetInterval+0x74>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <MSTK_u8SetInterval+0x74>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e001      	b.n	8001334 <MSTK_u8SetInterval+0x68>
	 }
	 else
	 {
		 Local_u8ErrorState = ERROR_STATE_NOK ;
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
	 }
	 return Local_u8ErrorState ;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
}
 8001336:	4618      	mov	r0, r3
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	e000e010 	.word	0xe000e010
 8001344:	20000028 	.word	0x20000028
 8001348:	200000f4 	.word	0x200000f4

0800134c <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <SysTick_Handler+0x38>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <SysTick_Handler+0x32>
    {
         if ( SINGLE == STK_u8IntervalType )
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <SysTick_Handler+0x3c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <SysTick_Handler+0x38>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 8001366:	f7ff ff75 	bl	8001254 <MSTK_voidStopTimer>
 800136a:	e006      	b.n	800137a <SysTick_Handler+0x2e>
         }
         else if ( PERIODIC == STK_u8IntervalType )
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SysTick_Handler+0x3c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <SysTick_Handler+0x2e>
         {
        	 SysTick_CallBack();
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <SysTick_Handler+0x38>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4798      	blx	r3
         }
         GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ) ;
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Handler+0x40>)
 800137c:	681b      	ldr	r3, [r3, #0]

    }

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000f4 	.word	0x200000f4
 8001388:	20000028 	.word	0x20000028
 800138c:	e000e010 	.word	0xe000e010

08001390 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <MUSART_voidClearFlags+0x20>)
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	2000002c 	.word	0x2000002c

080013b4 <USART1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <USART1_IRQHandler+0x1c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <USART1_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_1);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ffe5 	bl	8001390 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_1]();
 80013c6:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <USART1_IRQHandler+0x1c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4798      	blx	r3
	}

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000f8 	.word	0x200000f8

080013d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <USART2_IRQHandler+0x1c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <USART2_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_2);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff ffd5 	bl	8001390 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_2]();
 80013e6:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <USART2_IRQHandler+0x1c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4798      	blx	r3
	}

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000f8 	.word	0x200000f8

080013f4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <USART3_IRQHandler+0x1c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <USART3_IRQHandler+0x18>
	{
		MUSART_voidClearFlags(USART_3);
 8001400:	2002      	movs	r0, #2
 8001402:	f7ff ffc5 	bl	8001390 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_3]();
 8001406:	4b02      	ldr	r3, [pc, #8]	; (8001410 <USART3_IRQHandler+0x1c>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4798      	blx	r3
	}

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000f8 	.word	0x200000f8

08001414 <ReceiveSwitchFunc>:
uint8_t Global_pu8ReceiveArray  [13]="             ";
/********************************************************************************************************************************************/
/**************************************************** Call Back Function ********************************************************************/
/********************************************************************************************************************************************/
void ReceiveSwitchFunc (uint8_t Data)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	if (Global_ReceiveFlag==0 )
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <ReceiveSwitchFunc+0x120>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d164      	bne.n	80014f0 <ReceiveSwitchFunc+0xdc>
	{
		switch (Data)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b40      	cmp	r3, #64	; 0x40
 800142a:	dc47      	bgt.n	80014bc <ReceiveSwitchFunc+0xa8>
 800142c:	2b21      	cmp	r3, #33	; 0x21
 800142e:	db7c      	blt.n	800152a <ReceiveSwitchFunc+0x116>
 8001430:	3b21      	subs	r3, #33	; 0x21
 8001432:	2b1f      	cmp	r3, #31
 8001434:	d879      	bhi.n	800152a <ReceiveSwitchFunc+0x116>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <ReceiveSwitchFunc+0x28>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014cd 	.word	0x080014cd
 8001440:	0800152b 	.word	0x0800152b
 8001444:	080014e1 	.word	0x080014e1
 8001448:	080014e9 	.word	0x080014e9
 800144c:	0800152b 	.word	0x0800152b
 8001450:	0800152b 	.word	0x0800152b
 8001454:	0800152b 	.word	0x0800152b
 8001458:	0800152b 	.word	0x0800152b
 800145c:	0800152b 	.word	0x0800152b
 8001460:	0800152b 	.word	0x0800152b
 8001464:	0800152b 	.word	0x0800152b
 8001468:	0800152b 	.word	0x0800152b
 800146c:	0800152b 	.word	0x0800152b
 8001470:	0800152b 	.word	0x0800152b
 8001474:	0800152b 	.word	0x0800152b
 8001478:	0800152b 	.word	0x0800152b
 800147c:	0800152b 	.word	0x0800152b
 8001480:	0800152b 	.word	0x0800152b
 8001484:	0800152b 	.word	0x0800152b
 8001488:	0800152b 	.word	0x0800152b
 800148c:	0800152b 	.word	0x0800152b
 8001490:	0800152b 	.word	0x0800152b
 8001494:	0800152b 	.word	0x0800152b
 8001498:	0800152b 	.word	0x0800152b
 800149c:	0800152b 	.word	0x0800152b
 80014a0:	0800152b 	.word	0x0800152b
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800152b 	.word	0x0800152b
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	2b7e      	cmp	r3, #126	; 0x7e
 80014be:	d134      	bne.n	800152a <ReceiveSwitchFunc+0x116>
		{
		case '~':   GPIO_u8SetPinValue(PORTA, PIN1 , PIN_HIGH); break;
 80014c0:	2201      	movs	r2, #1
 80014c2:	2101      	movs	r1, #1
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff f963 	bl	8000790 <GPIO_u8SetPinValue>
 80014ca:	e02e      	b.n	800152a <ReceiveSwitchFunc+0x116>

		case '!':   GPIO_u8SetPinValue(PORTC, PIN15, PIN_HIGH); break;
 80014cc:	2201      	movs	r2, #1
 80014ce:	210f      	movs	r1, #15
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff f95d 	bl	8000790 <GPIO_u8SetPinValue>
 80014d6:	e028      	b.n	800152a <ReceiveSwitchFunc+0x116>

		case '@':   Global_ReceiveFlag=1;break;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <ReceiveSwitchFunc+0x120>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e024      	b.n	800152a <ReceiveSwitchFunc+0x116>

		case '#':   Global_ReceiveFlag=2;break;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <ReceiveSwitchFunc+0x120>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e020      	b.n	800152a <ReceiveSwitchFunc+0x116>

		case '$':   Global_ReceiveFlag=3;break;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <ReceiveSwitchFunc+0x120>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e01c      	b.n	800152a <ReceiveSwitchFunc+0x116>

		}
	}
	else
	{
		if (Data != '\0')
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <ReceiveSwitchFunc+0xfc>
		{
			Global_pu8ReceiveArray[Global_u8Counter] = Data;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <ReceiveSwitchFunc+0x124>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <ReceiveSwitchFunc+0x128>)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	5453      	strb	r3, [r2, r1]
			Global_u8Counter++;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <ReceiveSwitchFunc+0x124>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <ReceiveSwitchFunc+0x124>)
 800150c:	701a      	strb	r2, [r3, #0]
			Global_pu8ReceiveArray[Global_u8Counter] = '\0';
			Global_u8ReceieComplateFlag=1;
			Global_u8Counter=0;
		}
	}
}
 800150e:	e00c      	b.n	800152a <ReceiveSwitchFunc+0x116>
			Global_pu8ReceiveArray[Global_u8Counter] = '\0';
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <ReceiveSwitchFunc+0x124>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <ReceiveSwitchFunc+0x128>)
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
			Global_u8ReceieComplateFlag=1;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <ReceiveSwitchFunc+0x12c>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
			Global_u8Counter=0;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <ReceiveSwitchFunc+0x124>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	e7ff      	b.n	800152a <ReceiveSwitchFunc+0x116>
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000010e 	.word	0x2000010e
 8001538:	2000010c 	.word	0x2000010c
 800153c:	20000040 	.word	0x20000040
 8001540:	2000010d 	.word	0x2000010d

08001544 <AlarmStopNotificationFunc>:
/********************************************************************************************************************************************/
/**************************************************** STK Call Back Function  ***************************************************************/
/********************************************************************************************************************************************/
void AlarmStopNotificationFunc (void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(PORTB, PIN4,PIN_LOW);
 8001548:	2200      	movs	r2, #0
 800154a:	2104      	movs	r1, #4
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff f91f 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(PORTC, PIN14,PIN_LOW);
 8001552:	2200      	movs	r2, #0
 8001554:	210e      	movs	r1, #14
 8001556:	2002      	movs	r0, #2
 8001558:	f7ff f91a 	bl	8000790 <GPIO_u8SetPinValue>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <AlarmNotificationFunc>:
/********************************************************************************************************************************************/
/**************************************************** EXTI Call Back Function  **************************************************************/
/********************************************************************************************************************************************/
void AlarmNotificationFunc (void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	MSTK_u8SetInterval(5000000,SINGLE,AlarmStopNotificationFunc);
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <AlarmNotificationFunc+0x28>)
 8001566:	2100      	movs	r1, #0
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <AlarmNotificationFunc+0x2c>)
 800156a:	f7ff feaf 	bl	80012cc <MSTK_u8SetInterval>
	GPIO_u8SetPinValue(PORTB, PIN4,PIN_HIGH);
 800156e:	2201      	movs	r2, #1
 8001570:	2104      	movs	r1, #4
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff f90c 	bl	8000790 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(PORTC, PIN14,PIN_HIGH);
 8001578:	2201      	movs	r2, #1
 800157a:	210e      	movs	r1, #14
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff f907 	bl	8000790 <GPIO_u8SetPinValue>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	08001545 	.word	0x08001545
 800158c:	004c4b40 	.word	0x004c4b40

08001590 <main>:
/********************************************************************************************************************************************/
/**************************************************** Main Function  ************************************************************************/
/********************************************************************************************************************************************/
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b09a      	sub	sp, #104	; 0x68
 8001594:	af00      	add	r7, sp, #0
	/********************************************************************************************************************************************/
	/**************************************************** RCC Configuration *********************************************************************/
	/********************************************************************************************************************************************/
	RCC_SetClksts(SET_CLK_HSE,STATE_ON);
 8001596:	2101      	movs	r1, #1
 8001598:	2010      	movs	r0, #16
 800159a:	f7ff fb3b 	bl	8000c14 <RCC_SetClksts>
	RCC_SetSysClk(SYS_HSE);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fb84 	bl	8000cac <RCC_SetSysClk>
	RCC_APB2EnableClock(APB2_IOPA);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fba3 	bl	8000cf0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_IOPB);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f7ff fba0 	bl	8000cf0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_IOPC);
 80015b0:	2004      	movs	r0, #4
 80015b2:	f7ff fb9d 	bl	8000cf0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_SPI1);
 80015b6:	200c      	movs	r0, #12
 80015b8:	f7ff fb9a 	bl	8000cf0 <RCC_APB2EnableClock>
	/********************************************************************************************************************************************/
	/**************************************************** STK Configuration *********************************************************************/
	/********************************************************************************************************************************************/
	MSTK_u8ClockConfig(STK_AHB_DIV_8);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fe25 	bl	800120c <MSTK_u8ClockConfig>
	/********************************************************************************************************************************************/
	/**************************************************** LCD Configuration *********************************************************************/
	/********************************************************************************************************************************************/
	HLCD_voidInit();
 80015c2:	f7ff f925 	bl	8000810 <HLCD_voidInit>
	/********************************************************************************************************************************************/
	/**************************************************** GPIO Configuration ********************************************************************/
	/********************************************************************************************************************************************/
	GPIO_PinConfig_T RedLed ={ PORTA , PIN1 , OUTPUT_2MHZ , GPO_PUSHPULL , PULL_DN  };
 80015c6:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <main+0x214>)
 80015c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d0:	6018      	str	r0, [r3, #0]
 80015d2:	3304      	adds	r3, #4
 80015d4:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&RedLed);
 80015d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f818 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T GRN    ={ PORTC , PIN15 , OUTPUT_2MHZ , GPO_PUSHPULL , PULL_DN };
 80015e0:	4a71      	ldr	r2, [pc, #452]	; (80017a8 <main+0x218>)
 80015e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ea:	6018      	str	r0, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&GRN);
 80015f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f80b 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T BUZ    ={ PORTB , PIN4 , OUTPUT_2MHZ , GPO_PUSHPULL , PULL_DN  };
 80015fa:	4a6c      	ldr	r2, [pc, #432]	; (80017ac <main+0x21c>)
 80015fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001604:	6018      	str	r0, [r3, #0]
 8001606:	3304      	adds	r3, #4
 8001608:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&BUZ);
 800160a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fffe 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T BLU    ={ PORTC , PIN14 , OUTPUT_2MHZ , GPO_PUSHPULL , PULL_DN };
 8001614:	4a66      	ldr	r2, [pc, #408]	; (80017b0 <main+0x220>)
 8001616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&BLU);
 8001624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fff1 	bl	8000610 <GPIO_u8PinInit>
	/********************************************************************************************************************************************/
	/**************************************************** SPI Configuration *********************************************************************/
	/********************************************************************************************************************************************/
	GPIO_PinConfig_T NSS  ={ PORTA , PIN4 , INPUT , FLOATING , PULL_DN  };
 800162e:	4a61      	ldr	r2, [pc, #388]	; (80017b4 <main+0x224>)
 8001630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001638:	6018      	str	r0, [r3, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&NSS);
 800163e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ffe4 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T SCK  ={ PORTA , PIN5 , INPUT , FLOATING , PULL_DN  };
 8001648:	4a5b      	ldr	r2, [pc, #364]	; (80017b8 <main+0x228>)
 800164a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001652:	6018      	str	r0, [r3, #0]
 8001654:	3304      	adds	r3, #4
 8001656:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&SCK);
 8001658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ffd7 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T MISO ={ PORTA , PIN6 , OUTPUT_2MHZ , AF_PUSHPULL , PULL_DN  };
 8001662:	4a56      	ldr	r2, [pc, #344]	; (80017bc <main+0x22c>)
 8001664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&MISO);
 8001672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ffca 	bl	8000610 <GPIO_u8PinInit>
	GPIO_PinConfig_T MOSI ={ PORTA , PIN7 , INPUT , FLOATING , PULL_DN  };
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <main+0x230>)
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&MOSI);
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ffbd 	bl	8000610 <GPIO_u8PinInit>
	MNVIC_u8EnableInterrupt(NVIC_SPI1);
 8001696:	2023      	movs	r0, #35	; 0x23
 8001698:	f7ff fa8a 	bl	8000bb0 <MNVIC_u8EnableInterrupt>
	SPIconfig_t SPI_config ={SPI_1,LEADING_CAPTURE,LEADING_RISING,SLAVE,F_CLK_DIV_8,MSB,SELECT_ZERO,MANAGMENT_DISABLE,FULL_DUPLEX,FORMAT_8_BIT
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	f8c3 200b 	str.w	r2, [r3, #11]
 80016ac:	2302      	movs	r3, #2
 80016ae:	773b      	strb	r3, [r7, #28]
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				                 ,RX_DMA_DISABLE,TX_DMA_DISABLE,SS_OUTPUT_DISABLE,RX_INTERRUPT_NOT_MASKED,TX_INTERRUPT_MASKED};
	MSPI_u8SetConfiguration(&SPI_config);
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb2e 	bl	8000d1c <MSPI_u8SetConfiguration>
	MSPI_u8SendReceiveAsynch  ( SPI_1 ,'.' ,&ReceiveSwitchFunc );
 80016c0:	4a40      	ldr	r2, [pc, #256]	; (80017c4 <main+0x234>)
 80016c2:	212e      	movs	r1, #46	; 0x2e
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fd3f 	bl	8001148 <MSPI_u8SendReceiveAsynch>
	/********************************************************************************************************************************************/
	/**************************************************** EXTI Configuration ********************************************************************/
	/********************************************************************************************************************************************/
	MNVIC_u8EnableInterrupt(NVIC_EXTI0);
 80016ca:	2006      	movs	r0, #6
 80016cc:	f7ff fa70 	bl	8000bb0 <MNVIC_u8EnableInterrupt>
	GPIO_PinConfig_T EXTI_PIN ={ PORTA , PIN0 , INPUT , PULL_UPDN , PULL_UP  };
 80016d0:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <main+0x238>)
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016da:	6018      	str	r0, [r3, #0]
 80016dc:	3304      	adds	r3, #4
 80016de:	7019      	strb	r1, [r3, #0]
	GPIO_u8PinInit(&EXTI_PIN);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff93 	bl	8000610 <GPIO_u8PinInit>
	EXTI_CONFIG_ty EXTI_Config={ EXTI_PORTA ,EXTI_PIN00,EXTI_ENABLE,EXTI_DISABLE,EXTI_RISING_TRIG, AlarmNotificationFunc };
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <main+0x23c>)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_u8Init(&EXTI_Config);
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fdf0 	bl	80002dc <EXTI_u8Init>
	/**************************************************** Loop **********************************************************************************/
	/********************************************************************************************************************************************/
	while(1)
	{

	   if( Global_u8ReceieComplateFlag==1)
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <main+0x240>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d14d      	bne.n	80017a0 <main+0x210>
		{
			switch (Global_ReceiveFlag)
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <main+0x244>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d032      	beq.n	8001772 <main+0x1e2>
 800170c:	2b03      	cmp	r3, #3
 800170e:	dcf5      	bgt.n	80016fc <main+0x16c>
 8001710:	2b01      	cmp	r3, #1
 8001712:	d002      	beq.n	800171a <main+0x18a>
 8001714:	2b02      	cmp	r3, #2
 8001716:	d017      	beq.n	8001748 <main+0x1b8>
 8001718:	e043      	b.n	80017a2 <main+0x212>
			{
				case 1 :	HLCD_voidClearLCD();
 800171a:	f7ff f8ff 	bl	800091c <HLCD_voidClearLCD>
							HLCD_voidSetCursor(Location0, LCD_LINE0);
 800171e:	2100      	movs	r1, #0
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fa24 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString((uint8_t *)"Time:");
 8001726:	482c      	ldr	r0, [pc, #176]	; (80017d8 <main+0x248>)
 8001728:	f7ff fa05 	bl	8000b36 <HLCD_voidSendString>
							HLCD_voidSetCursor(Location5, LCD_LINE0);
 800172c:	2100      	movs	r1, #0
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff fa1d 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString(Global_pu8ReceiveArray);
 8001734:	4829      	ldr	r0, [pc, #164]	; (80017dc <main+0x24c>)
 8001736:	f7ff f9fe 	bl	8000b36 <HLCD_voidSendString>
							Global_u8ReceieComplateFlag=0; Global_ReceiveFlag=0; break;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <main+0x240>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <main+0x244>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e02c      	b.n	80017a2 <main+0x212>
				case 2 :
							HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001748:	2101      	movs	r1, #1
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fa0f 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString((uint8_t *)"Date:");
 8001750:	4823      	ldr	r0, [pc, #140]	; (80017e0 <main+0x250>)
 8001752:	f7ff f9f0 	bl	8000b36 <HLCD_voidSendString>
							HLCD_voidSetCursor(Location5, LCD_LINE1);
 8001756:	2101      	movs	r1, #1
 8001758:	2005      	movs	r0, #5
 800175a:	f7ff fa08 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString(Global_pu8ReceiveArray);
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <main+0x24c>)
 8001760:	f7ff f9e9 	bl	8000b36 <HLCD_voidSendString>
							Global_u8ReceieComplateFlag=0; Global_ReceiveFlag=0;  break;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <main+0x240>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <main+0x244>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e017      	b.n	80017a2 <main+0x212>

				case 3 : 	HLCD_voidClearLCD();
 8001772:	f7ff f8d3 	bl	800091c <HLCD_voidClearLCD>
							HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001776:	2100      	movs	r1, #0
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff f9f8 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString((uint8_t *)"Alarm:");
 800177e:	4819      	ldr	r0, [pc, #100]	; (80017e4 <main+0x254>)
 8001780:	f7ff f9d9 	bl	8000b36 <HLCD_voidSendString>
							HLCD_voidSetCursor(Location5, LCD_LINE1);
 8001784:	2101      	movs	r1, #1
 8001786:	2005      	movs	r0, #5
 8001788:	f7ff f9f1 	bl	8000b6e <HLCD_voidSetCursor>
							HLCD_voidSendString(Global_pu8ReceiveArray);
 800178c:	4813      	ldr	r0, [pc, #76]	; (80017dc <main+0x24c>)
 800178e:	f7ff f9d2 	bl	8000b36 <HLCD_voidSendString>
							Global_u8ReceieComplateFlag=0; Global_ReceiveFlag=0;  break;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <main+0x240>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <main+0x244>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	e000      	b.n	80017a2 <main+0x212>
			}
		}
 80017a0:	bf00      	nop
	   if( Global_u8ReceieComplateFlag==1)
 80017a2:	e7ab      	b.n	80016fc <main+0x16c>
 80017a4:	080018e4 	.word	0x080018e4
 80017a8:	080018ec 	.word	0x080018ec
 80017ac:	080018f4 	.word	0x080018f4
 80017b0:	080018fc 	.word	0x080018fc
 80017b4:	08001904 	.word	0x08001904
 80017b8:	0800190c 	.word	0x0800190c
 80017bc:	08001914 	.word	0x08001914
 80017c0:	0800191c 	.word	0x0800191c
 80017c4:	08001415 	.word	0x08001415
 80017c8:	08001924 	.word	0x08001924
 80017cc:	0800192c 	.word	0x0800192c
 80017d0:	2000010d 	.word	0x2000010d
 80017d4:	2000010e 	.word	0x2000010e
 80017d8:	080018cc 	.word	0x080018cc
 80017dc:	20000040 	.word	0x20000040
 80017e0:	080018d4 	.word	0x080018d4
 80017e4:	080018dc 	.word	0x080018dc

080017e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001816:	f000 f811 	bl	800183c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181a:	f7ff feb9 	bl	8001590 <main>

0800181e <LoopForever>:

LoopForever:
  b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   r0, =_estack
 8001820:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800182c:	08001940 	.word	0x08001940
  ldr r2, =_sbss
 8001830:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001834:	20000110 	.word	0x20000110

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <__libc_init_array>:
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	2600      	movs	r6, #0
 8001840:	4d0c      	ldr	r5, [pc, #48]	; (8001874 <__libc_init_array+0x38>)
 8001842:	4c0d      	ldr	r4, [pc, #52]	; (8001878 <__libc_init_array+0x3c>)
 8001844:	1b64      	subs	r4, r4, r5
 8001846:	10a4      	asrs	r4, r4, #2
 8001848:	42a6      	cmp	r6, r4
 800184a:	d109      	bne.n	8001860 <__libc_init_array+0x24>
 800184c:	f000 f81a 	bl	8001884 <_init>
 8001850:	2600      	movs	r6, #0
 8001852:	4d0a      	ldr	r5, [pc, #40]	; (800187c <__libc_init_array+0x40>)
 8001854:	4c0a      	ldr	r4, [pc, #40]	; (8001880 <__libc_init_array+0x44>)
 8001856:	1b64      	subs	r4, r4, r5
 8001858:	10a4      	asrs	r4, r4, #2
 800185a:	42a6      	cmp	r6, r4
 800185c:	d105      	bne.n	800186a <__libc_init_array+0x2e>
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	f855 3b04 	ldr.w	r3, [r5], #4
 8001864:	4798      	blx	r3
 8001866:	3601      	adds	r6, #1
 8001868:	e7ee      	b.n	8001848 <__libc_init_array+0xc>
 800186a:	f855 3b04 	ldr.w	r3, [r5], #4
 800186e:	4798      	blx	r3
 8001870:	3601      	adds	r6, #1
 8001872:	e7f2      	b.n	800185a <__libc_init_array+0x1e>
 8001874:	08001938 	.word	0x08001938
 8001878:	08001938 	.word	0x08001938
 800187c:	08001938 	.word	0x08001938
 8001880:	0800193c 	.word	0x0800193c

08001884 <_init>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	bf00      	nop
 8001888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188a:	bc08      	pop	{r3}
 800188c:	469e      	mov	lr, r3
 800188e:	4770      	bx	lr

08001890 <_fini>:
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	bf00      	nop
 8001894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001896:	bc08      	pop	{r3}
 8001898:	469e      	mov	lr, r3
 800189a:	4770      	bx	lr
